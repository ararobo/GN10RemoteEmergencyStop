ARM GAS  /tmp/ccfXJrhX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"serial_printf.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZNSt12_Vector_baseIcSaIcEED2Ev,"axG",%progbits,_ZNSt12_Vector_baseIcSaIcEED5Ev,com
  18              		.align	1
  19              		.weak	_ZNSt12_Vector_baseIcSaIcEED2Ev
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZNSt12_Vector_baseIcSaIcEED2Ev:
  27              		.fnstart
  28              	.LVL0:
  29              	.LFB1879:
  30              		.file 1 "/usr/include/newlib/c++/10.3.1/bits/stl_vector.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Hewlett-Packard Company
ARM GAS  /tmp/ccfXJrhX.s 			page 2


  29:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  65:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # include <compare>
  67:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  68:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  71:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** extern "C" void
  73:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  const void*, const void*);
  75:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  76:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** {
  79:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  82:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     struct _Vector_base
  85:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     {
ARM GAS  /tmp/ccfXJrhX.s 			page 3


  86:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        	pointer;
  90:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
  93:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_start;
  94:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_finish;
  95:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 100:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 101:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 107:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 109:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 111:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 112:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 115:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 116:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 117:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 119:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 126:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
 127:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Vector_impl
 129:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 131:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 135:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 139:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
ARM GAS  /tmp/ccfXJrhX.s 			page 4


 143:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 146:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 150:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 151:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 154:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 155:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 156:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  struct _Asan
 159:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 160:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 163:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 168:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Grow
 169:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 170:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 173:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  };
 174:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 175:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename _Up>
 177:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 179:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 182:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 185:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 187:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
 190:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 191:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 192:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 195:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 196:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
ARM GAS  /tmp/ccfXJrhX.s 			page 5


 200:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 202:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
 205:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 206:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Reinit
 208:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 209:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      {
 211:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      }
 214:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 215:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ~_Reinit()
 216:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      {
 217:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      }
 222:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 223:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 225:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 226:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 229:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 230:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 231:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Grow
 233:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 234:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 238:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 242:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 246:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    private:
 247:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      size_type _M_n;
 249:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 250:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  };
 251:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 252:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
ARM GAS  /tmp/ccfXJrhX.s 			page 6


 257:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
 271:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 272:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 273:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 275:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 279:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 283:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       allocator_type
 284:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 287:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base() = default;
 289:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 290:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base() { }
 291:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 292:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 293:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 296:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n)
 299:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl()
 300:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 302:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 305:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 307:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 310:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
ARM GAS  /tmp/ccfXJrhX.s 			page 7


 314:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 315:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 317:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 318:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else
 321:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 322:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
 325:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 326:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 327:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 328:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 331:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 332:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
  31              		.loc 1 333 7 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 333 7 is_stmt 0 view .LVU1
  36 0000 10B5     		push	{r4, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 4, -8
  40              		.cfi_offset 14, -4
  41 0002 0446     		mov	r4, r0
  42              	.LBB234:
 334:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
  43              		.loc 1 335 15 view .LVU2
  44 0004 0068     		ldr	r0, [r0]
  45              	.LVL1:
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
  46              		.loc 1 336 17 view .LVU3
  47 0006 A168     		ldr	r1, [r4, #8]
  48              		.loc 1 336 35 view .LVU4
  49 0008 091A     		subs	r1, r1, r0
  50              	.LVL2:
  51              	.LBB235:
  52              	.LBI235:
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 338:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 339:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 340:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 342:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       pointer
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 345:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 348:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccfXJrhX.s 			page 8


 349:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
  53              		.loc 1 350 7 is_stmt 1 view .LVU5
  54              	.LBB236:
 351:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 352:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__p)
  55              		.loc 1 353 2 is_stmt 0 view .LVU6
  56 000a 08B1     		cbz	r0, .L2
  57              	.LVL3:
  58              	.LBB237:
  59              	.LBI237:
  60              		.file 2 "/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h"
   1:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  33:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #include <bits/stl_construct.h>
  34:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  35:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  36:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <bits/allocator.h>
  37:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <bits/ptr_traits.h>
  38:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <ext/numeric_traits.h>
  39:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
  40:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  41:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** {
  43:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccfXJrhX.s 			page 9


  45:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  48:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   struct __allocator_traits_base
  49:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   {
  50:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  51:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  52:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  53:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  54:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  55:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  56:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  57:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  58:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   protected:
  59:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  60:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  61:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  62:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  63:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  64:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  65:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  66:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  67:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  68:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  69:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  70:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  71:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  72:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  73:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  74:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  75:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   };
  76:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  78:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using __alloc_rebind
  79:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  80:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  81:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /**
  82:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  83:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * @ingroup allocators
  84:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   */
  85:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
  86:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  87:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
  88:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator type
  89:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  90:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocated type
  91:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  92:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  93:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
  94:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  95:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
  96:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  97:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
  98:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  99:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 100:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     private:
 101:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
ARM GAS  /tmp/ccfXJrhX.s 			page 10


 102:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 103:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Ptr
 104:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 105:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 106:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 107:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 109:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 110:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 111:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 112:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 113:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 114:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 115:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 116:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Diff
 117:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 118:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 120:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 121:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 122:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 123:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 124:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 125:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 126:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 127:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 128:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 129:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 130:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     public:
 132:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 133:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 134:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 135:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 136:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 137:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 138:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 139:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 141:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 142:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 143:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 144:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 145:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 146:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 147:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 148:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 149:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 150:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 151:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 152:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 153:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 154:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 155:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 156:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 157:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 158:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
ARM GAS  /tmp/ccfXJrhX.s 			page 11


 159:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 160:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 161:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 162:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 163:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 164:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 165:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's size type
 166:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 167:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 168:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 169:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 170:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 171:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 172:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 173:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 174:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 175:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 176:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 177:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 178:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 179:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 180:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 181:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 182:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 183:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 184:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 185:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 186:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 187:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 188:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 189:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 190:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 191:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 192:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 193:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 194:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 195:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 196:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap
 197:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 198:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 200:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 201:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 202:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 203:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 204:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 205:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using is_always_equal
 206:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 207:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 208:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 209:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 210:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 211:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 212:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 213:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     private:
 214:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 215:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
ARM GAS  /tmp/ccfXJrhX.s 			page 12


 216:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 217:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 218:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 219:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 220:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 221:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr pointer
 222:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 223:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 224:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 225:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 226:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct __construct_helper
 227:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 228:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 229:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 230:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 231:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    static true_type __test(int);
 232:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 233:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  template<typename>
 234:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    static false_type __test(...);
 235:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 236:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 237:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 238:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 239:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 240:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using __has_construct
 241:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 242:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 243:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 245:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 246:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 247:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 248:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 249:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 251:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 252:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 253:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 254:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 255:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 256:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 257:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 258:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 259:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 260:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 261:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 262:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 263:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 264:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 265:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 266:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 267:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 268:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 269:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 270:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 271:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 272:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
ARM GAS  /tmp/ccfXJrhX.s 			page 13


 273:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 274:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 275:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 276:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 277:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 278:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 279:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 280:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 281:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 282:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 283:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr size_type
 284:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 285:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 286:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 287:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 288:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 289:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    / sizeof(value_type);
 290:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 291:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 292:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 293:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 294:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 295:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 296:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 297:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 298:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 299:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr _Alloc2
 300:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 301:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a; }
 302:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     public:
 304:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 305:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 306:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 307:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 308:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 309:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 310:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 311:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 312:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 313:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 314:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 315:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 316:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 317:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 318:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 319:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 320:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 321:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 322:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 323:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 324:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 325:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 326:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 327:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 328:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 329:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
ARM GAS  /tmp/ccfXJrhX.s 			page 14


 330:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 331:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 332:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 333:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 334:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 335:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 336:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 337:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 338:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 339:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 340:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 341:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 342:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 344:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 345:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 346:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 347:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 348:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 349:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 350:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 351:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 352:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  arguments @a __args...
 353:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 354:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 355:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 356:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 357:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 358:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 359:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 360:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 361:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 362:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 363:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 364:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 365:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 366:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 367:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 368:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 369:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 370:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 371:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 372:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 373:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 374:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 375:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 376:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 377:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 378:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 379:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 380:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 381:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 382:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 383:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 384:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 385:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 386:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
ARM GAS  /tmp/ccfXJrhX.s 			page 15


 387:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 389:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 390:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 391:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 392:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 393:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 394:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 395:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 396:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 397:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 398:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 399:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     };
 400:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 401:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus > 201703L
 402:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 403:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 404:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 405:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 406:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 407:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 408:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 409:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator type
 410:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 411:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 412:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocated type
 413:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using value_type = _Tp;
 414:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 415:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's pointer type.
 416:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using pointer = _Tp*;
 417:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 418:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 419:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 420:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 421:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 422:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using void_pointer = void*;
 423:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 424:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 425:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 426:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 427:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's difference type
 428:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 429:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 430:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's size type
 431:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using size_type = std::size_t;
 432:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 433:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 434:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 435:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 437:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 438:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 440:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 441:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 442:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 443:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using is_always_equal = true_type;
ARM GAS  /tmp/ccfXJrhX.s 			page 16


 444:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 445:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 446:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 447:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 448:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 449:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 450:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 451:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 452:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 453:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 454:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 455:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 456:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 457:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 458:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 460:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 461:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 462:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 463:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 464:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 465:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 466:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 467:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 468:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 469:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 470:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 471:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 472:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 473:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 474:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       {
 475:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 476:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.allocate(__n, __hint);
 477:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 478:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.allocate(__n);
 479:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 480:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       }
 481:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 482:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 483:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 484:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 485:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 486:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 487:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 488:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 489:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 490:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
  61              		.loc 2 491 7 is_stmt 1 view .LVU7
  62              	.LBB238:
  63              	.LBB239:
  64              	.LBI239:
  65              		.file 3 "/usr/include/newlib/c++/10.3.1/ext/new_allocator.h"
   1:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
   3:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** //
ARM GAS  /tmp/ccfXJrhX.s 			page 17


   5:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  11:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  16:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  20:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  25:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****  */
  28:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  29:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  32:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <new>
  34:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  39:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  40:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** {
  42:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  44:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****   /**
  45:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  46:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @ingroup allocators
  47:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *
  48:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *
  52:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    */
  54:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     {
  57:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     public:
  58:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
ARM GAS  /tmp/ccfXJrhX.s 			page 18


  62:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  67:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  71:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  72:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  77:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  78:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  81:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  84:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  85:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  88:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  91:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       pointer
  92:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  95:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       const_pointer
  96:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  99:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 100:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 102:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 105:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
 106:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
 107:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 // 3308. std::allocator<void>().allocate(n)
 108:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 109:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 110:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (__n > this->_M_max_size())
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 113:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 114:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 115:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 116:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  {
 117:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 118:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
ARM GAS  /tmp/ccfXJrhX.s 			page 19


 119:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  }
 120:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 122:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 123:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 124:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 125:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       void
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       deallocate(_Tp* __p, size_type __t)
  66              		.loc 3 126 7 view .LVU8
  67              	.LBB240:
 127:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 128:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 129:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 130:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  {
 131:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    ::operator delete(__p,
 132:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** # if __cpp_sized_deallocation
 133:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			      __t * sizeof(_Tp),
 134:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** # endif
 135:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 136:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    return;
 137:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  }
 138:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	::operator delete(__p
  68              		.loc 3 139 19 is_stmt 0 view .LVU9
  69 000c FFF7FEFF 		bl	_ZdlPvj
  70              	.LVL4:
  71              	.L2:
  72              		.loc 3 139 19 view .LVU10
  73              	.LBE240:
  74              	.LBE239:
  75              	.LBE238:
  76              	.LBE237:
  77              	.LBE236:
  78              	.LBE235:
  79              	.LBB241:
  80              	.LBI241:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
  81              		.loc 1 128 14 is_stmt 1 view .LVU11
  82              	.LBB242:
  83              	.LBI242:
  84              		.file 4 "/usr/include/newlib/c++/10.3.1/bits/allocator.h"
   1:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
ARM GAS  /tmp/ccfXJrhX.s 			page 20


  17:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *
  29:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  */
  37:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  38:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  */
  42:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  43:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  46:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <type_traits>
  50:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
  51:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  52:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  54:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** {
  56:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  58:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /**
  59:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @{
  61:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    */
  62:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  63:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // but then it would have a non-trivial default ctor and dtor, which
  65:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // would be an ABI change. So C++20 still uses the allocator<void> explicit
  66:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // specialization, with the historical ABI properties, but with the same
  67:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // members that are present in the primary template.
  68:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if ! _GLIBCXX_INLINE_VERSION
  70:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /// allocator<void> specialization.
  71:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   template<>
  72:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     class allocator<void>
  73:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     {
ARM GAS  /tmp/ccfXJrhX.s 			page 21


  74:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     public:
  75:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef size_t      size_type;
  77:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  78:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus <= 201703L
  80:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // These were removed for C++20.
  81:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef void*       pointer;
  82:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const void* const_pointer;
  83:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  84:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
  85:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	struct rebind
  86:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
  88:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  89:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  90:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  93:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  94:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
  95:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  96:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus > 201703L
  97:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator() = default;
  98:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  99:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up>
 100:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	constexpr
 101:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 102:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 103:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 104:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // No deallocate member because it would be undefined to call it
 105:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // with any pointer which wasn't obtained from allocate.
 106:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 107:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #else // ! C++20
 108:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // allocator_traits<allocator<void>> uses construct and destroy.
 109:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up, typename... _Args>
 110:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	void
 111:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 112:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 113:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 114:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 115:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up>
 116:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	void
 117:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	destroy(_Up* __p)
 118:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 119:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ __p->~_Up(); }
 120:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // C++17
 121:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // C++11
 122:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     };
 123:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // ! _GLIBCXX_INLINE_VERSION
 124:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 125:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /**
 126:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 127:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *
 128:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 129:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  for further details.
 130:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *
ARM GAS  /tmp/ccfXJrhX.s 			page 22


 131:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 132:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    */
 133:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   template<typename _Tp>
 134:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 135:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     {
 136:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     public:
 137:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp        value_type;
 138:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef size_t     size_type;
 139:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 140:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 141:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus <= 201703L
 142:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // These were removed for C++20.
 143:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp*       pointer;
 144:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const _Tp* const_pointer;
 145:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp&       reference;
 146:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const _Tp& const_reference;
 147:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 148:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
 149:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	struct rebind
 150:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 151:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 152:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 153:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 154:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 155:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 156:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 157:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 158:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
 159:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 160:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 161:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 162:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 163:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 165:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 168:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 169:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 170:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 171:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // Avoid implicit deprecation.
 172:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 173:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 174:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 175:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
 176:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 178:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 179:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 180:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       constexpr
 181:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 182:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
  85              		.loc 4 182 7 view .LVU12
  86              	.LBB243:
  87              	.LBI243:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  88              		.loc 3 89 7 view .LVU13
ARM GAS  /tmp/ccfXJrhX.s 			page 23


  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  89              		.loc 3 89 7 is_stmt 0 view .LVU14
  90              	.LBE243:
  91              	.LBE242:
  92              	.LBE241:
  93              	.LBE234:
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  94              		.loc 1 337 7 view .LVU15
  95 0010 2046     		mov	r0, r4
  96 0012 10BD     		pop	{r4, pc}
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  97              		.loc 1 337 7 view .LVU16
  98              		.cfi_endproc
  99              	.LFE1879:
 100              		.cantunwind
 101              		.fnend
 103              		.weak	_ZNSt12_Vector_baseIcSaIcEED1Ev
 104              		.thumb_set _ZNSt12_Vector_baseIcSaIcEED1Ev,_ZNSt12_Vector_baseIcSaIcEED2Ev
 105              		.section	.rodata._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_.
 106              		.align	2
 107              	.LC0:
 108 0000 63616E6E 		.ascii	"cannot create std::vector larger than max_size()\000"
 108      6F742063 
 108      72656174 
 108      65207374 
 108      643A3A76 
 109              		.section	.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,"a
 110              		.align	1
 111              		.weak	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:
 118              		.fnstart
 119              	.LVL5:
 120              	.LFB1733:
 121              		.file 5 "Peripheral/Inc/serial_printf.hpp"
   1:Peripheral/Inc/serial_printf.hpp **** #pragma once
   2:Peripheral/Inc/serial_printf.hpp **** #include <string>
   3:Peripheral/Inc/serial_printf.hpp **** #include <vector>
   4:Peripheral/Inc/serial_printf.hpp **** #include <cstdio>
   5:Peripheral/Inc/serial_printf.hpp **** #include "usart.h"
   6:Peripheral/Inc/serial_printf.hpp **** 
   7:Peripheral/Inc/serial_printf.hpp **** #define LOG_INFO "[INFO]  "
   8:Peripheral/Inc/serial_printf.hpp **** #define LOG_DEBUG "[DEBUG] "
   9:Peripheral/Inc/serial_printf.hpp **** #define LOG_ERROR "[ERROR] "
  10:Peripheral/Inc/serial_printf.hpp **** #define LOG_WARNING "[WARN]  "
  11:Peripheral/Inc/serial_printf.hpp **** 
  12:Peripheral/Inc/serial_printf.hpp **** #define DEBUG_MODE true
  13:Peripheral/Inc/serial_printf.hpp **** 
  14:Peripheral/Inc/serial_printf.hpp **** template <typename... Args>
  15:Peripheral/Inc/serial_printf.hpp **** void serial_printf(const std::string &fmt, Args... args)
 122              		.loc 5 15 6 is_stmt 1 view -0
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 16
 125              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccfXJrhX.s 			page 24


 126              		.loc 5 15 6 is_stmt 0 view .LVU18
 127 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 128              		.save {r4, r5, r6, r7, lr}
 129              	.LCFI1:
 130              		.cfi_def_cfa_offset 20
 131              		.cfi_offset 4, -20
 132              		.cfi_offset 5, -16
 133              		.cfi_offset 6, -12
 134              		.cfi_offset 7, -8
 135              		.cfi_offset 14, -4
 136              		.pad #20
 137 0002 85B0     		sub	sp, sp, #20
 138              	.LCFI2:
 139              		.cfi_def_cfa_offset 40
 140 0004 0746     		mov	r7, r0
 141              	.LVL6:
 142              	.LBB326:
 143              	.LBI326:
 144              		.file 6 "/usr/include/newlib/c++/10.3.1/bits/basic_string.h"
   1:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
  31:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
  33:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  34:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  37:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccfXJrhX.s 			page 25


  39:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  43:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  46:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  47:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # include <string_view>
  49:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  50:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  52:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** {
  53:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  54:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  55:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef __cpp_lib_is_constant_evaluated
  56:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Support P1032R1 in C++20 (but not P0980R1 yet).
  57:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # define __cpp_lib_constexpr_string 201811L
  58:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #elif __cplusplus >= 201703L
  59:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Support P0426R1 changes to char_traits in C++17.
  60:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # define __cpp_lib_constexpr_string 201611L
  61:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #elif __cplusplus > 201703L
  62:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  63:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  64:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  65:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  66:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****   /**
  67:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  68:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  69:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  70:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @ingroup strings
  71:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @ingroup sequences
  72:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  73:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  74:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  75:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *                   char_traits<_CharT>.
  76:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  77:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  78:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  79:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  80:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  81:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  82:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  83:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    */
  84:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  85:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     class basic_string
  86:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     {
  87:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  88:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  89:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  90:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Types:
  92:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
  93:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef _Traits					traits_type;
  94:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  95:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
ARM GAS  /tmp/ccfXJrhX.s 			page 26


  96:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  97:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  98:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  99:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
 101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
 103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
 104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 							const_iterator;
 105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     protected:
 112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef iterator __const_iterator;
 115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
 120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _Res>;
 130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static __sv_type
 133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return __svt; }
 135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // allows to add an internal constructor that does not
 138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // participate in overload resolution when a string_view
 139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // is provided.
 140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       struct __sv_wrapper
 141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__sv_type _M_sv;
 144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *          wrapper.
 149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       explicit
ARM GAS  /tmp/ccfXJrhX.s 			page 27


 153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type		_M_string_length;
 176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       union
 180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_data(pointer __p)
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_length(size_type __length)
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_data() const
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_local_data()
 199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return pointer(_M_local_buf);
 204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_pointer
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_local_data() const
 209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccfXJrhX.s 			page 28


 210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_set_length(size_type __n)
 223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_length(__n);
 225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       bool
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_is_local() const
 230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Create & Destroy
 233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_create(size_type&, size_type);
 235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_dispose()
 238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (!_M_is_local())
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 std::__false_type)
 253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
 254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Integer>
 261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
ARM GAS  /tmp/ccfXJrhX.s 			page 29


 267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__req, __c); }
 268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
 273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         }
 276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     std::input_iterator_tag);
 282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _FwdIterator>
 286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     std::forward_iterator_tag);
 289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       allocator_type&
 294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_get_allocator()
 295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const allocator_type&
 298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_get_allocator() const
 299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
 302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 313:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
 314:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 315:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 316:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 317:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 318:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 319:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 320:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__pos > this->size())
 321:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 322:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 323:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __s, __pos, this->size());
ARM GAS  /tmp/ccfXJrhX.s 			page 30


 324:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return __pos;
 325:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 326:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 327:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 328:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 329:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 330:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 331:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 332:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 333:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 334:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 335:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 336:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 337:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 338:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 339:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 340:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 341:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 342:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 344:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       bool
 345:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 346:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 347:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 348:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 349:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 350:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 351:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 352:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // traits_type::copy/move/assign.
 353:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 355:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 357:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 358:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 359:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 360:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 361:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 362:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 363:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 364:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 365:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 366:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 367:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 368:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 369:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 370:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 371:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 372:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 373:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 374:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 375:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 376:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 377:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 378:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 379:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 380:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
ARM GAS  /tmp/ccfXJrhX.s 			page 31


 381:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 382:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _Iterator>
 383:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         static void
 384:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 385:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
 386:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 387:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 388:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 389:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 390:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 391:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 392:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 393:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 394:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 395:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 396:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 397:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 398:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 399:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 400:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 401:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 402:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 403:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 404:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 405:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 406:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 407:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 408:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static int
 409:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 410:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 411:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 412:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 413:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 414:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 415:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 416:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 417:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 418:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return int(__d);
 419:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 420:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 421:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 422:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_assign(const basic_string&);
 423:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 424:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 425:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 426:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		size_type __len2);
 427:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 428:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 429:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 430:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 431:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
 432:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Construct/copy/destroy:
 433:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 434:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 435:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 437:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
ARM GAS  /tmp/ccfXJrhX.s 			page 32


 438:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 439:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string()
 440:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 441:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 442:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 443:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 444:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 445:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 446:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 447:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       explicit
 448:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 449:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 450:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 451:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 452:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 453:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 454:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 455:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 456:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str)
 457:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 458:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 459:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 460:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 461:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 462:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 463:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 464:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 465:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 466:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 467:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 468:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 469:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 470:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 471:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 472:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 473:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 474:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 475:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 476:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 477:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 478:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 479:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 480:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 481:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 482:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 483:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 484:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 485:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   size_type __n)
 486:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 487:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 488:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 489:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 490:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 491:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 492:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 493:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 494:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
ARM GAS  /tmp/ccfXJrhX.s 			page 33


 495:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 496:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 497:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 498:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 499:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 500:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 501:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 502:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 503:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 504:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start
 505:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 506:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 507:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 508:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 509:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 510:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 511:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source character %array.
 512:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 513:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 514:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 515:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 516:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  has no special meaning.
 517:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 518:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 519:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 520:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 521:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 522:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 523:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 524:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 525:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source C string.
 526:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 527:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 528:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 529:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 530:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 531:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 532:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 534:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 535:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __end = __s ? __s + traits_type::length(__s)
 537:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  // We just need a non-null pointer here to get an exception:
 538:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__s, __end, random_access_iterator_tag());
 540:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 541:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 543:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 544:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters.
 545:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Character to use.
 546:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 547:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 548:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 549:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 550:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 551:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
ARM GAS  /tmp/ccfXJrhX.s 			page 34


 552:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 553:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 554:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 555:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__n, __c); }
 556:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 557:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 558:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 559:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Move construct string.
 560:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 561:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 562:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 563:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 564:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        **/
 565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 566:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 567:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 569:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 570:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 571:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 572:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 573:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 574:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 575:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 577:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 578:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 579:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 580:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 581:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 582:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_length(__str.length());
 583:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 584:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str._M_set_length(0);
 585:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 586:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 587:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 588:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 589:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 590:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 591:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 592:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 593:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 594:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 595:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 596:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 597:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 598:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 599:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 600:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 601:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 602:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 603:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 604:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 605:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 606:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 607:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 608:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
ARM GAS  /tmp/ccfXJrhX.s 			page 35


 609:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 610:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 611:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 612:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 613:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 614:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 615:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 616:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 617:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 618:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 619:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 620:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 621:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 622:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 623:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 624:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
 625:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 626:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 627:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 628:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __beg  Start of range.
 629:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __end  End of range.
 630:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 631:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 632:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 633:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InputIterator,
 634:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 635:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 636:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InputIterator>
 637:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 638:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 639:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 640:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 641:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 642:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 643:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 644:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 645:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 646:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 647:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 648:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 649:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 650:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 651:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 652:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 653:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 654:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 655:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 656:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 657:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 658:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 659:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 660:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 661:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 662:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	explicit
 663:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 664:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 665:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
ARM GAS  /tmp/ccfXJrhX.s 			page 36


 666:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 667:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 668:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 669:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ~basic_string()
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 672:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 673:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 674:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 675:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 676:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 677:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 678:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(const basic_string& __str)
 679:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 680:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->assign(__str);
 681:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 682:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 683:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 684:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 685:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 686:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 687:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 688:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(const _CharT* __s)
 689:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->assign(__s); }
 690:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 691:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 692:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 693:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Source character.
 694:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 695:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 696:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  (*this)[0] == @a c.
 697:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 698:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 699:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(_CharT __c)
 700:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 701:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->assign(1, __c);
 702:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 703:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 704:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 705:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 706:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 707:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 708:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 709:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 710:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 711:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 712:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        **/
 713:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 714:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 715:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 716:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(basic_string&& __str)
 717:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 718:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 719:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 720:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 721:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 722:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
ARM GAS  /tmp/ccfXJrhX.s 			page 37


 723:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 724:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 725:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(_M_local_data());
 726:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_set_length(0);
 727:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 728:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 729:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 730:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 731:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 732:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 733:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it.
 734:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (__str.size())
 735:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 736:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_set_length(__str.size());
 737:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 738:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 739:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 740:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 741:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 742:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 743:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    pointer __data = nullptr;
 744:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    size_type __capacity;
 745:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (!_M_is_local())
 746:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
 747:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 748:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
 749:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    // __str can reuse our existing storage.
 750:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    __data = _M_data();
 751:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 752:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
 753:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		else // __str can't use it, so free it.
 754:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 755:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
 756:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 757:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 758:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 759:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 760:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (__data)
 761:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
 762:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		__str._M_data(__data);
 763:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 764:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
 765:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    else
 766:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 767:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 768:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else // Need to do a deep copy
 769:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  assign(__str);
 770:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str.clear();
 771:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 772:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 773:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 774:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 775:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 776:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 777:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 778:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 779:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
ARM GAS  /tmp/ccfXJrhX.s 			page 38


 780:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 781:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 782:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 783:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 784:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
 785:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 786:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 787:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 788:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 789:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 790:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 791:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****      template<typename _Tp>
 792:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 793:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        operator=(const _Tp& __svt)
 794:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        { return this->assign(__svt); }
 795:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 796:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 797:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 798:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return A string_view.
 799:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 800:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator __sv_type() const noexcept
 801:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 802:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
 803:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 804:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Iterators:
 805:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 806:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 807:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the %string.
 808:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 809:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
 810:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 811:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return iterator(_M_data()); }
 812:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 813:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 814:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 815:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 816:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 817:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 818:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 819:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 820:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 821:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 822:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 823:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 824:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 825:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
 826:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 827:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 828:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 829:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 830:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 831:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last character in the %string.
 832:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 833:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 834:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 835:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 836:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccfXJrhX.s 			page 39


 837:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 838:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 839:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 840:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  order.
 841:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 842:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reverse_iterator
 843:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 844:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 845:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 846:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 847:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 848:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 849:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  reverse element order.
 850:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 851:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 852:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 853:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 854:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 855:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 856:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 857:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 858:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element order.
 859:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 860:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reverse_iterator
 861:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 862:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 863:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 864:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 865:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 866:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 867:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 868:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 869:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 870:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 871:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 872:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 873:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 874:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 875:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 876:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 877:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 878:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 879:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       cbegin() const noexcept
 880:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 881:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 882:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 883:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 884:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last character in the %string.
 885:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 886:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 887:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       cend() const noexcept
 888:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 889:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 890:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 891:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 892:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 893:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  reverse element order.
ARM GAS  /tmp/ccfXJrhX.s 			page 40


 894:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 895:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 896:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       crbegin() const noexcept
 897:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 898:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 899:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 900:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 901:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 902:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 903:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 904:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 905:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       crend() const noexcept
 906:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 907:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 908:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 909:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
 910:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Capacity:
 911:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 912:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  null-termination.
 913:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 914:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 915:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 916:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 917:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 918:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  null-termination.
 919:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 922:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 923:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 924:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 925:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 926:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 927:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 928:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 929:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 930:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 931:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 932:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 933:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 934:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 935:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 936:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 937:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 938:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 939:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 940:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 941:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 942:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 943:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 944:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 945:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 946:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 947:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 948:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 949:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  setting them to 0.
 950:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
ARM GAS  /tmp/ccfXJrhX.s 			page 41


 951:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 952:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       resize(size_type __n)
 953:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 954:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 955:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 956:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 957:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 958:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       shrink_to_fit() noexcept
 959:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 960:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_exceptions
 961:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (capacity() > size())
 962:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 963:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    try
 964:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      { reserve(0); }
 965:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    catch(...)
 966:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      { }
 967:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 968:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 969:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 970:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 971:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 972:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 973:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 974:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  before needing to allocate more memory.
 975:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 976:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 977:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 978:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 979:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 980:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 981:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 982:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 983:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 984:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 985:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *          characters.
 986:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 987:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 988:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 989:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 990:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 991:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 992:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
 993:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 994:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 995:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 996:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 997:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 998:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  data.
 999:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1000:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1001:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
1002:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1003:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1004:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Erases the string, making it empty.
1005:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1006:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1007:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/ccfXJrhX.s 			page 42


1008:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
1009:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1010:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1011:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1012:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  <code>*this == ""</code>.
1013:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1014:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
1015:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1016:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->size() == 0; }
1017:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1018:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Element access:
1019:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1020:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1021:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1022:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1023:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1024:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1025:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1026:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1027:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  see at().)
1028:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1029:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1030:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1031:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1032:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1033:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1034:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1035:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1036:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1037:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1038:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1039:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1040:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1041:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1042:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1043:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1044:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  see at().)
1045:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1046:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1047:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator[](size_type __pos)
1048:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1049:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1050:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// and in C++11 mode.
1051:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1052:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1053:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1054:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1055:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1056:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1057:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1058:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1059:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1060:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1061:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1062:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1063:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1064:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
ARM GAS  /tmp/ccfXJrhX.s 			page 43


1065:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1066:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1067:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1068:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       at(size_type __n) const
1069:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1070:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n >= this->size())
1071:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1072:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1073:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1074:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __n, this->size());
1075:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1076:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1077:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1078:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1079:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1080:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1081:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1082:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1083:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1084:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1085:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1086:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1087:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1088:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1089:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       at(size_type __n)
1090:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1091:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n >= size())
1092:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1093:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1094:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1095:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __n, this->size());
1096:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1097:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1098:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1099:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       front() noexcept
1106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](0);
1109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       front() const noexcept
1117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](0);
1120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccfXJrhX.s 			page 44


1122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       back() noexcept
1128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last element of the %string.
1136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       back() const noexcept
1139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Modifiers:
1146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(const basic_string& __str)
1153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__str); }
1154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(const _CharT* __s)
1162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__s); }
1163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a character.
1166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to append.
1167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(_CharT __c)
1171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->push_back(__c);
1173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
ARM GAS  /tmp/ccfXJrhX.s 			page 45


1179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ return this->append(__svt); }
1197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const basic_string& __str)
1206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a substring.
1210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  remainder of @a __str is appended.
1220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data()
1224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C substring.
1229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccfXJrhX.s 			page 46


1236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const _CharT* __s)
1248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append multiple characters.
1257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters.
1280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
ARM GAS  /tmp/ccfXJrhX.s 			page 47


1293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         append(const _Tp& __svt)
1305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
1306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           __sv_type __sv = __svt;
1307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         }
1309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1313:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1314:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1315:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1316:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1317:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1318:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1319:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1320:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1321:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1322:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_append(__sv.data()
1323:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1324:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1325:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1326:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1327:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1328:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1329:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a single character.
1330:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to append.
1331:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1332:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1333:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       push_back(_CharT __c)
1334:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1335:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __size = this->size();
1336:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1337:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1338:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1339:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1340:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1341:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1342:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1343:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1344:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1345:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1346:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1347:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1348:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const basic_string& __str)
1349:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccfXJrhX.s 			page 48


1350:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1351:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
1352:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
1353:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
1354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
1355:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
1356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
1357:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
1358:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
1359:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
1360:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1361:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_data(_M_local_data());
1362:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_set_length(0);
1363:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
1364:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		else
1365:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
1366:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    const auto __len = __str.size();
1367:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
1368:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
1369:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
1370:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1371:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_data(__ptr);
1372:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_capacity(__len);
1373:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_set_length(__len);
1374:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
1375:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
1376:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
1377:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
1378:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1379:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_assign(__str);
1380:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1381:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1382:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1383:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1384:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1385:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1386:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1387:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1388:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1389:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1390:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1391:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1392:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1393:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(basic_string&& __str)
1394:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1395:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1396:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1397:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1398:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this = std::move(__str);
1399:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1400:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1401:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1402:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1403:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1404:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to use.
1405:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1406:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
ARM GAS  /tmp/ccfXJrhX.s 			page 49


1407:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1408:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1409:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1410:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1411:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1412:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1413:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1414:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1415:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1416:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1417:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1418:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1419:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1420:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1421:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1422:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1423:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1424:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1425:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1426:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1427:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1428:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1429:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1430:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1431:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1432:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1433:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1434:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1435:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1436:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1437:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1438:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1439:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1440:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1441:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1442:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1443:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1444:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1445:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  function returns.
1446:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1447:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1448:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const _CharT* __s)
1449:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1450:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1451:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1452:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  traits_type::length(__s));
1453:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1454:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1455:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1456:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1457:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1458:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1459:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1460:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1461:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1462:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character @a __c.
1463:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
ARM GAS  /tmp/ccfXJrhX.s 			page 50


1464:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1465:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1466:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1467:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1468:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1469:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1470:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1471:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1472:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1473:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1474:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1475:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1476:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1477:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1478:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1479:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1480:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1481:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1482:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
1483:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1484:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1485:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1486:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1487:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1488:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1489:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1490:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1491:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1492:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1493:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1494:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1495:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1496:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1497:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1498:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1499:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1500:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1502:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1503:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1504:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1505:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt)
1506:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1507:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1508:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1509:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1510:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1511:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1512:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1513:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1514:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1515:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1516:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1517:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1518:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1519:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1520:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
ARM GAS  /tmp/ccfXJrhX.s 			page 51


1521:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1522:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1523:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1524:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
1525:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1526:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1527:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1528:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1529:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1530:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1531:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1532:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1534:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *              insert at.
1535:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1537:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1538:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1540:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1541:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1542:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1543:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1544:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1545:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1546:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1547:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1548:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1549:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1550:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1551:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1552:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1553:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1554:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1555:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1556:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1557:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1558:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1559:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1560:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1561:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1562:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1563:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1564:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1566:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1567:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1569:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1570:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1571:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1572:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1573:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1574:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1575:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1577:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *              insert at.
ARM GAS  /tmp/ccfXJrhX.s 			page 52


1578:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1579:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1580:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1581:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1582:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1583:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1584:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1585:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1586:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1587:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1588:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1589:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1590:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	iterator
1591:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1592:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
1593:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1594:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1595:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1596:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1597:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1598:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1599:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1600:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1601:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1602:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1603:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1604:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1605:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1606:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1607:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1608:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1609:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1610:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1611:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1612:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
1613:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1614:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1615:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1616:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1617:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1618:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1619:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1620:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1621:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1622:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1623:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1624:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1625:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
1626:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1627:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1628:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1629:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // See PR libstdc++/83328
1630:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1631:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1632:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1633:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1634:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
ARM GAS  /tmp/ccfXJrhX.s 			page 53


1635:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1636:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1637:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1638:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1639:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1640:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert value of a string.
1641:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1 Position in string to insert at.
1642:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to insert.
1643:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1644:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1645:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1646:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1647:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1648:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1649:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1650:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1651:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1652:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1653:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1654:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1655:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1656:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1657:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a substring.
1658:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1659:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str   The string to insert.
1660:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1661:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1662:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1663:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1664:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1665:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1666:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1667:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1668:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1669:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1672:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1673:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1674:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1675:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1676:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1677:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1678:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1679:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1680:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1681:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1682:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a C substring.
1683:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1684:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1685:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1686:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1687:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1688:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1689:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1690:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1691:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
ARM GAS  /tmp/ccfXJrhX.s 			page 54


1692:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1693:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1694:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1695:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1696:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1697:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1698:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1699:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1700:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1701:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1702:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a C string.
1703:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1704:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1705:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1706:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1707:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1708:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1709:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1710:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1711:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1712:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1713:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1714:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
1715:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1716:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1717:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1718:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1719:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1720:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1721:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     traits_type::length(__s));
1722:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1723:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1724:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1725:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1726:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1727:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1728:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1729:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1730:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1731:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1732:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1733:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1734:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1735:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1736:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1737:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1738:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1739:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1740:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1741:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1742:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1743:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1744:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1745:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1746:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert one character.
1747:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1748:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
ARM GAS  /tmp/ccfXJrhX.s 			page 55


1749:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1750:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1751:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1752:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1753:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1754:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1755:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1756:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1757:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1758:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1759:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1760:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1761:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1762:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1763:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1764:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1765:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1766:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1767:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1768:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1769:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1770:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1771:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1772:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1773:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1774:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1775:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1776:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1777:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1778:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1779:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1780:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1781:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1782:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1783:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1784:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1785:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
1786:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1787:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1788:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1789:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1790:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1791:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1792:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1793:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1794:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1795:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1796:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0),
1797:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
1798:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1799:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1800:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1801:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1802:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1803:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1804:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove characters.
1805:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
ARM GAS  /tmp/ccfXJrhX.s 			page 56


1806:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1807:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1808:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1809:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1810:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1811:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1812:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1813:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1814:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1815:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1816:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1817:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1818:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1819:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1820:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1821:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1822:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == npos)
1823:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1824:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (__n != 0)
1825:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1826:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1827:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1828:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1829:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1830:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove one character.
1831:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1832:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1833:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1834:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1835:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1836:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1837:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1838:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(__const_iterator __position)
1839:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1840:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1841:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __position < end());
1842:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1843:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1844:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1845:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1846:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1847:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1848:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1849:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1850:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1851:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1852:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1853:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1854:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1855:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1856:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1857:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1858:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1859:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1860:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __last <= end());
1861:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         const size_type __pos = __first - begin();
1862:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__last == end())
ARM GAS  /tmp/ccfXJrhX.s 			page 57


1863:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1864:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
1865:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1866:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1867:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1868:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1869:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1870:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1871:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove the last character.
1872:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1873:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The string must be non-empty.
1874:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1875:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1876:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pop_back() noexcept
1877:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1878:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1879:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1880:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1881:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1882:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1883:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1884:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1885:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1886:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1887:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1888:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1889:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1890:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1891:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1892:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1893:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1894:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1895:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1896:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1897:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1898:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  error is thrown.
1899:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1900:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1901:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1902:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1903:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1904:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1905:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1906:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1907:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1908:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1909:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1910:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1911:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1912:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1913:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __str.size().
1914:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1915:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1916:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1917:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1918:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1919:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
ARM GAS  /tmp/ccfXJrhX.s 			page 58


1920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1922:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1923:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1924:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1925:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1926:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1927:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1928:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1929:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1930:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1931:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1932:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1933:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1934:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1935:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1936:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1937:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1938:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1939:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1940:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1941:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1942:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1943:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1944:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1945:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1946:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1947:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1948:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1949:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      size_type __n2)
1950:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1951:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1952:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1953:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1954:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1955:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1956:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1957:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1958:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1959:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1960:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1961:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1962:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1963:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1964:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1965:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1966:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1967:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1968:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1969:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1970:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1971:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1972:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1973:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1974:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1975:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1976:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
ARM GAS  /tmp/ccfXJrhX.s 			page 59


1977:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1978:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1979:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1980:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1981:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1982:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1983:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1984:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
1985:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1986:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1987:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1988:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1989:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1990:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1991:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1992:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1993:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1994:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1995:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1996:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1997:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1998:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1999:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
2000:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2001:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2002:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
2003:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2004:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2005:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String value to insert.
2006:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2007:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2008:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2009:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2010:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
2011:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
2012:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
2013:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2014:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2015:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2016:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const basic_string& __str)
2017:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2018:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2019:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2020:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2021:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2022:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2023:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2024:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
2025:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2026:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2027:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2028:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2029:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2030:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2031:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2032:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2033:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
ARM GAS  /tmp/ccfXJrhX.s 			page 60


2034:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2035:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2036:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2037:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2038:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2039:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2040:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2041:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2042:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2043:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2044:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2045:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2046:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2047:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2048:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2049:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2050:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2051:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2052:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2053:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2054:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2055:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2056:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2057:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2058:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2059:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2060:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2061:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2062:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2063:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2064:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2065:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2066:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2067:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2068:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
2069:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2070:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2071:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2072:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2073:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2074:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2075:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2076:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2077:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2078:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2079:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      _CharT __c)
2080:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2081:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2082:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2083:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2084:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2085:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2086:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2087:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2088:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2089:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2090:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
ARM GAS  /tmp/ccfXJrhX.s 			page 61


2091:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2092:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2093:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2094:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2095:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2096:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2097:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2098:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2099:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
2103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
2105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
2108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 					   std::__false_type());
2113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
2115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
2116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
2119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
2120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
2121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
2124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
2131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
ARM GAS  /tmp/ccfXJrhX.s 			page 62


2148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
2197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
ARM GAS  /tmp/ccfXJrhX.s 			page 63


2205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
2230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
2231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           to replace at.
2239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           for the replace.
2241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
2252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
2254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _Integer>
2255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string&
2256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
2261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string&
ARM GAS  /tmp/ccfXJrhX.s 			page 64


2262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    __false_type);
2265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     _CharT __c);
2269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 const size_type __len2);
2273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
2278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Number of characters actually copied
2285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.
2290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
2292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  String to swap with.
2297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  time.
2300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
2302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // String operations:
2305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  happen.
2310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const _CharT*
2312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
 145              		.loc 6 2312 7 is_stmt 1 view .LVU19
 146              	.LBB327:
 147              	.LBI327:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 148              		.loc 6 194 7 view .LVU20
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
ARM GAS  /tmp/ccfXJrhX.s 			page 65


 149              		.loc 6 194 7 is_stmt 0 view .LVU21
 150              	.LBE327:
 151              	.LBE326:
  16:Peripheral/Inc/serial_printf.hpp **** {
  17:Peripheral/Inc/serial_printf.hpp ****     // フォーマットされた文字列の長さを取得
  18:Peripheral/Inc/serial_printf.hpp ****     size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args...);
 152              		.loc 5 18 31 view .LVU22
 153 0006 0268     		ldr	r2, [r0]
 154 0008 0021     		movs	r1, #0
 155 000a 0846     		mov	r0, r1
 156              	.LVL7:
 157              		.loc 5 18 31 view .LVU23
 158 000c FFF7FEFF 		bl	snprintf
 159              	.LVL8:
 160              	.LBB328:
 161              	.LBI328:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 162              		.loc 4 164 7 is_stmt 1 view .LVU24
 163              	.LBB329:
 164              	.LBI329:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 165              		.loc 3 79 7 view .LVU25
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 166              		.loc 3 79 7 is_stmt 0 view .LVU26
 167              	.LBE329:
 168              	.LBE328:
 169              	.LBB330:
 170              	.LBI330:
 354:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 356:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 357:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
 358:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 365:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     };
 366:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 367:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   /**
 368:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  individual elements in any order.
 370:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 371:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @ingroup sequences
 372:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 373:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 376:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 382:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
ARM GAS  /tmp/ccfXJrhX.s 			page 66


 383:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   */
 388:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     {
 391:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Concept requirements.
 393:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 397:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 399:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 400:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 407:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 408:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 409:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 413:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 414:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator;
 422:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 428:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     private:
 429:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
 431:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 433:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 438:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
ARM GAS  /tmp/ccfXJrhX.s 			page 67


 440:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return false; }
 442:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 443:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
 444:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_use_relocate()
 445:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 446:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 451:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 452:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 453:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 456:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 458:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 459:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 460:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return __result; }
 463:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 464:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 465:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 468:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 471:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif // C++11
 472:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 473:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
 474:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 479:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 480:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 483:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 484:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 486:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector() = default;
 488:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 489:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector() { }
 490:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 491:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 492:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 493:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 495:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 496:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
ARM GAS  /tmp/ccfXJrhX.s 			page 68


 497:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__a) { }
 499:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 500:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 501:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 502:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 505:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 506:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructed elements.
 508:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 509:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 171              		.loc 1 510 7 is_stmt 1 view .LVU27
 172              	.LBB331:
 173              	.LBB332:
 174              	.LBI332:
 511:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 513:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 514:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 515:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 518:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 519:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 520:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 522:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 527:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 528:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 531:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 532:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 533:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 535:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 536:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 541:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 543:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 546:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @a __x  will not be copied
 548:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
ARM GAS  /tmp/ccfXJrhX.s 			page 69


 550:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 553:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const vector& __x)
 554:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__x.size(),
 555:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 557:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 558:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 560:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 561:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 562:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 563:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 564:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 565:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 566:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 567:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  moved instance.
 569:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector.
 571:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 572:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 573:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 574:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 575:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 577:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 578:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 579:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 581:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 582:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 583:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 584:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     private:
 585:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 588:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 589:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__m)
 591:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 592:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (!__rv.empty())
 595:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 596:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 598:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 600:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 601:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    __rv.clear();
 602:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
 603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 604:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Move constructor with alternative allocator
ARM GAS  /tmp/ccfXJrhX.s 			page 70


 607:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       noexcept( noexcept(
 609:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 613:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 614:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 615:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 617:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 618:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 619:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer_list @a __l.
 621:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 622:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 625:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__a)
 628:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 629:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 631:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 632:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 633:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 634:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 635:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 637:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 638:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 639:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 640:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [first,last).
 642:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 643:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 650:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 651:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 652:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Base(__a)
 656:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 657:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 659:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 660:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 661:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 662:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
ARM GAS  /tmp/ccfXJrhX.s 			page 71


 664:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Base(__a)
 665:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 666:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 670:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 671:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 672:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 673:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  responsibility.
 677:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 679:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 680:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 682:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 684:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 685:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 686:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 689:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @a __x will not be copied.
 691:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 692:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 694:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 695:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(const vector& __x);
 696:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 697:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 698:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 699:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 702:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  if the allocators permit it).
 704:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 706:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 708:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 709:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 711:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	constexpr bool __move_storage =
 712:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *this;
 716:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 717:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 718:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 719:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
ARM GAS  /tmp/ccfXJrhX.s 			page 72


 721:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 722:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 724:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 725:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 728:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 729:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 730:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 732:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 734:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *this;
 735:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 736:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 737:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 738:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 739:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 743:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the number of elements assigned.
 747:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 748:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 749:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 752:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 753:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 755:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 756:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 757:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  range [__first,__last).
 759:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 760:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 763:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 764:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 765:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 766:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 768:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 771:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 772:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 773:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 775:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
ARM GAS  /tmp/ccfXJrhX.s 			page 73


 778:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 779:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 780:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 781:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 782:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 783:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 785:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 786:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 788:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 789:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 792:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 793:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 794:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 796:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 798:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 799:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 800:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 801:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::get_allocator;
 803:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 804:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // iterators
 805:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 806:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 809:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 810:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
 811:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 814:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 815:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 818:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 819:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 820:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 823:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 824:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 827:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 828:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
 829:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 832:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 833:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
ARM GAS  /tmp/ccfXJrhX.s 			page 74


 835:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  ordinary element order.
 836:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 837:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 838:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 841:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 842:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 845:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 846:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reverse_iterator
 847:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 849:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 850:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 851:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  reverse element order.
 854:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 855:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 856:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 859:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 860:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  in reverse element order.
 863:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 864:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reverse_iterator
 865:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 867:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 868:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 869:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is done in reverse element order.
 872:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 873:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 874:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 876:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 877:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 878:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 879:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 882:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 883:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 884:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       cbegin() const noexcept
 885:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 887:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 888:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  ordinary element order.
 891:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
ARM GAS  /tmp/ccfXJrhX.s 			page 75


 892:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 893:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       cend() const noexcept
 894:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 896:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 897:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  reverse element order.
 900:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 901:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 902:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       crbegin() const noexcept
 903:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 905:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 906:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is done in reverse element order.
 909:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 910:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 911:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       crend() const noexcept
 912:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 914:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 915:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.2] capacity
 916:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 918:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 921:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 923:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 926:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 927:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 928:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 929:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 931:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 933:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  default constructed elements are appended.
 935:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 936:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 937:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size)
 938:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 939:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 940:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 942:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 944:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 945:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 946:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
ARM GAS  /tmp/ccfXJrhX.s 			page 76


 949:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 950:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  given data.
 955:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 956:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 957:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 959:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 960:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 962:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 964:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 965:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 966:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 969:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 970:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  given data.
 975:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 976:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 977:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 979:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 980:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 982:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 984:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 985:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 986:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 987:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 989:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       shrink_to_fit()
 990:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 991:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 992:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 993:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 994:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 996:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 997:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 998:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1002:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1003:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  equal end().)
1005:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
ARM GAS  /tmp/ccfXJrhX.s 			page 77


1006:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return begin() == end(); }
1009:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1010:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1011:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1012:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *          elements.
1013:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1014:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1016:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  thrown.
1020:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1021:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  and copying of %vector data.
1026:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1027:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1028:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reserve(size_type __n);
1029:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1030:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // element access
1031:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1032:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1035:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1036:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1037:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  see at().)
1041:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1042:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1044:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1045:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1047:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1048:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1049:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1050:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1053:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1054:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1055:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  see at().)
1059:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1060:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1061:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
ARM GAS  /tmp/ccfXJrhX.s 			page 78


1063:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1066:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1067:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
1068:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Safety check used only from at().
1069:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1070:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1071:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1072:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__n >= this->size())
1073:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				       "(which is %zu)"),
1076:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				   __n, this->size());
1077:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1078:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1079:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
1080:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1081:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1083:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1084:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1085:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1087:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1091:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1092:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       at(size_type __n)
1093:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1094:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_check(__n);
1095:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (*this)[__n];
1096:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1097:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1098:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1099:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1102:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1104:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1105:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1109:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1110:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       at(size_type __n) const
1111:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1112:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_check(__n);
1113:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (*this)[__n];
1114:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1115:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1116:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1117:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1119:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
ARM GAS  /tmp/ccfXJrhX.s 			page 79


1120:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1121:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1123:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *begin();
1125:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1126:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1127:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1130:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1131:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1132:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1134:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *begin();
1136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1137:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1138:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1139:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
1140:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1141:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1142:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1143:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1145:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(end() - 1);
1147:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1148:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1149:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1150:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  last element of the %vector.
1152:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1153:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1154:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1156:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(end() - 1);
1158:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1159:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1160:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1161:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // data access
1163:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1164:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1167:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Tp*
1168:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1171:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const _Tp*
1172:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1175:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1176:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/ccfXJrhX.s 			page 80


1177:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1179:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1180:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  available.
1185:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1186:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1187:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       push_back(const value_type& __x)
1188:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1189:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1190:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
1191:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1193:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				     __x);
1194:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
1195:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1197:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else
1198:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1199:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1200:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1201:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1202:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1203:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       push_back(value_type&& __x)
1204:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1206:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1207:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus > 201402L
1208:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	reference
1209:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1210:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1211:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1212:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1214:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1215:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1216:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Removes last element.
1217:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1218:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1220:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  called.
1223:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1224:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1225:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1227:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1229:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1232:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1233:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccfXJrhX.s 			page 81


1234:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1235:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __args  Arguments.
1238:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1240:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1241:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  std::list.
1245:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1246:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1247:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1248:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1251:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1252:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1254:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1256:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1257:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1258:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1261:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1262:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1263:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1264:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1265:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1266:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1271:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1272:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1275:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1277:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1279:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1280:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1281:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1282:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1287:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
ARM GAS  /tmp/ccfXJrhX.s 			page 82


1291:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1292:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1293:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1296:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1297:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1300:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1301:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1302:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  specified by @a position.
1304:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1305:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1308:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1309:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1310:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1311:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1312:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1313:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1315:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return begin() + __offset;
1316:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1317:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1318:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1319:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1320:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1321:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1327:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1328:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1329:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1330:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1332:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1334:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1339:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return begin() + __offset;
1340:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1341:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1342:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
ARM GAS  /tmp/ccfXJrhX.s 			page 83


1348:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1349:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1351:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1354:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1355:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1356:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1360:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1365:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1366:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1368:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1369:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1370:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a pos.
1371:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1372:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1375:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1376:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
1377:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1378:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1379:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       _InputIterator __last)
1381:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1382:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			     __first, __last, __false_type());
1385:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  return begin() + __offset;
1386:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1387:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1388:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1389:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1392:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1393:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1394:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1395:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1396:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a pos.
1397:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1398:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1401:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1402:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1403:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1404:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
ARM GAS  /tmp/ccfXJrhX.s 			page 84


1405:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       _InputIterator __last)
1406:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1407:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1411:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1412:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1413:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1414:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1415:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1418:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  shorten the %vector by one.
1420:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1421:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1425:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1427:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1428:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1429:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1430:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(const_iterator __position)
1431:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1433:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(iterator __position)
1434:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(__position); }
1435:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1436:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1437:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1438:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1439:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *                  erased.
1442:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *           prior to erasing (or end()).
1444:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1445:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will erase the elements in the range
1446:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1448:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1453:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1455:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1456:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1457:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1459:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const auto __beg = begin();
1460:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1461:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
ARM GAS  /tmp/ccfXJrhX.s 			page 85


1462:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1463:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1464:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1465:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1466:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1467:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1468:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1469:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1472:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1477:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1479:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1480:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1482:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1483:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1484:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1486:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1490:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1491:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1492:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the user's responsibility.
1496:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1497:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1498:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1501:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
1502:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1503:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1506:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1507:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer
1508:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1511:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __try
1513:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
1514:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1516:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      return __result;
1517:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
1518:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __catch(...)
ARM GAS  /tmp/ccfXJrhX.s 			page 86


1519:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
1520:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      __throw_exception_again;
1522:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
1523:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1524:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1525:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1526:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal constructor functions follow.
1527:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1528:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1530:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1531:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1534:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1535:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1537:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1539:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1541:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1543:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1544:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1546:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1547:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			       __false_type)
1549:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1550:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
1552:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1553:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1554:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1555:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1556:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1557:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1558:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    std::input_iterator_tag)
1560:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1561:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __try {
1562:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1564:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      emplace_back(*__first);
1565:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1566:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      push_back(*__first);
1567:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1568:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  } __catch(...) {
1569:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    clear();
1570:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    __throw_exception_again;
1571:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1572:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1573:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1574:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1575:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
ARM GAS  /tmp/ccfXJrhX.s 			page 87


1576:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1577:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    std::forward_iterator_tag)
1579:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1580:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_start
1582:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1585:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					this->_M_impl._M_start,
1587:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1588:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1589:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1590:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1592:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1593:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1595:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1596:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1598:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1599:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1600:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1601:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1602:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1604:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1608:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1609:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1610:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1611:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // assignment work for the range versions.
1613:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1614:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1616:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1617:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1619:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1620:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1623:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1624:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1625:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1626:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   __false_type)
1628:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1630:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1631:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1632:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
ARM GAS  /tmp/ccfXJrhX.s 			page 88


1633:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      std::input_iterator_tag);
1635:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1636:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1637:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1638:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1639:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1641:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1642:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // to be the same thing.
1644:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1645:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1647:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal insert functions follow.
1648:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1649:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1651:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1653:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1654:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1655:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   __true_type)
1657:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1659:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1661:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1662:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1663:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1665:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1667:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1668:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1669:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1670:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1671:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1672:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1674:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1675:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1676:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1677:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1681:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // the same thing.
1683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1684:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1686:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1687:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by resize(n).
1688:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1689:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_default_append(size_type __n);
ARM GAS  /tmp/ccfXJrhX.s 			page 89


1690:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1691:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       bool
1692:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_shrink_to_fit();
1693:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1694:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1695:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1696:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,x)
1697:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1698:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1700:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1701:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1703:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Temporary_value
1706:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1707:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename... _Args>
1708:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  explicit
1709:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1710:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
1711:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1712:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1714:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1715:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	~_Temporary_value()
1716:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1718:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	value_type&
1719:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1720:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1721:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       private:
1722:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Tp*
1723:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1725:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector* _M_this;
1726:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
1728:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1729:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1731:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Arg>
1732:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1733:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1735:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1736:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1737:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1738:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1739:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1741:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1743:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1745:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1746:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
ARM GAS  /tmp/ccfXJrhX.s 			page 90


1747:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1748:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1750:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1753:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1754:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
1756:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
1757:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1758:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (max_size() - size() < __n)
1759:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
1760:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1761:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
1762:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
1763:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1764:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1765:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by constructors to check initial size.
1766:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static size_type
1767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
 175              		.loc 1 1767 7 view .LVU28
 176              	.LBB333:
 177              	.LBB334:
 178              	.LBI334:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 179              		.loc 4 167 7 view .LVU29
 180              	.LBB335:
 181              	.LBI335:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 182              		.loc 3 82 7 view .LVU30
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 183              		.loc 3 82 7 is_stmt 0 view .LVU31
 184              	.LBE335:
 185              	.LBE334:
 186              	.LBB336:
 187              	.LBI336:
 188              		.loc 4 182 7 is_stmt 1 view .LVU32
 189              	.LBB337:
 190              	.LBI337:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 191              		.loc 3 89 7 view .LVU33
 192              	.LBE337:
 193              	.LBE336:
1768:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 194              		.loc 1 1769 2 is_stmt 0 view .LVU34
 195 0010 441C     		adds	r4, r0, #1
 196 0012 1ED4     		bmi	.L15
 197 0014 0646     		mov	r6, r0
 198              	.LVL9:
 199              		.loc 1 1769 2 view .LVU35
 200              	.LBE333:
 201              	.LBE332:
 202              	.LBB339:
 203              	.LBI339:
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
ARM GAS  /tmp/ccfXJrhX.s 			page 91


 204              		.loc 1 303 7 is_stmt 1 view .LVU36
 205              	.LBB340:
 206              	.LBB341:
 207              	.LBI341:
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 208              		.loc 1 136 2 view .LVU37
 209              	.LBB342:
 210              	.LBB343:
 211              	.LBI343:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 212              		.loc 4 167 7 view .LVU38
 213              	.LBB344:
 214              	.LBI344:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 215              		.loc 3 82 7 view .LVU39
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 216              		.loc 3 82 7 is_stmt 0 view .LVU40
 217              	.LBE344:
 218              	.LBE343:
 219              	.LBB345:
 220              	.LBI345:
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 221              		.loc 1 97 2 is_stmt 1 view .LVU41
 222              	.LBB346:
 223              	.LBB347:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 224              		.loc 1 98 47 is_stmt 0 view .LVU42
 225 0016 0023     		movs	r3, #0
 226 0018 0193     		str	r3, [sp, #4]
 227 001a 0293     		str	r3, [sp, #8]
 228 001c 0393     		str	r3, [sp, #12]
 229              	.LVL10:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 230              		.loc 1 98 47 view .LVU43
 231              	.LBE347:
 232              	.LBE346:
 233              	.LBE345:
 234              	.LBE342:
 235              	.LBE341:
 236              	.LBB348:
 237              	.LBI348:
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 238              		.loc 1 359 7 is_stmt 1 view .LVU44
 239              	.LBB349:
 240              	.LBB350:
 241              	.LBI350:
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 242              		.loc 1 343 7 view .LVU45
 243              	.LBB351:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 244              		.loc 1 346 18 is_stmt 0 view .LVU46
 245 001e ECB1     		cbz	r4, .L12
 246              	.LVL11:
 247              	.LBB352:
 248              	.LBI352:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 249              		.loc 2 459 7 is_stmt 1 view .LVU47
ARM GAS  /tmp/ccfXJrhX.s 			page 92


 250              	.LBB353:
 251              	.LBI353:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 252              		.loc 3 103 7 view .LVU48
 253              	.LBB354:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 254              		.loc 3 111 2 is_stmt 0 view .LVU49
 255 0020 9C42     		cmp	r4, r3
 256 0022 19DB     		blt	.L16
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 257              		.loc 3 121 41 view .LVU50
 258 0024 2046     		mov	r0, r4
 259              	.LVL12:
 260              	.LEHB0:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 261              		.loc 3 121 41 view .LVU51
 262 0026 FFF7FEFF 		bl	_Znwj
 263              	.LVL13:
 264              	.LEHE0:
 265 002a 0546     		mov	r5, r0
 266              	.LVL14:
 267              	.L6:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 268              		.loc 3 121 41 view .LVU52
 269              	.LBE354:
 270              	.LBE353:
 271              	.LBE352:
 272              	.LBE351:
 273              	.LBE350:
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 274              		.loc 1 361 25 view .LVU53
 275 002c 0195     		str	r5, [sp, #4]
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 276              		.loc 1 362 26 view .LVU54
 277 002e 0295     		str	r5, [sp, #8]
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 278              		.loc 1 363 59 view .LVU55
 279 0030 2A19     		adds	r2, r5, r4
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 280              		.loc 1 363 34 view .LVU56
 281 0032 0392     		str	r2, [sp, #12]
 282              	.LVL15:
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 283              		.loc 1 363 34 view .LVU57
 284              	.LBE349:
 285              	.LBE348:
 286              	.LBE340:
 287              	.LBE339:
 288              	.LBB363:
 289              	.LBI363:
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 290              		.loc 1 1603 7 is_stmt 1 view .LVU58
 291              	.LBB364:
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
 292              		.loc 1 1606 36 is_stmt 0 view .LVU59
 293 0034 2846     		mov	r0, r5
 294              	.LVL16:
ARM GAS  /tmp/ccfXJrhX.s 			page 93


 295              	.LBB365:
 296              	.LBI365:
 297              		.file 7 "/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  */
ARM GAS  /tmp/ccfXJrhX.s 			page 94


  55:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <bits/stl_pair.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
  62:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  63:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <type_traits>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
  66:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  67:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <ext/alloc_traits.h>
  68:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** {
  71:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  73:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /** @addtogroup memory
  74:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @{
  75:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    */
  76:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
  78:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  80:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  81:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
  82:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  83:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
  84:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  85:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  86:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
  87:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  88:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
  89:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
  90:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  91:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  92:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
  93:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
  94:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
  95:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
  96:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  97:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  98:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
  99:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 100:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 101:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 102:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 103:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
 104:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 105:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 106:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 107:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 108:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 109:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 110:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 111:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
ARM GAS  /tmp/ccfXJrhX.s 			page 95


 112:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 113:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 114:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 115:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 116:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 117:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 118:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 119:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 120:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 121:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 122:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 123:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 124:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 125:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 126:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 127:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 128:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 129:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType1;
 130:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 131:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType2;
 132:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 133:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 134:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 135:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 136:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 137:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 138:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 139:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 141:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 142:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 143:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 144:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 145:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 146:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 148:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 149:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 150:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 151:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 152:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 153:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 154:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 155:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 156:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 157:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 158:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 159:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 160:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 161:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 162:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 163:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 164:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 165:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 166:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 167:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 168:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
ARM GAS  /tmp/ccfXJrhX.s 			page 96


 169:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 170:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 171:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 172:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 173:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 174:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 175:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 176:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 177:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 178:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 179:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 180:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 181:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 182:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 183:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 184:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 185:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 186:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 187:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 188:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 189:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 190:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 191:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 192:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 193:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 194:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 195:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 196:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 197:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 198:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 199:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 200:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 201:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 202:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 203:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 204:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 205:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 206:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 207:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 208:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 209:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 210:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 211:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 212:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 213:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 214:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 215:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 216:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 217:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 218:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 219:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 220:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 221:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 222:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 223:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 224:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 225:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
ARM GAS  /tmp/ccfXJrhX.s 			page 97


 226:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 227:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 228:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 229:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 230:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 231:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 232:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 233:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 234:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 235:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 237:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
 238:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 240:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 241:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 242:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 243:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 244:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 245:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 246:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 247:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 248:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 249:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 250:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 251:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 252:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 253:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 254:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 255:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 256:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 257:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 258:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 259:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 261:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 262:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 263:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 264:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 265:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 266:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 267:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 268:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 269:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 270:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 271:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 272:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 273:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 274:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 275:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 276:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 277:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 278:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 279:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 280:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 281:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 282:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
ARM GAS  /tmp/ccfXJrhX.s 			page 98


 283:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 284:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 285:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 286:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 287:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 288:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 289:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 290:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 291:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 292:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 293:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 294:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 295:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 296:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 297:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 298:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 299:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 300:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 301:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 302:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 303:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 304:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 305:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 306:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 307:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 308:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 309:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 310:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 311:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 312:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 313:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 314:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 315:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 316:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 317:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 318:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 319:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 320:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 321:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 322:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 323:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 324:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 325:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 326:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 327:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 328:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 329:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 330:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 331:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 332:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 333:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 334:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 335:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 					 __result, __alloc);
 336:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 337:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 338:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 339:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
ARM GAS  /tmp/ccfXJrhX.s 			page 99


 340:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 341:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 342:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 343:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 344:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 345:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 346:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 347:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 348:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 349:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 350:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 351:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 352:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     void
 353:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 354:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 355:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 356:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 357:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 358:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 359:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 360:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 361:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 362:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 363:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 364:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 365:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 366:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 367:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 368:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 369:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 370:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 371:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 372:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 373:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 374:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 375:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 376:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 377:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 378:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 379:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 380:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 381:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 382:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 383:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 384:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 385:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 386:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 387:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 388:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 389:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 390:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 391:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 392:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 393:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 394:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 395:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 396:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
ARM GAS  /tmp/ccfXJrhX.s 			page 100


 397:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 398:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Tp2>
 399:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 400:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 401:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 402:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 403:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 404:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 405:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 406:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 407:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 408:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // for construction and destruction.
 409:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 410:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_copy_move
 411:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 412:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  move [first2, last2) into
 413:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 414:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 415:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 416:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 417:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 418:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 419:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 420:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 421:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 422:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 423:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 424:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 425:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __result,
 426:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __alloc);
 427:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 428:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 429:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 430:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 431:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 432:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 433:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 434:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 435:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 436:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 437:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 438:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_move_copy
 439:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 440:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  copies [first2, last2) into
 441:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 442:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 443:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 444:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 445:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 446:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 447:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 448:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 449:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 450:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 451:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 452:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 453:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __result,
ARM GAS  /tmp/ccfXJrhX.s 			page 101


 454:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __alloc);
 455:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 456:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 457:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 458:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 459:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 460:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 461:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 462:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 463:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 464:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 465:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   
 466:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move
 467:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 468:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 469:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 470:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 471:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 472:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 473:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 474:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 475:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 476:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 477:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 478:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 479:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 480:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 481:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 482:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 483:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 484:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 485:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 486:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 487:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 488:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_move_fill
 489:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 490:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 491:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 492:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 493:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 494:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 495:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __first2,
 496:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 497:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 498:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 499:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 500:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							    __first2,
 501:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							    __alloc);
 502:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 503:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 504:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 505:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 506:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 507:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 508:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 509:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 510:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
ARM GAS  /tmp/ccfXJrhX.s 			page 102


 511:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 512:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 513:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 514:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 515:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
 516:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 517:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 518:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 519:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 520:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 521:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 522:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1
 523:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 524:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 525:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 526:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 527:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 528:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 529:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 530:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 531:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 532:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 533:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 534:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 535:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 536:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 537:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 538:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 539:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 540:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 541:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 543:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 544:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 545:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 546:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 547:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 548:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 549:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 550:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    _ValueType;
 551:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 552:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::fill(__first, __last, _ValueType());
 553:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 554:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 555:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 556:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 557:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1
 558:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 559:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 560:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 561:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 562:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 563:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 564:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 565:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 566:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 567:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
ARM GAS  /tmp/ccfXJrhX.s 			page 103


 568:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
 569:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 570:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 571:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 572:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 573:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 574:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 575:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 576:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 577:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 578:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 579:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 580:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 581:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 582:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 584:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 585:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 586:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    _ValueType;
 587:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 588:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::fill_n(__first, __n, _ValueType());
 589:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 590:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 591:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 592:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default
 593:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 594:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed value_types(s).
 595:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator>
 596:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 597:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 598:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			    _ForwardIterator __last)
 599:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 600:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 601:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 602:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 603:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 604:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 606:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				     && __assignable>::
 607:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_default(__first, __last);
 608:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 609:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 610:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n
 611:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_type(s).
 612:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 613:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 615:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 616:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 617:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 618:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 619:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 620:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 621:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 622:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 623:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 624:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
ARM GAS  /tmp/ccfXJrhX.s 			page 104


 625:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 626:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 627:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a
 628:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 629:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed value_types(s), constructed with the allocator alloc.
 630:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 631:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     void
 632:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 633:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 634:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 635:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 636:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 637:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 638:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 639:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 640:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 641:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 642:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 643:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 644:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 645:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 646:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 647:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 648:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 649:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 650:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 651:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 652:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 653:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 654:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      allocator<_Tp>&)
 655:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 656:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 657:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 658:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n_a
 659:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_types(s),
 660:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed with the allocator alloc.
 661:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 662:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 663:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 664:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				_Allocator& __alloc)
 665:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 666:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 667:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 668:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 669:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 670:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 671:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 672:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 673:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 674:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 675:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 676:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 677:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 678:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 679:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 680:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 681:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
ARM GAS  /tmp/ccfXJrhX.s 			page 105


 682:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 683:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 298              		.loc 7 683 5 is_stmt 1 view .LVU60
 299              	.LBB366:
 300              	.LBI366:
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 301              		.loc 7 614 5 view .LVU61
 302              	.LBB367:
 303              	.LBB368:
 304              	.LBI368:
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 305              		.loc 7 583 9 view .LVU62
 306              	.LBB369:
 307              	.LBB370:
 308              	.LBI370:
 309              		.file 8 "/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
ARM GAS  /tmp/ccfXJrhX.s 			page 106


  42:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** {
  81:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  83:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
ARM GAS  /tmp/ccfXJrhX.s 			page 107


  99:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 127:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 139:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
ARM GAS  /tmp/ccfXJrhX.s 			page 108


 156:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 160:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 171:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 186:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 211:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
ARM GAS  /tmp/ccfXJrhX.s 			page 109


 213:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 216:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 261:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 262:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 263:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 264:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 265:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 266:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
ARM GAS  /tmp/ccfXJrhX.s 			page 110


 270:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 272:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 275:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 278:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 280:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 282:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 283:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 284:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 285:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 286:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 287:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 288:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 293:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 294:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 297:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 300:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 302:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 304:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 305:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 306:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 307:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 308:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 311:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 313:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 314:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __it; }
 316:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 317:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _From, typename _To>
 321:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _From
 323:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 326:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
ARM GAS  /tmp/ccfXJrhX.s 			page 111


 327:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 328:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 330:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __res; }
 332:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 333:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 338:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 339:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move
 341:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 342:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 343:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 345:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 347:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = *__first;
 349:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 350:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 351:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 352:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 353:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 354:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 355:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 357:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 358:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 360:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 362:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 364:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 365:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 366:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 367:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 368:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 369:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 370:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 372:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 373:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 375:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 377:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    {
 380:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = *__first;
 381:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 382:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 383:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    }
ARM GAS  /tmp/ccfXJrhX.s 			page 112


 384:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 385:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 386:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 387:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 389:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 390:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 392:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 393:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 395:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 397:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    {
 400:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 401:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 402:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 403:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    }
 404:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 405:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 406:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 407:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 408:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 409:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 410:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 412:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 413:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 415:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 417:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 418:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 424:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 428:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 429:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 430:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 431:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT>
 434:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct char_traits;
 435:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     class istreambuf_iterator;
 438:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     class ostreambuf_iterator;
ARM GAS  /tmp/ccfXJrhX.s 			page 113


 441:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 442:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 448:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 454:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				    _CharT*>::__type
 457:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 460:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 463:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 465:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 468:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 471:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 474:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 475:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 477:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct _Deque_iterator;
 479:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 480:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 482:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 483:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 485:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _OI);
 488:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 489:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 490:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 496:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
ARM GAS  /tmp/ccfXJrhX.s 			page 114


 498:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 502:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 505:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 508:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 511:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 513:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 514:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 516:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 517:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 518:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 519:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 520:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 522:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  _OI);
 525:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 526:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 527:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II, _II,
 530:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 532:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 533:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 540:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 541:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 544:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 545:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 546:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 547:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 548:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 554:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
ARM GAS  /tmp/ccfXJrhX.s 			page 115


 555:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 556:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 557:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 558:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 560:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 562:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 563:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 568:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 571:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 572:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 573:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 574:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 577:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 578:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 579:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 580:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 581:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 587:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 589:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 590:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 591:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 593:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 595:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 596:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 601:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 604:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 607:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 609:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 610:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward
ARM GAS  /tmp/ccfXJrhX.s 			page 116


 612:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 613:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 616:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 618:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 619:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 620:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 621:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 622:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 623:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 624:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 625:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 626:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 628:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 631:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 633:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 634:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 636:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 637:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 638:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 639:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 640:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 641:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 643:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 646:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 648:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 650:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 652:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 653:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 654:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 655:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 656:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 657:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 658:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 660:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 663:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 665:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 667:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
ARM GAS  /tmp/ccfXJrhX.s 			page 117


 669:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 670:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 671:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 672:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 673:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 674:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 675:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 677:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 678:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 680:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 682:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 683:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 689:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 691:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result - _Num;
 693:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 694:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 695:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 696:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 699:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 701:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 704:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 707:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 								 __last,
 711:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 								 __result);
 712:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 713:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 714:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 717:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 720:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 721:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 723:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _OI);
ARM GAS  /tmp/ccfXJrhX.s 			page 118


 726:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 727:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 728:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(
 731:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 735:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 742:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 745:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 747:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 748:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 751:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 752:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 753:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 754:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 756:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 757:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		_OI);
 760:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 761:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 762:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 767:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 768:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 772:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 776:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 777:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
ARM GAS  /tmp/ccfXJrhX.s 			page 119


 783:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 784:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 790:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 791:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 794:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 797:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 799:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 800:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 807:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 810:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 811:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 812:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 813:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 819:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 820:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 826:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 827:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 830:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 833:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 835:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 836:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
ARM GAS  /tmp/ccfXJrhX.s 			page 120


 840:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 843:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					       std::__miter_base(__last),
 845:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					       __result);
 846:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 847:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 848:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 850:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 852:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 853:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 856:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 859:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 860:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 861:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
 862:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 863:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 864:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 867:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 870:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 871:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 872:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 873:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 874:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 875:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 876:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 878:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 880:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 883:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 884:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 886:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 887:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__first = __tmp;
 889:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return;
 890:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 891:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 895:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 896:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
ARM GAS  /tmp/ccfXJrhX.s 			page 121


 897:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 899:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 902:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 904:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     void
 906:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _VTp&);
 909:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 910:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 916:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     void
 918:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     const _Tp&);
 921:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 922:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 923:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 929:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 930:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 934:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 937:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 939:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 940:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator>)
 942:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 944:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __last, __value);
 945:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 946:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 947:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
ARM GAS  /tmp/ccfXJrhX.s 			page 122


 954:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
 958:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 961:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 967:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 973:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
 974:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 979:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
 980:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 985:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 986:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(float __n) { return (long long)__n; }
 988:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(double __n) { return (long long)__n; }
 990:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long double __n) { return (long long)__n; }
 992:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__float128 __n) { return (long long)__n; }
 995:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 996:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 997:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
1000:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1002:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1003:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
1005:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1006:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1007:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1008:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
ARM GAS  /tmp/ccfXJrhX.s 			page 123


1011:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1014:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
1015:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
1017:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1018:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1019:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1020:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp>
1022:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1024:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag);
1026:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1027:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1030:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1031:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::output_iterator_tag)
1032:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1033:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1034:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1036:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1037:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1038:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1039:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1042:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag)
1044:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1045:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1046:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1048:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1050:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1051:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1057:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1058:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1059:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__n <= 0)
1061:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
1062:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1063:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
1067:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
ARM GAS  /tmp/ccfXJrhX.s 			page 124


1068:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1069:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
1070:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
1072:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An output iterator.
1073:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The iterator at first+n.
1076:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
1077:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
1081:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
1083:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1088:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
1089:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 310              		.loc 8 1089 5 view .LVU63
 311              		.loc 8 1089 5 is_stmt 0 view .LVU64
 312              	.LBE370:
 313              	.LBE369:
 314              	.LBE368:
 315              	.LBE367:
 316              	.LBE366:
 317              	.LBE365:
 318              	.LBE364:
 319              	.LBE363:
 320              	.LBE331:
 321              	.LBE330:
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 322              		.loc 8 951 37 is_stmt 1 view .LVU65
 323              	.LBB405:
 324              	.LBB403:
 325              	.LBB399:
 326              	.LBB397:
 327              	.LBB395:
 328              	.LBB393:
 329              	.LBB391:
 330              	.LBB389:
 331              	.LBB387:
 332              	.LBB385:
 333              	.LBB371:
 334              	.LBB372:
 335              	.LBI372:
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 336              		.loc 8 1054 5 view .LVU66
 337              	.LBB373:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 338              		.loc 8 1060 7 is_stmt 0 view .LVU67
 339 0036 9CB9     		cbnz	r4, .L17
 340              	.LVL17:
 341              	.L8:
ARM GAS  /tmp/ccfXJrhX.s 			page 125


1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 342              		.loc 8 1060 7 view .LVU68
 343              	.LBE373:
 344              	.LBE372:
 345              	.LBE371:
 346              	.LBE385:
 347              	.LBE387:
 348              	.LBE389:
 349              	.LBE391:
 350              	.LBE393:
 351              	.LBE395:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 352              		.loc 1 1605 26 view .LVU69
 353 0038 0290     		str	r0, [sp, #8]
 354              	.LVL18:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 355              		.loc 1 1605 26 view .LVU70
 356              	.LBE397:
 357              	.LBE399:
 358              	.LBE403:
 359              	.LBE405:
 360              	.LBB406:
 361              	.LBI406:
 362              		.loc 4 182 7 is_stmt 1 view .LVU71
 363              	.LBB407:
 364              	.LBI407:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 365              		.loc 3 89 7 view .LVU72
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 366              		.loc 3 89 7 is_stmt 0 view .LVU73
 367              	.LBE407:
 368              	.LBE406:
 369              	.LBB408:
 370              	.LBI408:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 371              		.loc 1 1043 7 is_stmt 1 view .LVU74
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 372              		.loc 1 1043 7 is_stmt 0 view .LVU75
 373              	.LBE408:
 374              	.LBB409:
 375              	.LBI409:
 376              		.loc 6 2312 7 is_stmt 1 view .LVU76
 377              	.LBB410:
 378              	.LBI410:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 379              		.loc 6 194 7 view .LVU77
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 380              		.loc 6 194 7 is_stmt 0 view .LVU78
 381              	.LBE410:
 382              	.LBE409:
  19:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
  20:Peripheral/Inc/serial_printf.hpp ****     std::vector<char> buf(len + 1);
  21:Peripheral/Inc/serial_printf.hpp ****     std::snprintf(&buf[0], len + 1, fmt.c_str(), args...);
 383              		.loc 5 21 18 view .LVU79
 384 003a 3A68     		ldr	r2, [r7]
 385 003c 2146     		mov	r1, r4
 386 003e 0198     		ldr	r0, [sp, #4]
ARM GAS  /tmp/ccfXJrhX.s 			page 126


 387 0040 FFF7FEFF 		bl	snprintf
 388              	.LVL19:
 389              	.LBB411:
 390              	.LBI411:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 391              		.loc 1 1043 7 is_stmt 1 view .LVU80
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 392              		.loc 1 1043 7 is_stmt 0 view .LVU81
 393              	.LBE411:
  22:Peripheral/Inc/serial_printf.hpp ****     // ヌル終端された文字列をUARTに送信
  23:Peripheral/Inc/serial_printf.hpp ****     HAL_UART_Transmit(&huart1, (uint8_t *)&buf[0], len, 0xFF);
 394              		.loc 5 23 22 view .LVU82
 395 0044 FF23     		movs	r3, #255
 396 0046 B2B2     		uxth	r2, r6
 397 0048 0199     		ldr	r1, [sp, #4]
 398 004a 1048     		ldr	r0, .L20
 399              	.LEHB1:
 400 004c FFF7FEFF 		bl	HAL_UART_Transmit
 401              	.LVL20:
 402              	.LEHE1:
 403 0050 0FE0     		b	.L18
 404              	.LVL21:
 405              	.L15:
 406              	.LBB412:
 407              	.LBB404:
 408              	.LBB400:
 409              	.LBB338:
1770:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 410              		.loc 1 1770 24 view .LVU83
 411 0052 0F48     		ldr	r0, .L20+4
 412              	.LVL22:
 413              	.LEHB2:
 414              		.loc 1 1770 24 view .LVU84
 415 0054 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 416              	.LVL23:
 417              	.L16:
 418              		.loc 1 1770 24 view .LVU85
 419              	.LBE338:
 420              	.LBE400:
 421              	.LBB401:
 422              	.LBB362:
 423              	.LBB361:
 424              	.LBB360:
 425              	.LBB359:
 426              	.LBB358:
 427              	.LBB357:
 428              	.LBB356:
 429              	.LBB355:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 430              		.loc 3 112 26 view .LVU86
 431 0058 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 432              	.LVL24:
 433              	.L12:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 434              		.loc 3 112 26 view .LVU87
 435              	.LBE355:
 436              	.LBE356:
ARM GAS  /tmp/ccfXJrhX.s 			page 127


 437              	.LBE357:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 438              		.loc 1 346 18 view .LVU88
 439 005c 0025     		movs	r5, #0
 440 005e E5E7     		b	.L6
 441              	.LVL25:
 442              	.L17:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 443              		.loc 1 346 18 view .LVU89
 444              	.LBE358:
 445              	.LBE359:
 446              	.LBE360:
 447              	.LBE361:
 448              	.LBE362:
 449              	.LBE401:
 450              	.LBB402:
 451              	.LBB398:
 452              	.LBB396:
 453              	.LBB394:
 454              	.LBB392:
 455              	.LBB390:
 456              	.LBB388:
 457              	.LBB386:
 458              	.LBB384:
 459              	.LBB383:
 460              	.LBB382:
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
 461              		.loc 8 1065 20 view .LVU90
 462 0060 1546     		mov	r5, r2
 463              	.LVL26:
 464              	.LBB374:
 465              	.LBI374:
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 466              		.loc 8 913 5 is_stmt 1 view .LVU91
 467              	.LBB375:
 468              	.LBI375:
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 469              		.loc 8 881 5 view .LVU92
 470              	.LBB376:
 471              	.LBB377:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 472              		.loc 8 892 7 is_stmt 0 view .LVU93
 473 0062 2246     		mov	r2, r4
 474 0064 0CB9     		cbnz	r4, .L19
 475              	.LVL27:
 476              	.L9:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 477              		.loc 8 892 7 view .LVU94
 478              	.LBE377:
 479              	.LBE376:
 480              	.LBE375:
 481              	.LBE374:
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 482              		.loc 8 1066 24 view .LVU95
 483 0066 2846     		mov	r0, r5
 484              	.LBB381:
 485              	.LBB380:
ARM GAS  /tmp/ccfXJrhX.s 			page 128


 486              	.LBB379:
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 487              		.loc 8 894 5 view .LVU96
 488 0068 E6E7     		b	.L8
 489              	.LVL28:
 490              	.L19:
 491              	.LBB378:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 492              		.loc 8 893 18 view .LVU97
 493 006a 0021     		movs	r1, #0
 494 006c FFF7FEFF 		bl	memset
 495              	.LVL29:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 496              		.loc 8 893 18 view .LVU98
 497 0070 F9E7     		b	.L9
 498              	.LVL30:
 499              	.L18:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 500              		.loc 8 893 18 view .LVU99
 501              	.LBE378:
 502              	.LBE379:
 503              	.LBE380:
 504              	.LBE381:
 505              	.LBE382:
 506              	.LBE383:
 507              	.LBE384:
 508              	.LBE386:
 509              	.LBE388:
 510              	.LBE390:
 511              	.LBE392:
 512              	.LBE394:
 513              	.LBE396:
 514              	.LBE398:
 515              	.LBE402:
 516              	.LBE404:
 517              	.LBE412:
 518              	.LBB413:
 519              	.LBI413:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 520              		.loc 1 678 7 is_stmt 1 view .LVU100
 521              	.LBB414:
 522              	.LBB415:
 523              	.LBI415:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 524              		.loc 1 276 7 view .LVU101
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 525              		.loc 1 276 7 is_stmt 0 view .LVU102
 526              	.LBE415:
 527              	.LBB416:
 528              	.LBI416:
 492:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 493:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 494:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 495:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 496:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 497:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 498:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *	       an object of type `_Up`.
ARM GAS  /tmp/ccfXJrhX.s 			page 129


 499:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 500:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 501:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 502:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 503:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 504:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 505:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 506:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 507:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 508:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  _Args&&... __args)
 509:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 510:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 511:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 512:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 513:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 514:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 515:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 516:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 517:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 518:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 519:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 520:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 521:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 522:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 523:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 524:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 525:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 526:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 527:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 528:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 529:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 530:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 531:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  __a.destroy(__p);
 532:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 533:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::destroy_at(__p);
 534:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 535:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 536:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 537:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 538:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 539:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 540:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 541:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 542:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 543:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 544:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       {
 545:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 546:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.max_size();
 547:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 548:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 549:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 550:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       }
 551:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 552:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 553:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 554:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 555:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __rhs
ARM GAS  /tmp/ccfXJrhX.s 			page 130


 556:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 557:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 558:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 559:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __rhs; }
 560:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     };
 561:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 562:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 563:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 564:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 565:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 566:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { __one = __two; }
 567:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 568:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 569:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 570:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 571:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 572:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 573:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 574:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 575:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 576:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 577:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 578:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 579:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 580:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 581:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocca::value)
 582:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__one = __two;
 583:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 584:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 585:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 586:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 587:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 588:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 589:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     constexpr _Alloc
 590:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 591:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 592:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 593:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 594:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 595:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 596:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 597:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 598:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 599:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { __one = std::move(__two); }
 600:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 601:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 602:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 603:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 604:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 605:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 606:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 607:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 608:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 609:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 610:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 611:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 612:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
ARM GAS  /tmp/ccfXJrhX.s 			page 131


 613:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocma::value)
 614:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__one = std::move(__two);
 615:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 616:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 617:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 618:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 619:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 620:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 621:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 622:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 623:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 624:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using std::swap;
 625:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       swap(__one, __two);
 626:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 627:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 628:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 629:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 630:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 631:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 632:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 633:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 634:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 635:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 636:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 637:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 638:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 639:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 640:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocs::value)
 641:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 642:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using std::swap;
 643:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  swap(__one, __two);
 644:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 645:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 646:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 647:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 648:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 649:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 650:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 651:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 652:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	   typename = void>
 653:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl
 654:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : false_type
 655:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 656:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 657:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 658:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 659:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 660:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 661:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		   std::declval<_Tp>()))>>
 662:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : true_type
 663:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 664:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 665:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 666:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 667:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 668:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 669:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_copy_insertable
ARM GAS  /tmp/ccfXJrhX.s 			page 132


 670:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 671:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 672:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 673:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 674:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 675:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 676:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 677:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : is_copy_constructible<_Tp>
 678:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 679:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 680:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 681:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 682:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 683:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 684:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_move_insertable
 685:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 686:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 687:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 688:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 689:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 690:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 691:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : is_move_constructible<_Tp>
 692:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 693:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 694:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // Trait to detect Allocator-like types.
 695:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename = void>
 696:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_allocator : false_type { };
 697:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 698:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 699:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_allocator<_Alloc,
 700:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 701:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 702:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : true_type { };
 703:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 704:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 705:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using _RequireAllocator
 706:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 707:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 708:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 709:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using _RequireNotAllocator
 710:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 711:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif // C++11
 712:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 713:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /**
 714:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 715:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 716:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 717:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    */
 718:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 719:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 720:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     void
 721:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 722:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	     _Allocator& __alloc)
 723:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 724:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       for (; __first != __last; ++__first)
 725:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201103L
 726:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
ARM GAS  /tmp/ccfXJrhX.s 			page 133


 727:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 728:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 729:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 					      std::__addressof(*__first));
 730:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 731:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 732:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 733:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 734:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 735:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 529              		.loc 2 735 5 is_stmt 1 view .LVU103
 530              		.loc 2 735 5 is_stmt 0 view .LVU104
 531              	.LBE416:
 532              	.LBB417:
 533              	.LBI417:
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 534              		.loc 1 333 7 is_stmt 1 view .LVU105
 535              	.LBB418:
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 536              		.loc 1 335 15 is_stmt 0 view .LVU106
 537 0072 0198     		ldr	r0, [sp, #4]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 538              		.loc 1 336 17 view .LVU107
 539 0074 0399     		ldr	r1, [sp, #12]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 540              		.loc 1 336 35 view .LVU108
 541 0076 091A     		subs	r1, r1, r0
 542              	.LVL31:
 543              	.LBB419:
 544              	.LBI419:
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 545              		.loc 1 350 7 is_stmt 1 view .LVU109
 546              	.LBB420:
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 547              		.loc 1 353 2 is_stmt 0 view .LVU110
 548 0078 08B1     		cbz	r0, .L4
 549              	.LVL32:
 550              	.LBB421:
 551              	.LBI421:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 552              		.loc 2 491 7 is_stmt 1 view .LVU111
 553              	.LBB422:
 554              	.LBB423:
 555              	.LBI423:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 556              		.loc 3 126 7 view .LVU112
 557              	.LBB424:
 558              		.loc 3 139 19 is_stmt 0 view .LVU113
 559 007a FFF7FEFF 		bl	_ZdlPvj
 560              	.LVL33:
 561              		.loc 3 139 19 view .LVU114
 562              	.LBE424:
 563              	.LBE423:
 564              	.LBE422:
 565              	.LBE421:
 566              	.LBE420:
 567              	.LBE419:
 568              	.LBB425:
ARM GAS  /tmp/ccfXJrhX.s 			page 134


 569              	.LBI425:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 570              		.loc 1 128 14 is_stmt 1 view .LVU115
 571              	.LBB426:
 572              	.LBB427:
 573              	.LBI427:
 574              		.loc 4 182 7 view .LVU116
 575              	.LBB428:
 576              	.LBI428:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 577              		.loc 3 89 7 view .LVU117
 578              	.L4:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 579              		.loc 3 89 7 is_stmt 0 view .LVU118
 580              	.LBE428:
 581              	.LBE427:
 582              	.LBE426:
 583              	.LBE425:
 584              	.LBE418:
 585              	.LBE417:
 586              	.LBE414:
 587              	.LBE413:
  24:Peripheral/Inc/serial_printf.hpp **** }
 588              		.loc 5 24 1 view .LVU119
 589 007e 05B0     		add	sp, sp, #20
 590              	.LCFI3:
 591              		.cfi_remember_state
 592              		.cfi_def_cfa_offset 20
 593              		@ sp needed
 594 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 595              	.LVL34:
 596              	.L13:
 597              	.LCFI4:
 598              		.cfi_restore_state
 599              	.LBB429:
 600              	.LBI429:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 601              		.loc 1 678 7 is_stmt 1 view .LVU120
 602              	.LBB430:
 603              	.LBB431:
 604              	.LBI431:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 605              		.loc 1 276 7 view .LVU121
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 606              		.loc 1 276 7 is_stmt 0 view .LVU122
 607              	.LBE431:
 608              	.LBB432:
 609              	.LBI432:
 610              		.loc 2 735 5 is_stmt 1 view .LVU123
 611              		.loc 2 735 5 is_stmt 0 view .LVU124
 612              	.LBE432:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 613              		.loc 1 683 7 view .LVU125
 614 0082 01A8     		add	r0, sp, #4
 615              	.LVL35:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 616              		.loc 1 683 7 view .LVU126
ARM GAS  /tmp/ccfXJrhX.s 			page 135


 617 0084 FFF7FEFF 		bl	_ZNSt12_Vector_baseIcSaIcEED2Ev
 618              	.LVL36:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 619              		.loc 1 683 7 view .LVU127
 620 0088 FFF7FEFF 		bl	__cxa_end_cleanup
 621              	.LVL37:
 622              	.LEHE2:
 623              	.L21:
 624              		.align	2
 625              	.L20:
 626 008c 00000000 		.word	huart1
 627 0090 00000000 		.word	.LC0
 628              	.LBE430:
 629              	.LBE429:
 630              		.cfi_endproc
 631              	.LFE1733:
 632              		.global	__gxx_personality_v0
 633              		.personality	__gxx_personality_v0
 634              		.handlerdata
 635              	.LLSDA1733:
 636 0008 FF       		.byte	0xff
 637 0009 FF       		.byte	0xff
 638 000a 01       		.byte	0x1
 639 000b 0D       		.uleb128 .LLSDACSE1733-.LLSDACSB1733
 640              	.LLSDACSB1733:
 641 000c 26       		.uleb128 .LEHB0-.LFB1733
 642 000d 04       		.uleb128 .LEHE0-.LEHB0
 643 000e 00       		.uleb128 0
 644 000f 00       		.uleb128 0
 645 0010 4C       		.uleb128 .LEHB1-.LFB1733
 646 0011 04       		.uleb128 .LEHE1-.LEHB1
 647 0012 8201     		.uleb128 .L13-.LFB1733
 648 0014 00       		.uleb128 0
 649 0015 54       		.uleb128 .LEHB2-.LFB1733
 650 0016 38       		.uleb128 .LEHE2-.LEHB2
 651 0017 00       		.uleb128 0
 652 0018 00       		.uleb128 0
 653              	.LLSDACSE1733:
 654              		.section	.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,"a
 655              		.fnend
 657              		.section	.text._Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED
 658              		.align	1
 659              		.weak	_Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 660              		.syntax unified
 661              		.thumb
 662              		.thumb_func
 663              		.fpu fpv4-sp-d16
 665              	_Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:
 666              		.fnstart
 667              	.LVL38:
 668              	.LFB1734:
  15:Peripheral/Inc/serial_printf.hpp **** {
 669              		.loc 5 15 6 is_stmt 1 view -0
 670              		.cfi_startproc
 671              		@ args = 12, pretend = 0, frame = 24
 672              		@ frame_needed = 0, uses_anonymous_args = 0
  15:Peripheral/Inc/serial_printf.hpp **** {
ARM GAS  /tmp/ccfXJrhX.s 			page 136


 673              		.loc 5 15 6 is_stmt 0 view .LVU129
 674 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 675              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 676              	.LCFI5:
 677              		.cfi_def_cfa_offset 36
 678              		.cfi_offset 4, -36
 679              		.cfi_offset 5, -32
 680              		.cfi_offset 6, -28
 681              		.cfi_offset 7, -24
 682              		.cfi_offset 8, -20
 683              		.cfi_offset 9, -16
 684              		.cfi_offset 10, -12
 685              		.cfi_offset 11, -8
 686              		.cfi_offset 14, -4
 687              		.pad #52
 688 0004 8DB0     		sub	sp, sp, #52
 689              	.LCFI6:
 690              		.cfi_def_cfa_offset 88
 691 0006 0646     		mov	r6, r0
 692 0008 0791     		str	r1, [sp, #28]
 693 000a 1746     		mov	r7, r2
 694 000c 9846     		mov	r8, r3
 695 000e 9DF85890 		ldrb	r9, [sp, #88]	@ zero_extendqisi2
 696 0012 9DF85CA0 		ldrb	r10, [sp, #92]	@ zero_extendqisi2
 697 0016 9DF860B0 		ldrb	fp, [sp, #96]	@ zero_extendqisi2
 698              	.LVL39:
 699              	.LBB515:
 700              	.LBI515:
 701              		.loc 6 2312 7 is_stmt 1 view .LVU130
 702              	.LBB516:
 703              	.LBI516:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 704              		.loc 6 194 7 view .LVU131
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 705              		.loc 6 194 7 is_stmt 0 view .LVU132
 706              	.LBE516:
 707              	.LBE515:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 708              		.loc 5 18 31 view .LVU133
 709 001a CDF810B0 		str	fp, [sp, #16]
 710 001e CDF80CA0 		str	r10, [sp, #12]
 711 0022 CDF80890 		str	r9, [sp, #8]
 712 0026 0193     		str	r3, [sp, #4]
 713 0028 0092     		str	r2, [sp]
 714 002a 0B46     		mov	r3, r1
 715              	.LVL40:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 716              		.loc 5 18 31 view .LVU134
 717 002c 0268     		ldr	r2, [r0]
 718              	.LVL41:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 719              		.loc 5 18 31 view .LVU135
 720 002e 0021     		movs	r1, #0
 721              	.LVL42:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 722              		.loc 5 18 31 view .LVU136
 723 0030 0846     		mov	r0, r1
ARM GAS  /tmp/ccfXJrhX.s 			page 137


 724              	.LVL43:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 725              		.loc 5 18 31 view .LVU137
 726 0032 FFF7FEFF 		bl	snprintf
 727              	.LVL44:
 728 0036 0690     		str	r0, [sp, #24]
 729              	.LVL45:
 730              	.LBB517:
 731              	.LBI517:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 732              		.loc 4 164 7 is_stmt 1 view .LVU138
 733              	.LBB518:
 734              	.LBI518:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 735              		.loc 3 79 7 view .LVU139
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 736              		.loc 3 79 7 is_stmt 0 view .LVU140
 737              	.LBE518:
 738              	.LBE517:
 739              	.LBB519:
 740              	.LBI519:
 510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 741              		.loc 1 510 7 is_stmt 1 view .LVU141
 742              	.LBB520:
 743              	.LBB521:
 744              	.LBI521:
1767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 745              		.loc 1 1767 7 view .LVU142
 746              	.LBB522:
 747              	.LBB523:
 748              	.LBI523:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 749              		.loc 4 167 7 view .LVU143
 750              	.LBB524:
 751              	.LBI524:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 752              		.loc 3 82 7 view .LVU144
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 753              		.loc 3 82 7 is_stmt 0 view .LVU145
 754              	.LBE524:
 755              	.LBE523:
 756              	.LBB525:
 757              	.LBI525:
 758              		.loc 4 182 7 is_stmt 1 view .LVU146
 759              	.LBB526:
 760              	.LBI526:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 761              		.loc 3 89 7 view .LVU147
 762              	.LBE526:
 763              	.LBE525:
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 764              		.loc 1 1769 2 is_stmt 0 view .LVU148
 765 0038 441C     		adds	r4, r0, #1
 766 003a 28D4     		bmi	.L33
 767              	.LVL46:
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 768              		.loc 1 1769 2 view .LVU149
ARM GAS  /tmp/ccfXJrhX.s 			page 138


 769              	.LBE522:
 770              	.LBE521:
 771              	.LBB528:
 772              	.LBI528:
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 773              		.loc 1 303 7 is_stmt 1 view .LVU150
 774              	.LBB529:
 775              	.LBB530:
 776              	.LBI530:
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 777              		.loc 1 136 2 view .LVU151
 778              	.LBB531:
 779              	.LBB532:
 780              	.LBI532:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 781              		.loc 4 167 7 view .LVU152
 782              	.LBB533:
 783              	.LBI533:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 784              		.loc 3 82 7 view .LVU153
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 785              		.loc 3 82 7 is_stmt 0 view .LVU154
 786              	.LBE533:
 787              	.LBE532:
 788              	.LBB534:
 789              	.LBI534:
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 790              		.loc 1 97 2 is_stmt 1 view .LVU155
 791              	.LBB535:
 792              	.LBB536:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 793              		.loc 1 98 47 is_stmt 0 view .LVU156
 794 003c 0023     		movs	r3, #0
 795 003e 0993     		str	r3, [sp, #36]
 796 0040 0A93     		str	r3, [sp, #40]
 797 0042 0B93     		str	r3, [sp, #44]
 798              	.LVL47:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 799              		.loc 1 98 47 view .LVU157
 800              	.LBE536:
 801              	.LBE535:
 802              	.LBE534:
 803              	.LBE531:
 804              	.LBE530:
 805              	.LBB537:
 806              	.LBI537:
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 807              		.loc 1 359 7 is_stmt 1 view .LVU158
 808              	.LBB538:
 809              	.LBB539:
 810              	.LBI539:
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 811              		.loc 1 343 7 view .LVU159
 812              	.LBB540:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 813              		.loc 1 346 18 is_stmt 0 view .LVU160
 814 0044 44B3     		cbz	r4, .L30
ARM GAS  /tmp/ccfXJrhX.s 			page 139


 815              	.LVL48:
 816              	.LBB541:
 817              	.LBI541:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 818              		.loc 2 459 7 is_stmt 1 view .LVU161
 819              	.LBB542:
 820              	.LBI542:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 821              		.loc 3 103 7 view .LVU162
 822              	.LBB543:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 823              		.loc 3 111 2 is_stmt 0 view .LVU163
 824 0046 9C42     		cmp	r4, r3
 825 0048 24DB     		blt	.L34
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 826              		.loc 3 121 41 view .LVU164
 827 004a 2046     		mov	r0, r4
 828              	.LEHB3:
 829 004c FFF7FEFF 		bl	_Znwj
 830              	.LVL49:
 831              	.LEHE3:
 832 0050 0546     		mov	r5, r0
 833              	.LVL50:
 834              	.L24:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 835              		.loc 3 121 41 view .LVU165
 836              	.LBE543:
 837              	.LBE542:
 838              	.LBE541:
 839              	.LBE540:
 840              	.LBE539:
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 841              		.loc 1 361 25 view .LVU166
 842 0052 0995     		str	r5, [sp, #36]
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 843              		.loc 1 362 26 view .LVU167
 844 0054 0A95     		str	r5, [sp, #40]
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 845              		.loc 1 363 59 view .LVU168
 846 0056 2B19     		adds	r3, r5, r4
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 847              		.loc 1 363 34 view .LVU169
 848 0058 0B93     		str	r3, [sp, #44]
 849              	.LVL51:
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 850              		.loc 1 363 34 view .LVU170
 851              	.LBE538:
 852              	.LBE537:
 853              	.LBE529:
 854              	.LBE528:
 855              	.LBB552:
 856              	.LBI552:
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 857              		.loc 1 1603 7 is_stmt 1 view .LVU171
 858              	.LBB553:
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
 859              		.loc 1 1606 36 is_stmt 0 view .LVU172
ARM GAS  /tmp/ccfXJrhX.s 			page 140


 860 005a 2846     		mov	r0, r5
 861              	.LVL52:
 862              	.LBB554:
 863              	.LBI554:
 864              		.loc 7 683 5 is_stmt 1 view .LVU173
 865              	.LBB555:
 866              	.LBI555:
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 867              		.loc 7 614 5 view .LVU174
 868              	.LBB556:
 869              	.LBB557:
 870              	.LBI557:
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 871              		.loc 7 583 9 view .LVU175
 872              	.LBB558:
 873              	.LBB559:
 874              	.LBI559:
 875              		.loc 8 1089 5 view .LVU176
 876              		.loc 8 1089 5 is_stmt 0 view .LVU177
 877              	.LBE559:
 878              	.LBE558:
 879              	.LBE557:
 880              	.LBE556:
 881              	.LBE555:
 882              	.LBE554:
 883              	.LBE553:
 884              	.LBE552:
 885              	.LBE520:
 886              	.LBE519:
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 887              		.loc 8 951 37 is_stmt 1 view .LVU178
 888              	.LBB594:
 889              	.LBB592:
 890              	.LBB588:
 891              	.LBB586:
 892              	.LBB584:
 893              	.LBB582:
 894              	.LBB580:
 895              	.LBB578:
 896              	.LBB576:
 897              	.LBB574:
 898              	.LBB560:
 899              	.LBB561:
 900              	.LBI561:
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 901              		.loc 8 1054 5 view .LVU179
 902              	.LBB562:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 903              		.loc 8 1060 7 is_stmt 0 view .LVU180
 904 005c F4B9     		cbnz	r4, .L35
 905              	.LVL53:
 906              	.L26:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 907              		.loc 8 1060 7 view .LVU181
 908              	.LBE562:
 909              	.LBE561:
 910              	.LBE560:
ARM GAS  /tmp/ccfXJrhX.s 			page 141


 911              	.LBE574:
 912              	.LBE576:
 913              	.LBE578:
 914              	.LBE580:
 915              	.LBE582:
 916              	.LBE584:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 917              		.loc 1 1605 26 view .LVU182
 918 005e 0A90     		str	r0, [sp, #40]
 919              	.LVL54:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 920              		.loc 1 1605 26 view .LVU183
 921              	.LBE586:
 922              	.LBE588:
 923              	.LBE592:
 924              	.LBE594:
 925              	.LBB595:
 926              	.LBI595:
 927              		.loc 4 182 7 is_stmt 1 view .LVU184
 928              	.LBB596:
 929              	.LBI596:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 930              		.loc 3 89 7 view .LVU185
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 931              		.loc 3 89 7 is_stmt 0 view .LVU186
 932              	.LBE596:
 933              	.LBE595:
 934              	.LBB597:
 935              	.LBI597:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 936              		.loc 1 1043 7 is_stmt 1 view .LVU187
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 937              		.loc 1 1043 7 is_stmt 0 view .LVU188
 938              	.LBE597:
 939              	.LBB598:
 940              	.LBI598:
 941              		.loc 6 2312 7 is_stmt 1 view .LVU189
 942              	.LBB599:
 943              	.LBI599:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 944              		.loc 6 194 7 view .LVU190
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 945              		.loc 6 194 7 is_stmt 0 view .LVU191
 946              	.LBE599:
 947              	.LBE598:
  21:Peripheral/Inc/serial_printf.hpp ****     // ヌル終端された文字列をUARTに送信
 948              		.loc 5 21 18 view .LVU192
 949 0060 CDF810B0 		str	fp, [sp, #16]
 950 0064 CDF80CA0 		str	r10, [sp, #12]
 951 0068 CDF80890 		str	r9, [sp, #8]
 952 006c CDF80480 		str	r8, [sp, #4]
 953 0070 0097     		str	r7, [sp]
 954 0072 079B     		ldr	r3, [sp, #28]
 955 0074 3268     		ldr	r2, [r6]
 956 0076 2146     		mov	r1, r4
 957 0078 0998     		ldr	r0, [sp, #36]
 958 007a FFF7FEFF 		bl	snprintf
ARM GAS  /tmp/ccfXJrhX.s 			page 142


 959              	.LVL55:
 960              	.LBB600:
 961              	.LBI600:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 962              		.loc 1 1043 7 is_stmt 1 view .LVU193
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 963              		.loc 1 1043 7 is_stmt 0 view .LVU194
 964              	.LBE600:
  23:Peripheral/Inc/serial_printf.hpp **** }
 965              		.loc 5 23 22 view .LVU195
 966 007e FF23     		movs	r3, #255
 967 0080 BDF81820 		ldrh	r2, [sp, #24]
 968 0084 0999     		ldr	r1, [sp, #36]
 969 0086 1148     		ldr	r0, .L38
 970              	.LEHB4:
 971 0088 FFF7FEFF 		bl	HAL_UART_Transmit
 972              	.LVL56:
 973              	.LEHE4:
 974 008c 0FE0     		b	.L36
 975              	.LVL57:
 976              	.L33:
 977              	.LBB601:
 978              	.LBB593:
 979              	.LBB589:
 980              	.LBB527:
 981              		.loc 1 1770 24 view .LVU196
 982 008e 1048     		ldr	r0, .L38+4
 983              	.LEHB5:
 984 0090 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 985              	.LVL58:
 986              	.L34:
 987              		.loc 1 1770 24 view .LVU197
 988              	.LBE527:
 989              	.LBE589:
 990              	.LBB590:
 991              	.LBB551:
 992              	.LBB550:
 993              	.LBB549:
 994              	.LBB548:
 995              	.LBB547:
 996              	.LBB546:
 997              	.LBB545:
 998              	.LBB544:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 999              		.loc 3 112 26 view .LVU198
 1000 0094 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 1001              	.LVL59:
 1002              	.L30:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1003              		.loc 3 112 26 view .LVU199
 1004              	.LBE544:
 1005              	.LBE545:
 1006              	.LBE546:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1007              		.loc 1 346 18 view .LVU200
 1008 0098 0025     		movs	r5, #0
 1009 009a DAE7     		b	.L24
ARM GAS  /tmp/ccfXJrhX.s 			page 143


 1010              	.LVL60:
 1011              	.L35:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1012              		.loc 1 346 18 view .LVU201
 1013              	.LBE547:
 1014              	.LBE548:
 1015              	.LBE549:
 1016              	.LBE550:
 1017              	.LBE551:
 1018              	.LBE590:
 1019              	.LBB591:
 1020              	.LBB587:
 1021              	.LBB585:
 1022              	.LBB583:
 1023              	.LBB581:
 1024              	.LBB579:
 1025              	.LBB577:
 1026              	.LBB575:
 1027              	.LBB573:
 1028              	.LBB572:
 1029              	.LBB571:
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
 1030              		.loc 8 1065 20 view .LVU202
 1031 009c 1D46     		mov	r5, r3
 1032              	.LVL61:
 1033              	.LBB563:
 1034              	.LBI563:
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 1035              		.loc 8 913 5 is_stmt 1 view .LVU203
 1036              	.LBB564:
 1037              	.LBI564:
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 1038              		.loc 8 881 5 view .LVU204
 1039              	.LBB565:
 1040              	.LBB566:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 1041              		.loc 8 892 7 is_stmt 0 view .LVU205
 1042 009e 2246     		mov	r2, r4
 1043 00a0 0CB9     		cbnz	r4, .L37
 1044              	.LVL62:
 1045              	.L27:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 1046              		.loc 8 892 7 view .LVU206
 1047              	.LBE566:
 1048              	.LBE565:
 1049              	.LBE564:
 1050              	.LBE563:
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1051              		.loc 8 1066 24 view .LVU207
 1052 00a2 2846     		mov	r0, r5
 1053              	.LBB570:
 1054              	.LBB569:
 1055              	.LBB568:
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 1056              		.loc 8 894 5 view .LVU208
 1057 00a4 DBE7     		b	.L26
 1058              	.LVL63:
ARM GAS  /tmp/ccfXJrhX.s 			page 144


 1059              	.L37:
 1060              	.LBB567:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1061              		.loc 8 893 18 view .LVU209
 1062 00a6 0021     		movs	r1, #0
 1063 00a8 FFF7FEFF 		bl	memset
 1064              	.LVL64:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1065              		.loc 8 893 18 view .LVU210
 1066 00ac F9E7     		b	.L27
 1067              	.LVL65:
 1068              	.L36:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1069              		.loc 8 893 18 view .LVU211
 1070              	.LBE567:
 1071              	.LBE568:
 1072              	.LBE569:
 1073              	.LBE570:
 1074              	.LBE571:
 1075              	.LBE572:
 1076              	.LBE573:
 1077              	.LBE575:
 1078              	.LBE577:
 1079              	.LBE579:
 1080              	.LBE581:
 1081              	.LBE583:
 1082              	.LBE585:
 1083              	.LBE587:
 1084              	.LBE591:
 1085              	.LBE593:
 1086              	.LBE601:
 1087              	.LBB602:
 1088              	.LBI602:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1089              		.loc 1 678 7 is_stmt 1 view .LVU212
 1090              	.LBB603:
 1091              	.LBB604:
 1092              	.LBI604:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1093              		.loc 1 276 7 view .LVU213
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1094              		.loc 1 276 7 is_stmt 0 view .LVU214
 1095              	.LBE604:
 1096              	.LBB605:
 1097              	.LBI605:
 1098              		.loc 2 735 5 is_stmt 1 view .LVU215
 1099              		.loc 2 735 5 is_stmt 0 view .LVU216
 1100              	.LBE605:
 1101              	.LBB606:
 1102              	.LBI606:
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1103              		.loc 1 333 7 is_stmt 1 view .LVU217
 1104              	.LBB607:
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 1105              		.loc 1 335 15 is_stmt 0 view .LVU218
 1106 00ae 0998     		ldr	r0, [sp, #36]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
ARM GAS  /tmp/ccfXJrhX.s 			page 145


 1107              		.loc 1 336 17 view .LVU219
 1108 00b0 0B99     		ldr	r1, [sp, #44]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1109              		.loc 1 336 35 view .LVU220
 1110 00b2 091A     		subs	r1, r1, r0
 1111              	.LVL66:
 1112              	.LBB608:
 1113              	.LBI608:
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1114              		.loc 1 350 7 is_stmt 1 view .LVU221
 1115              	.LBB609:
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1116              		.loc 1 353 2 is_stmt 0 view .LVU222
 1117 00b4 08B1     		cbz	r0, .L22
 1118              	.LVL67:
 1119              	.LBB610:
 1120              	.LBI610:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1121              		.loc 2 491 7 is_stmt 1 view .LVU223
 1122              	.LBB611:
 1123              	.LBB612:
 1124              	.LBI612:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1125              		.loc 3 126 7 view .LVU224
 1126              	.LBB613:
 1127              		.loc 3 139 19 is_stmt 0 view .LVU225
 1128 00b6 FFF7FEFF 		bl	_ZdlPvj
 1129              	.LVL68:
 1130              		.loc 3 139 19 view .LVU226
 1131              	.LBE613:
 1132              	.LBE612:
 1133              	.LBE611:
 1134              	.LBE610:
 1135              	.LBE609:
 1136              	.LBE608:
 1137              	.LBB614:
 1138              	.LBI614:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 1139              		.loc 1 128 14 is_stmt 1 view .LVU227
 1140              	.LBB615:
 1141              	.LBB616:
 1142              	.LBI616:
 1143              		.loc 4 182 7 view .LVU228
 1144              	.LBB617:
 1145              	.LBI617:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1146              		.loc 3 89 7 view .LVU229
 1147              	.L22:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1148              		.loc 3 89 7 is_stmt 0 view .LVU230
 1149              	.LBE617:
 1150              	.LBE616:
 1151              	.LBE615:
 1152              	.LBE614:
 1153              	.LBE607:
 1154              	.LBE606:
 1155              	.LBE603:
ARM GAS  /tmp/ccfXJrhX.s 			page 146


 1156              	.LBE602:
 1157              		.loc 5 24 1 view .LVU231
 1158 00ba 0DB0     		add	sp, sp, #52
 1159              	.LCFI7:
 1160              		.cfi_remember_state
 1161              		.cfi_def_cfa_offset 36
 1162              		@ sp needed
 1163 00bc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1164              	.LVL69:
 1165              	.L31:
 1166              	.LCFI8:
 1167              		.cfi_restore_state
 1168              	.LBB618:
 1169              	.LBI618:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1170              		.loc 1 678 7 is_stmt 1 view .LVU232
 1171              	.LBB619:
 1172              	.LBB620:
 1173              	.LBI620:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1174              		.loc 1 276 7 view .LVU233
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1175              		.loc 1 276 7 is_stmt 0 view .LVU234
 1176              	.LBE620:
 1177              	.LBB621:
 1178              	.LBI621:
 1179              		.loc 2 735 5 is_stmt 1 view .LVU235
 1180              		.loc 2 735 5 is_stmt 0 view .LVU236
 1181              	.LBE621:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1182              		.loc 1 683 7 view .LVU237
 1183 00c0 09A8     		add	r0, sp, #36
 1184              	.LVL70:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1185              		.loc 1 683 7 view .LVU238
 1186 00c2 FFF7FEFF 		bl	_ZNSt12_Vector_baseIcSaIcEED2Ev
 1187              	.LVL71:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1188              		.loc 1 683 7 view .LVU239
 1189 00c6 FFF7FEFF 		bl	__cxa_end_cleanup
 1190              	.LVL72:
 1191              	.LEHE5:
 1192              	.L39:
 1193 00ca 00BF     		.align	2
 1194              	.L38:
 1195 00cc 00000000 		.word	huart1
 1196 00d0 00000000 		.word	.LC0
 1197              	.LBE619:
 1198              	.LBE618:
 1199              		.cfi_endproc
 1200              	.LFE1734:
 1201              		.personality	__gxx_personality_v0
 1202              		.handlerdata
 1203              	.LLSDA1734:
 1204 0008 FF       		.byte	0xff
 1205 0009 FF       		.byte	0xff
 1206 000a 01       		.byte	0x1
ARM GAS  /tmp/ccfXJrhX.s 			page 147


 1207 000b 0F       		.uleb128 .LLSDACSE1734-.LLSDACSB1734
 1208              	.LLSDACSB1734:
 1209 000c 4C       		.uleb128 .LEHB3-.LFB1734
 1210 000d 04       		.uleb128 .LEHE3-.LEHB3
 1211 000e 00       		.uleb128 0
 1212 000f 00       		.uleb128 0
 1213 0010 8801     		.uleb128 .LEHB4-.LFB1734
 1214 0012 04       		.uleb128 .LEHE4-.LEHB4
 1215 0013 C001     		.uleb128 .L31-.LFB1734
 1216 0015 00       		.uleb128 0
 1217 0016 9001     		.uleb128 .LEHB5-.LFB1734
 1218 0018 3A       		.uleb128 .LEHE5-.LEHB5
 1219 0019 00       		.uleb128 0
 1220 001a 00       		.uleb128 0
 1221              	.LLSDACSE1734:
 1222              		.section	.text._Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEED
 1223              		.fnend
 1225              		.section	.text._Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT
 1226              		.align	1
 1227              		.weak	_Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 1228              		.syntax unified
 1229              		.thumb
 1230              		.thumb_func
 1231              		.fpu fpv4-sp-d16
 1233              	_Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:
 1234              		.fnstart
 1235              	.LVL73:
 1236              	.LFB1735:
  15:Peripheral/Inc/serial_printf.hpp **** {
 1237              		.loc 5 15 6 is_stmt 1 view -0
 1238              		.cfi_startproc
 1239              		@ args = 4, pretend = 0, frame = 16
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
  15:Peripheral/Inc/serial_printf.hpp **** {
 1241              		.loc 5 15 6 is_stmt 0 view .LVU241
 1242 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1243              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1244              	.LCFI9:
 1245              		.cfi_def_cfa_offset 36
 1246              		.cfi_offset 4, -36
 1247              		.cfi_offset 5, -32
 1248              		.cfi_offset 6, -28
 1249              		.cfi_offset 7, -24
 1250              		.cfi_offset 8, -20
 1251              		.cfi_offset 9, -16
 1252              		.cfi_offset 10, -12
 1253              		.cfi_offset 11, -8
 1254              		.cfi_offset 14, -4
 1255              		.pad #36
 1256 0004 89B0     		sub	sp, sp, #36
 1257              	.LCFI10:
 1258              		.cfi_def_cfa_offset 72
 1259 0006 0746     		mov	r7, r0
 1260 0008 8846     		mov	r8, r1
 1261 000a 9146     		mov	r9, r2
 1262 000c 9A46     		mov	r10, r3
 1263 000e 9DF848B0 		ldrb	fp, [sp, #72]	@ zero_extendqisi2
ARM GAS  /tmp/ccfXJrhX.s 			page 148


 1264              	.LVL74:
 1265              	.LBB704:
 1266              	.LBI704:
 1267              		.loc 6 2312 7 is_stmt 1 view .LVU242
 1268              	.LBB705:
 1269              	.LBI705:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1270              		.loc 6 194 7 view .LVU243
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1271              		.loc 6 194 7 is_stmt 0 view .LVU244
 1272              	.LBE705:
 1273              	.LBE704:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1274              		.loc 5 18 31 view .LVU245
 1275 0012 CDF808B0 		str	fp, [sp, #8]
 1276 0016 0193     		str	r3, [sp, #4]
 1277 0018 0092     		str	r2, [sp]
 1278 001a 0B46     		mov	r3, r1
 1279              	.LVL75:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1280              		.loc 5 18 31 view .LVU246
 1281 001c 0268     		ldr	r2, [r0]
 1282              	.LVL76:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1283              		.loc 5 18 31 view .LVU247
 1284 001e 0021     		movs	r1, #0
 1285              	.LVL77:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1286              		.loc 5 18 31 view .LVU248
 1287 0020 0846     		mov	r0, r1
 1288              	.LVL78:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1289              		.loc 5 18 31 view .LVU249
 1290 0022 FFF7FEFF 		bl	snprintf
 1291              	.LVL79:
 1292              	.LBB706:
 1293              	.LBI706:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 1294              		.loc 4 164 7 is_stmt 1 view .LVU250
 1295              	.LBB707:
 1296              	.LBI707:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1297              		.loc 3 79 7 view .LVU251
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1298              		.loc 3 79 7 is_stmt 0 view .LVU252
 1299              	.LBE707:
 1300              	.LBE706:
 1301              	.LBB708:
 1302              	.LBI708:
 510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 1303              		.loc 1 510 7 is_stmt 1 view .LVU253
 1304              	.LBB709:
 1305              	.LBB710:
 1306              	.LBI710:
1767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1307              		.loc 1 1767 7 view .LVU254
 1308              	.LBB711:
ARM GAS  /tmp/ccfXJrhX.s 			page 149


 1309              	.LBB712:
 1310              	.LBI712:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1311              		.loc 4 167 7 view .LVU255
 1312              	.LBB713:
 1313              	.LBI713:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1314              		.loc 3 82 7 view .LVU256
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1315              		.loc 3 82 7 is_stmt 0 view .LVU257
 1316              	.LBE713:
 1317              	.LBE712:
 1318              	.LBB714:
 1319              	.LBI714:
 1320              		.loc 4 182 7 is_stmt 1 view .LVU258
 1321              	.LBB715:
 1322              	.LBI715:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1323              		.loc 3 89 7 view .LVU259
 1324              	.LBE715:
 1325              	.LBE714:
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 1326              		.loc 1 1769 2 is_stmt 0 view .LVU260
 1327 0026 441C     		adds	r4, r0, #1
 1328 0028 25D4     		bmi	.L51
 1329 002a 0646     		mov	r6, r0
 1330              	.LVL80:
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 1331              		.loc 1 1769 2 view .LVU261
 1332              	.LBE711:
 1333              	.LBE710:
 1334              	.LBB717:
 1335              	.LBI717:
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 1336              		.loc 1 303 7 is_stmt 1 view .LVU262
 1337              	.LBB718:
 1338              	.LBB719:
 1339              	.LBI719:
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 1340              		.loc 1 136 2 view .LVU263
 1341              	.LBB720:
 1342              	.LBB721:
 1343              	.LBI721:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1344              		.loc 4 167 7 view .LVU264
 1345              	.LBB722:
 1346              	.LBI722:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1347              		.loc 3 82 7 view .LVU265
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1348              		.loc 3 82 7 is_stmt 0 view .LVU266
 1349              	.LBE722:
 1350              	.LBE721:
 1351              	.LBB723:
 1352              	.LBI723:
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 1353              		.loc 1 97 2 is_stmt 1 view .LVU267
ARM GAS  /tmp/ccfXJrhX.s 			page 150


 1354              	.LBB724:
 1355              	.LBB725:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 1356              		.loc 1 98 47 is_stmt 0 view .LVU268
 1357 002c 0023     		movs	r3, #0
 1358 002e 0593     		str	r3, [sp, #20]
 1359 0030 0693     		str	r3, [sp, #24]
 1360 0032 0793     		str	r3, [sp, #28]
 1361              	.LVL81:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 1362              		.loc 1 98 47 view .LVU269
 1363              	.LBE725:
 1364              	.LBE724:
 1365              	.LBE723:
 1366              	.LBE720:
 1367              	.LBE719:
 1368              	.LBB726:
 1369              	.LBI726:
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1370              		.loc 1 359 7 is_stmt 1 view .LVU270
 1371              	.LBB727:
 1372              	.LBB728:
 1373              	.LBI728:
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1374              		.loc 1 343 7 view .LVU271
 1375              	.LBB729:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1376              		.loc 1 346 18 is_stmt 0 view .LVU272
 1377 0034 24B3     		cbz	r4, .L48
 1378              	.LVL82:
 1379              	.LBB730:
 1380              	.LBI730:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1381              		.loc 2 459 7 is_stmt 1 view .LVU273
 1382              	.LBB731:
 1383              	.LBI731:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1384              		.loc 3 103 7 view .LVU274
 1385              	.LBB732:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 1386              		.loc 3 111 2 is_stmt 0 view .LVU275
 1387 0036 9C42     		cmp	r4, r3
 1388 0038 20DB     		blt	.L52
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1389              		.loc 3 121 41 view .LVU276
 1390 003a 2046     		mov	r0, r4
 1391              	.LVL83:
 1392              	.LEHB6:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1393              		.loc 3 121 41 view .LVU277
 1394 003c FFF7FEFF 		bl	_Znwj
 1395              	.LVL84:
 1396              	.LEHE6:
 1397 0040 0546     		mov	r5, r0
 1398              	.LVL85:
 1399              	.L42:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
ARM GAS  /tmp/ccfXJrhX.s 			page 151


 1400              		.loc 3 121 41 view .LVU278
 1401              	.LBE732:
 1402              	.LBE731:
 1403              	.LBE730:
 1404              	.LBE729:
 1405              	.LBE728:
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 1406              		.loc 1 361 25 view .LVU279
 1407 0042 0595     		str	r5, [sp, #20]
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 1408              		.loc 1 362 26 view .LVU280
 1409 0044 0695     		str	r5, [sp, #24]
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1410              		.loc 1 363 59 view .LVU281
 1411 0046 2B19     		adds	r3, r5, r4
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1412              		.loc 1 363 34 view .LVU282
 1413 0048 0793     		str	r3, [sp, #28]
 1414              	.LVL86:
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1415              		.loc 1 363 34 view .LVU283
 1416              	.LBE727:
 1417              	.LBE726:
 1418              	.LBE718:
 1419              	.LBE717:
 1420              	.LBB741:
 1421              	.LBI741:
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1422              		.loc 1 1603 7 is_stmt 1 view .LVU284
 1423              	.LBB742:
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
 1424              		.loc 1 1606 36 is_stmt 0 view .LVU285
 1425 004a 2846     		mov	r0, r5
 1426              	.LVL87:
 1427              	.LBB743:
 1428              	.LBI743:
 1429              		.loc 7 683 5 is_stmt 1 view .LVU286
 1430              	.LBB744:
 1431              	.LBI744:
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 1432              		.loc 7 614 5 view .LVU287
 1433              	.LBB745:
 1434              	.LBB746:
 1435              	.LBI746:
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 1436              		.loc 7 583 9 view .LVU288
 1437              	.LBB747:
 1438              	.LBB748:
 1439              	.LBI748:
 1440              		.loc 8 1089 5 view .LVU289
 1441              		.loc 8 1089 5 is_stmt 0 view .LVU290
 1442              	.LBE748:
 1443              	.LBE747:
 1444              	.LBE746:
 1445              	.LBE745:
 1446              	.LBE744:
 1447              	.LBE743:
ARM GAS  /tmp/ccfXJrhX.s 			page 152


 1448              	.LBE742:
 1449              	.LBE741:
 1450              	.LBE709:
 1451              	.LBE708:
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 1452              		.loc 8 951 37 is_stmt 1 view .LVU291
 1453              	.LBB783:
 1454              	.LBB781:
 1455              	.LBB777:
 1456              	.LBB775:
 1457              	.LBB773:
 1458              	.LBB771:
 1459              	.LBB769:
 1460              	.LBB767:
 1461              	.LBB765:
 1462              	.LBB763:
 1463              	.LBB749:
 1464              	.LBB750:
 1465              	.LBI750:
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 1466              		.loc 8 1054 5 view .LVU292
 1467              	.LBB751:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 1468              		.loc 8 1060 7 is_stmt 0 view .LVU293
 1469 004c D4B9     		cbnz	r4, .L53
 1470              	.LVL88:
 1471              	.L44:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 1472              		.loc 8 1060 7 view .LVU294
 1473              	.LBE751:
 1474              	.LBE750:
 1475              	.LBE749:
 1476              	.LBE763:
 1477              	.LBE765:
 1478              	.LBE767:
 1479              	.LBE769:
 1480              	.LBE771:
 1481              	.LBE773:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 1482              		.loc 1 1605 26 view .LVU295
 1483 004e 0690     		str	r0, [sp, #24]
 1484              	.LVL89:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 1485              		.loc 1 1605 26 view .LVU296
 1486              	.LBE775:
 1487              	.LBE777:
 1488              	.LBE781:
 1489              	.LBE783:
 1490              	.LBB784:
 1491              	.LBI784:
 1492              		.loc 4 182 7 is_stmt 1 view .LVU297
 1493              	.LBB785:
 1494              	.LBI785:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1495              		.loc 3 89 7 view .LVU298
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1496              		.loc 3 89 7 is_stmt 0 view .LVU299
ARM GAS  /tmp/ccfXJrhX.s 			page 153


 1497              	.LBE785:
 1498              	.LBE784:
 1499              	.LBB786:
 1500              	.LBI786:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1501              		.loc 1 1043 7 is_stmt 1 view .LVU300
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1502              		.loc 1 1043 7 is_stmt 0 view .LVU301
 1503              	.LBE786:
 1504              	.LBB787:
 1505              	.LBI787:
 1506              		.loc 6 2312 7 is_stmt 1 view .LVU302
 1507              	.LBB788:
 1508              	.LBI788:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1509              		.loc 6 194 7 view .LVU303
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1510              		.loc 6 194 7 is_stmt 0 view .LVU304
 1511              	.LBE788:
 1512              	.LBE787:
  21:Peripheral/Inc/serial_printf.hpp ****     // ヌル終端された文字列をUARTに送信
 1513              		.loc 5 21 18 view .LVU305
 1514 0050 CDF808B0 		str	fp, [sp, #8]
 1515 0054 CDF804A0 		str	r10, [sp, #4]
 1516 0058 CDF80090 		str	r9, [sp]
 1517 005c 4346     		mov	r3, r8
 1518 005e 3A68     		ldr	r2, [r7]
 1519 0060 2146     		mov	r1, r4
 1520 0062 0598     		ldr	r0, [sp, #20]
 1521 0064 FFF7FEFF 		bl	snprintf
 1522              	.LVL90:
 1523              	.LBB789:
 1524              	.LBI789:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1525              		.loc 1 1043 7 is_stmt 1 view .LVU306
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1526              		.loc 1 1043 7 is_stmt 0 view .LVU307
 1527              	.LBE789:
  23:Peripheral/Inc/serial_printf.hpp **** }
 1528              		.loc 5 23 22 view .LVU308
 1529 0068 FF23     		movs	r3, #255
 1530 006a B2B2     		uxth	r2, r6
 1531 006c 0599     		ldr	r1, [sp, #20]
 1532 006e 1148     		ldr	r0, .L56
 1533              	.LEHB7:
 1534 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 1535              	.LVL91:
 1536              	.LEHE7:
 1537 0074 0FE0     		b	.L54
 1538              	.LVL92:
 1539              	.L51:
 1540              	.LBB790:
 1541              	.LBB782:
 1542              	.LBB778:
 1543              	.LBB716:
 1544              		.loc 1 1770 24 view .LVU309
 1545 0076 1048     		ldr	r0, .L56+4
ARM GAS  /tmp/ccfXJrhX.s 			page 154


 1546              	.LVL93:
 1547              	.LEHB8:
 1548              		.loc 1 1770 24 view .LVU310
 1549 0078 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 1550              	.LVL94:
 1551              	.L52:
 1552              		.loc 1 1770 24 view .LVU311
 1553              	.LBE716:
 1554              	.LBE778:
 1555              	.LBB779:
 1556              	.LBB740:
 1557              	.LBB739:
 1558              	.LBB738:
 1559              	.LBB737:
 1560              	.LBB736:
 1561              	.LBB735:
 1562              	.LBB734:
 1563              	.LBB733:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1564              		.loc 3 112 26 view .LVU312
 1565 007c FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 1566              	.LVL95:
 1567              	.L48:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1568              		.loc 3 112 26 view .LVU313
 1569              	.LBE733:
 1570              	.LBE734:
 1571              	.LBE735:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1572              		.loc 1 346 18 view .LVU314
 1573 0080 0025     		movs	r5, #0
 1574 0082 DEE7     		b	.L42
 1575              	.LVL96:
 1576              	.L53:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1577              		.loc 1 346 18 view .LVU315
 1578              	.LBE736:
 1579              	.LBE737:
 1580              	.LBE738:
 1581              	.LBE739:
 1582              	.LBE740:
 1583              	.LBE779:
 1584              	.LBB780:
 1585              	.LBB776:
 1586              	.LBB774:
 1587              	.LBB772:
 1588              	.LBB770:
 1589              	.LBB768:
 1590              	.LBB766:
 1591              	.LBB764:
 1592              	.LBB762:
 1593              	.LBB761:
 1594              	.LBB760:
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
 1595              		.loc 8 1065 20 view .LVU316
 1596 0084 1D46     		mov	r5, r3
 1597              	.LVL97:
ARM GAS  /tmp/ccfXJrhX.s 			page 155


 1598              	.LBB752:
 1599              	.LBI752:
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 1600              		.loc 8 913 5 is_stmt 1 view .LVU317
 1601              	.LBB753:
 1602              	.LBI753:
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 1603              		.loc 8 881 5 view .LVU318
 1604              	.LBB754:
 1605              	.LBB755:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 1606              		.loc 8 892 7 is_stmt 0 view .LVU319
 1607 0086 2246     		mov	r2, r4
 1608 0088 0CB9     		cbnz	r4, .L55
 1609              	.LVL98:
 1610              	.L45:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 1611              		.loc 8 892 7 view .LVU320
 1612              	.LBE755:
 1613              	.LBE754:
 1614              	.LBE753:
 1615              	.LBE752:
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1616              		.loc 8 1066 24 view .LVU321
 1617 008a 2846     		mov	r0, r5
 1618              	.LBB759:
 1619              	.LBB758:
 1620              	.LBB757:
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 1621              		.loc 8 894 5 view .LVU322
 1622 008c DFE7     		b	.L44
 1623              	.LVL99:
 1624              	.L55:
 1625              	.LBB756:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1626              		.loc 8 893 18 view .LVU323
 1627 008e 0021     		movs	r1, #0
 1628 0090 FFF7FEFF 		bl	memset
 1629              	.LVL100:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1630              		.loc 8 893 18 view .LVU324
 1631 0094 F9E7     		b	.L45
 1632              	.LVL101:
 1633              	.L54:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1634              		.loc 8 893 18 view .LVU325
 1635              	.LBE756:
 1636              	.LBE757:
 1637              	.LBE758:
 1638              	.LBE759:
 1639              	.LBE760:
 1640              	.LBE761:
 1641              	.LBE762:
 1642              	.LBE764:
 1643              	.LBE766:
 1644              	.LBE768:
 1645              	.LBE770:
ARM GAS  /tmp/ccfXJrhX.s 			page 156


 1646              	.LBE772:
 1647              	.LBE774:
 1648              	.LBE776:
 1649              	.LBE780:
 1650              	.LBE782:
 1651              	.LBE790:
 1652              	.LBB791:
 1653              	.LBI791:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1654              		.loc 1 678 7 is_stmt 1 view .LVU326
 1655              	.LBB792:
 1656              	.LBB793:
 1657              	.LBI793:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1658              		.loc 1 276 7 view .LVU327
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1659              		.loc 1 276 7 is_stmt 0 view .LVU328
 1660              	.LBE793:
 1661              	.LBB794:
 1662              	.LBI794:
 1663              		.loc 2 735 5 is_stmt 1 view .LVU329
 1664              		.loc 2 735 5 is_stmt 0 view .LVU330
 1665              	.LBE794:
 1666              	.LBB795:
 1667              	.LBI795:
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1668              		.loc 1 333 7 is_stmt 1 view .LVU331
 1669              	.LBB796:
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 1670              		.loc 1 335 15 is_stmt 0 view .LVU332
 1671 0096 0598     		ldr	r0, [sp, #20]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1672              		.loc 1 336 17 view .LVU333
 1673 0098 0799     		ldr	r1, [sp, #28]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1674              		.loc 1 336 35 view .LVU334
 1675 009a 091A     		subs	r1, r1, r0
 1676              	.LVL102:
 1677              	.LBB797:
 1678              	.LBI797:
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1679              		.loc 1 350 7 is_stmt 1 view .LVU335
 1680              	.LBB798:
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1681              		.loc 1 353 2 is_stmt 0 view .LVU336
 1682 009c 08B1     		cbz	r0, .L40
 1683              	.LVL103:
 1684              	.LBB799:
 1685              	.LBI799:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1686              		.loc 2 491 7 is_stmt 1 view .LVU337
 1687              	.LBB800:
 1688              	.LBB801:
 1689              	.LBI801:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1690              		.loc 3 126 7 view .LVU338
 1691              	.LBB802:
ARM GAS  /tmp/ccfXJrhX.s 			page 157


 1692              		.loc 3 139 19 is_stmt 0 view .LVU339
 1693 009e FFF7FEFF 		bl	_ZdlPvj
 1694              	.LVL104:
 1695              		.loc 3 139 19 view .LVU340
 1696              	.LBE802:
 1697              	.LBE801:
 1698              	.LBE800:
 1699              	.LBE799:
 1700              	.LBE798:
 1701              	.LBE797:
 1702              	.LBB803:
 1703              	.LBI803:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 1704              		.loc 1 128 14 is_stmt 1 view .LVU341
 1705              	.LBB804:
 1706              	.LBB805:
 1707              	.LBI805:
 1708              		.loc 4 182 7 view .LVU342
 1709              	.LBB806:
 1710              	.LBI806:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1711              		.loc 3 89 7 view .LVU343
 1712              	.L40:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1713              		.loc 3 89 7 is_stmt 0 view .LVU344
 1714              	.LBE806:
 1715              	.LBE805:
 1716              	.LBE804:
 1717              	.LBE803:
 1718              	.LBE796:
 1719              	.LBE795:
 1720              	.LBE792:
 1721              	.LBE791:
 1722              		.loc 5 24 1 view .LVU345
 1723 00a2 09B0     		add	sp, sp, #36
 1724              	.LCFI11:
 1725              		.cfi_remember_state
 1726              		.cfi_def_cfa_offset 36
 1727              		@ sp needed
 1728 00a4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1729              	.LVL105:
 1730              	.L49:
 1731              	.LCFI12:
 1732              		.cfi_restore_state
 1733              	.LBB807:
 1734              	.LBI807:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1735              		.loc 1 678 7 is_stmt 1 view .LVU346
 1736              	.LBB808:
 1737              	.LBB809:
 1738              	.LBI809:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1739              		.loc 1 276 7 view .LVU347
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1740              		.loc 1 276 7 is_stmt 0 view .LVU348
 1741              	.LBE809:
 1742              	.LBB810:
ARM GAS  /tmp/ccfXJrhX.s 			page 158


 1743              	.LBI810:
 1744              		.loc 2 735 5 is_stmt 1 view .LVU349
 1745              		.loc 2 735 5 is_stmt 0 view .LVU350
 1746              	.LBE810:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1747              		.loc 1 683 7 view .LVU351
 1748 00a8 05A8     		add	r0, sp, #20
 1749              	.LVL106:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1750              		.loc 1 683 7 view .LVU352
 1751 00aa FFF7FEFF 		bl	_ZNSt12_Vector_baseIcSaIcEED2Ev
 1752              	.LVL107:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1753              		.loc 1 683 7 view .LVU353
 1754 00ae FFF7FEFF 		bl	__cxa_end_cleanup
 1755              	.LVL108:
 1756              	.LEHE8:
 1757              	.L57:
 1758 00b2 00BF     		.align	2
 1759              	.L56:
 1760 00b4 00000000 		.word	huart1
 1761 00b8 00000000 		.word	.LC0
 1762              	.LBE808:
 1763              	.LBE807:
 1764              		.cfi_endproc
 1765              	.LFE1735:
 1766              		.personality	__gxx_personality_v0
 1767              		.handlerdata
 1768              	.LLSDA1735:
 1769 0008 FF       		.byte	0xff
 1770 0009 FF       		.byte	0xff
 1771 000a 01       		.byte	0x1
 1772 000b 0D       		.uleb128 .LLSDACSE1735-.LLSDACSB1735
 1773              	.LLSDACSB1735:
 1774 000c 3C       		.uleb128 .LEHB6-.LFB1735
 1775 000d 04       		.uleb128 .LEHE6-.LEHB6
 1776 000e 00       		.uleb128 0
 1777 000f 00       		.uleb128 0
 1778 0010 70       		.uleb128 .LEHB7-.LFB1735
 1779 0011 04       		.uleb128 .LEHE7-.LEHB7
 1780 0012 A801     		.uleb128 .L49-.LFB1735
 1781 0014 00       		.uleb128 0
 1782 0015 78       		.uleb128 .LEHB8-.LFB1735
 1783 0016 3A       		.uleb128 .LEHE8-.LEHB8
 1784 0017 00       		.uleb128 0
 1785 0018 00       		.uleb128 0
 1786              	.LLSDACSE1735:
 1787              		.section	.text._Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT
 1788              		.fnend
 1790              		.text
 1791              	.Letext0:
 1792              		.file 9 "/usr/include/newlib/c++/10.3.1/type_traits"
 1793              		.file 10 "/usr/include/newlib/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h"
 1794              		.file 11 "/usr/include/newlib/c++/10.3.1/bits/stl_pair.h"
 1795              		.file 12 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_types.h"
 1796              		.file 13 "/usr/include/newlib/c++/10.3.1/debug/debug.h"
 1797              		.file 14 "/usr/include/newlib/c++/10.3.1/cwchar"
ARM GAS  /tmp/ccfXJrhX.s 			page 159


 1798              		.file 15 "/usr/include/newlib/c++/10.3.1/bits/char_traits.h"
 1799              		.file 16 "/usr/include/newlib/c++/10.3.1/cstdint"
 1800              		.file 17 "/usr/include/newlib/c++/10.3.1/bits/exception_ptr.h"
 1801              		.file 18 "/usr/include/newlib/c++/10.3.1/clocale"
 1802              		.file 19 "/usr/include/newlib/c++/10.3.1/bits/stl_construct.h"
 1803              		.file 20 "/usr/include/newlib/c++/10.3.1/cstdlib"
 1804              		.file 21 "/usr/include/newlib/c++/10.3.1/cstdio"
 1805              		.file 22 "/usr/include/newlib/c++/10.3.1/initializer_list"
 1806              		.file 23 "/usr/include/newlib/c++/10.3.1/bits/stringfwd.h"
 1807              		.file 24 "/usr/include/newlib/c++/10.3.1/bits/vector.tcc"
 1808              		.file 25 "/usr/include/newlib/c++/10.3.1/bits/functexcept.h"
 1809              		.file 26 "/usr/include/newlib/c++/10.3.1/bits/predefined_ops.h"
 1810              		.file 27 "/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h"
 1811              		.file 28 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator.h"
 1812              		.file 29 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 1813              		.file 30 "/usr/include/newlib/sys/_types.h"
 1814              		.file 31 "/usr/include/newlib/sys/reent.h"
 1815              		.file 32 "/usr/include/newlib/sys/lock.h"
 1816              		.file 33 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 1817              		.file 34 "/usr/include/newlib/wchar.h"
 1818              		.file 35 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1819              		.file 36 "/usr/include/newlib/locale.h"
 1820              		.file 37 "/usr/include/newlib/stdlib.h"
 1821              		.file 38 "/usr/include/newlib/stdio.h"
 1822              		.file 39 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 1823              		.file 40 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1824              		.file 41 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1825              		.file 42 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1826              		.file 43 "/usr/include/newlib/c++/10.3.1/new"
 1827              		.file 44 "<built-in>"
 1828              		.file 45 "Core/Inc/usart.h"
ARM GAS  /tmp/ccfXJrhX.s 			page 160


DEFINED SYMBOLS
                            *ABS*:0000000000000000 serial_printf.cpp
     /tmp/ccfXJrhX.s:18     .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 $t
     /tmp/ccfXJrhX.s:26     .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED2Ev
.ARM.exidx.text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 $d
     /tmp/ccfXJrhX.s:26     .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED1Ev
     /tmp/ccfXJrhX.s:106    .rodata._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_.str1.4:0000000000000000 $d
     /tmp/ccfXJrhX.s:110    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $t
     /tmp/ccfXJrhX.s:117    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 _Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
     /tmp/ccfXJrhX.s:626    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:000000000000008c $d
.ARM.extab.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
.ARM.exidx.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
     /tmp/ccfXJrhX.s:658    .text._Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $t
     /tmp/ccfXJrhX.s:665    .text._Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 _Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
     /tmp/ccfXJrhX.s:1195   .text._Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:00000000000000cc $d
.ARM.extab.text._Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
.ARM.exidx.text._Z13serial_printfIJhhhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
     /tmp/ccfXJrhX.s:1226   .text._Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $t
     /tmp/ccfXJrhX.s:1233   .text._Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 _Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
     /tmp/ccfXJrhX.s:1760   .text._Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:00000000000000b4 $d
.ARM.extab.text._Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
.ARM.exidx.text._Z13serial_printfIJhhhhEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
                           .group:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED5Ev

UNDEFINED SYMBOLS
_ZdlPvj
snprintf
_Znwj
HAL_UART_Transmit
_ZSt20__throw_length_errorPKc
_ZSt17__throw_bad_allocv
memset
__cxa_end_cleanup
huart1
__gxx_personality_v0
