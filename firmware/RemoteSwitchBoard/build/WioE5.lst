ARM GAS  /tmp/ccFECPfA.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"WioE5.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_UART_RxCpltCallback
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_UART_RxCpltCallback:
  27              		.fnstart
  28              	.LVL0:
  29              	.LFB1758:
  30              		.file 1 "App/Src/WioE5.cpp"
   1:App/Src/WioE5.cpp **** #include "WioE5.hpp"
   2:App/Src/WioE5.cpp **** #include "gpio.h"
   3:App/Src/WioE5.cpp **** #include "usart.h"
   4:App/Src/WioE5.cpp **** #include "stm32f3xx_hal.h"
   5:App/Src/WioE5.cpp **** #include "stm32f303x8.h"
   6:App/Src/WioE5.cpp **** #include <cstring>
   7:App/Src/WioE5.cpp **** #include <queue>
   8:App/Src/WioE5.cpp **** #include <string>
   9:App/Src/WioE5.cpp **** 
  10:App/Src/WioE5.cpp **** // 受信バッファ
  11:App/Src/WioE5.cpp **** uint8_t rx_byte;
  12:App/Src/WioE5.cpp **** char rxBuffer[1024];
  13:App/Src/WioE5.cpp **** uint16_t rxIndex = 0;
  14:App/Src/WioE5.cpp **** volatile bool rxReady = false;
  15:App/Src/WioE5.cpp **** 
  16:App/Src/WioE5.cpp **** extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  17:App/Src/WioE5.cpp **** {
  31              		.loc 1 17 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 17 1 is_stmt 0 view .LVU1
  36 0000 08B5     		push	{r3, lr}
  37              		.save {r3, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 3, -8
  41              		.cfi_offset 14, -4
ARM GAS  /tmp/ccFECPfA.s 			page 2


  18:App/Src/WioE5.cpp ****     if (huart->Instance == USART2)
  42              		.loc 1 18 5 is_stmt 1 view .LVU2
  43              		.loc 1 18 16 is_stmt 0 view .LVU3
  44 0002 0268     		ldr	r2, [r0]
  45              		.loc 1 18 5 view .LVU4
  46 0004 114B     		ldr	r3, .L8
  47 0006 9A42     		cmp	r2, r3
  48 0008 00D0     		beq	.L6
  49              	.LVL1:
  50              	.L1:
  19:App/Src/WioE5.cpp ****     {
  20:App/Src/WioE5.cpp ****         if (rx_byte == '\n') // 改行で1行終わり
  21:App/Src/WioE5.cpp ****         {
  22:App/Src/WioE5.cpp ****             rxBuffer[rxIndex] = '\0';
  23:App/Src/WioE5.cpp ****             rxReady = true;
  24:App/Src/WioE5.cpp ****             rxIndex = 0;
  25:App/Src/WioE5.cpp ****         }
  26:App/Src/WioE5.cpp ****         else
  27:App/Src/WioE5.cpp ****         {
  28:App/Src/WioE5.cpp ****             if (rxIndex < sizeof(rxBuffer) - 1)
  29:App/Src/WioE5.cpp ****             {
  30:App/Src/WioE5.cpp ****                 rxBuffer[rxIndex++] = rx_byte;
  31:App/Src/WioE5.cpp ****             }
  32:App/Src/WioE5.cpp ****         }
  33:App/Src/WioE5.cpp ****         // 次の受信をセット
  34:App/Src/WioE5.cpp ****         HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
  35:App/Src/WioE5.cpp ****     }
  36:App/Src/WioE5.cpp **** }
  51              		.loc 1 36 1 view .LVU5
  52 000a 08BD     		pop	{r3, pc}
  53              	.LVL2:
  54              	.L6:
  20:App/Src/WioE5.cpp ****         {
  55              		.loc 1 20 9 is_stmt 1 view .LVU6
  20:App/Src/WioE5.cpp ****         {
  56              		.loc 1 20 21 is_stmt 0 view .LVU7
  57 000c 104B     		ldr	r3, .L8+4
  58 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  20:App/Src/WioE5.cpp ****         {
  59              		.loc 1 20 9 view .LVU8
  60 0010 0A2B     		cmp	r3, #10
  61 0012 0BD0     		beq	.L7
  28:App/Src/WioE5.cpp ****             {
  62              		.loc 1 28 13 is_stmt 1 view .LVU9
  28:App/Src/WioE5.cpp ****             {
  63              		.loc 1 28 25 is_stmt 0 view .LVU10
  64 0014 0F4A     		ldr	r2, .L8+8
  65 0016 1288     		ldrh	r2, [r2]
  28:App/Src/WioE5.cpp ****             {
  66              		.loc 1 28 13 view .LVU11
  67 0018 40F2FE31 		movw	r1, #1022
  68 001c 8A42     		cmp	r2, r1
  69 001e 0ED8     		bhi	.L4
  30:App/Src/WioE5.cpp ****             }
  70              		.loc 1 30 17 is_stmt 1 view .LVU12
  30:App/Src/WioE5.cpp ****             }
  71              		.loc 1 30 33 is_stmt 0 view .LVU13
ARM GAS  /tmp/ccFECPfA.s 			page 3


  72 0020 501C     		adds	r0, r2, #1
  73              	.LVL3:
  30:App/Src/WioE5.cpp ****             }
  74              		.loc 1 30 33 view .LVU14
  75 0022 0C49     		ldr	r1, .L8+8
  76 0024 0880     		strh	r0, [r1]	@ movhi
  30:App/Src/WioE5.cpp ****             }
  77              		.loc 1 30 37 view .LVU15
  78 0026 0C49     		ldr	r1, .L8+12
  79 0028 8B54     		strb	r3, [r1, r2]
  80 002a 08E0     		b	.L4
  81              	.LVL4:
  82              	.L7:
  22:App/Src/WioE5.cpp ****             rxReady = true;
  83              		.loc 1 22 13 is_stmt 1 view .LVU16
  22:App/Src/WioE5.cpp ****             rxReady = true;
  84              		.loc 1 22 22 is_stmt 0 view .LVU17
  85 002c 094B     		ldr	r3, .L8+8
  86 002e 1988     		ldrh	r1, [r3]
  22:App/Src/WioE5.cpp ****             rxReady = true;
  87              		.loc 1 22 31 view .LVU18
  88 0030 0022     		movs	r2, #0
  89 0032 0948     		ldr	r0, .L8+12
  90              	.LVL5:
  22:App/Src/WioE5.cpp ****             rxReady = true;
  91              		.loc 1 22 31 view .LVU19
  92 0034 4254     		strb	r2, [r0, r1]
  23:App/Src/WioE5.cpp ****             rxIndex = 0;
  93              		.loc 1 23 13 is_stmt 1 view .LVU20
  23:App/Src/WioE5.cpp ****             rxIndex = 0;
  94              		.loc 1 23 21 is_stmt 0 view .LVU21
  95 0036 0949     		ldr	r1, .L8+16
  96 0038 0120     		movs	r0, #1
  97 003a 0870     		strb	r0, [r1]
  24:App/Src/WioE5.cpp ****         }
  98              		.loc 1 24 13 is_stmt 1 view .LVU22
  24:App/Src/WioE5.cpp ****         }
  99              		.loc 1 24 21 is_stmt 0 view .LVU23
 100 003c 1A80     		strh	r2, [r3]	@ movhi
 101              	.L4:
  34:App/Src/WioE5.cpp ****     }
 102              		.loc 1 34 9 is_stmt 1 view .LVU24
  34:App/Src/WioE5.cpp ****     }
 103              		.loc 1 34 28 is_stmt 0 view .LVU25
 104 003e 0122     		movs	r2, #1
 105 0040 0349     		ldr	r1, .L8+4
 106 0042 0748     		ldr	r0, .L8+20
 107 0044 FFF7FEFF 		bl	HAL_UART_Receive_IT
 108              	.LVL6:
 109              		.loc 1 36 1 view .LVU26
 110 0048 DFE7     		b	.L1
 111              	.L9:
 112 004a 00BF     		.align	2
 113              	.L8:
 114 004c 00440040 		.word	1073759232
 115 0050 00000000 		.word	.LANCHOR0
 116 0054 00000000 		.word	.LANCHOR1
ARM GAS  /tmp/ccFECPfA.s 			page 4


 117 0058 00000000 		.word	.LANCHOR2
 118 005c 00000000 		.word	.LANCHOR3
 119 0060 00000000 		.word	huart2
 120              		.cfi_endproc
 121              	.LFE1758:
 122              		.fnend
 124              		.section	.rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St
 125              		.align	2
 126              	.LC0:
 127 0000 62617369 		.ascii	"basic_string::_M_construct null not valid\000"
 127      635F7374 
 127      72696E67 
 127      3A3A5F4D 
 127      5F636F6E 
 128              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20
 129              		.align	1
 130              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_i
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu fpv4-sp-d16
 136              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator
 137              		.fnstart
 138              	.LVL7:
 139              	.LFB2118:
 140              		.file 2 "/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc"
   1:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
   3:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** //
   5:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  11:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  16:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  20:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  25:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  30:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** //
  31:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
ARM GAS  /tmp/ccFECPfA.s 			page 5


  32:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** //
  33:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  34:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  39:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  42:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  44:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  46:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** {
  48:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  50:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  52:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  56:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     void
  58:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     {
  61:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	return;
  63:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  64:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  66:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
  69:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
  71:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
  79:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
  81:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		return;
  86:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
  87:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
ARM GAS  /tmp/ccFECPfA.s 			page 6


  89:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		return;
  94:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
  95:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
  96:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	else
  97:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
  98:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 105:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       else
 106:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	{
 107:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    {
 110:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    }
 115:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  else
 116:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    {
 117:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
 118:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    }
 122:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	}
 124:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 125:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     }
 129:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 130:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     {
 135:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 140:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	{
 145:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
ARM GAS  /tmp/ccFECPfA.s 			page 7


 146:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	}
 150:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 151:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     }
 155:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 156:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       void
 163:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       {
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 170:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 172:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 175:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 176:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__try
 177:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 178:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
 180:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		  {
 182:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		  }
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
 193:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 196:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 199:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 200:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       }
 202:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
ARM GAS  /tmp/ccFECPfA.s 			page 8


 203:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       void
 206:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 141              		.loc 2 206 7 is_stmt 1 view -0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 8
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              		.loc 2 206 7 is_stmt 0 view .LVU28
 146 0000 70B5     		push	{r4, r5, r6, lr}
 147              		.save {r4, r5, r6, lr}
 148              	.LCFI1:
 149              		.cfi_def_cfa_offset 16
 150              		.cfi_offset 4, -16
 151              		.cfi_offset 5, -12
 152              		.cfi_offset 6, -8
 153              		.cfi_offset 14, -4
 154              		.pad #8
 155 0002 82B0     		sub	sp, sp, #8
 156              	.LCFI2:
 157              		.cfi_def_cfa_offset 24
 158 0004 0546     		mov	r5, r0
 207:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       {
 210:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 159              		.loc 2 211 42 view .LVU29
 160 0006 0E46     		mov	r6, r1
 161 0008 61B1     		cbz	r1, .L16
 162              	.L11:
 163              	.LVL8:
 164              	.LBB973:
 165              	.LBI973:
 166              		.file 3 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
ARM GAS  /tmp/ccFECPfA.s 			page 9


  23:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** /** @file bits/stl_iterator_base_funcs.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  55:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
  56:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  57:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  */
  58:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  60:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  61:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  62:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #pragma GCC system_header
  63:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  64:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #include <debug/assertions.h>
  66:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  67:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** {
  69:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  71:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  72:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration for the overloads of __distance.
  73:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_iterator;
  74:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_const_iterator;
  75:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
  76:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
  78:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  79:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
ARM GAS  /tmp/ccFECPfA.s 			page 10


  80:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  81:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****                input_iterator_tag)
  82:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     {
  83:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
  84:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  85:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  86:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  87:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
  88:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	{
  89:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	  ++__first;
  90:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	  ++__n;
  91:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	}
  92:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       return __n;
  93:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
  94:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  95:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  96:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  97:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_RandomAccessIterator>::difference_type
  98:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  99:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 100:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     {
 101:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
 102:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
 103:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       return __last - __first;
 105:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 106:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
 107:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #if _GLIBCXX_USE_CXX11_ABI
 108:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration because of the qualified call in distance.
 109:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 110:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 111:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
 112:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 113:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 114:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
 115:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 116:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 117:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 118:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 119:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 120:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #endif
 121:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
 122:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   /**
 123:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @brief A generalization of pointer arithmetic.
 124:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @param  __first  An input iterator.
 125:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @param  __last  An input iterator.
 126:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @return  The distance between them.
 127:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *
 128:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  Returns @c n such that __first + n == __last.  This requires
 129:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  that @p __last must be reachable from @p __first.  Note that @c
 130:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  n may be negative.
 131:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *
 132:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  For random access iterators, this uses their @c + and @c - operations
 133:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  and are constant time.  For other %iterator classes they are linear time.
 134:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   */
 135:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
 136:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX17_CONSTEXPR
ARM GAS  /tmp/ccFECPfA.s 			page 11


 137:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
 138:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     distance(_InputIterator __first, _InputIterator __last)
 167              		.loc 3 138 5 is_stmt 1 view .LVU30
 168              	.LBB974:
 169              	.LBB975:
 170              	.LBI975:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 171              		.loc 3 98 5 view .LVU31
 172              	.LBB976:
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 173              		.loc 3 104 23 is_stmt 0 view .LVU32
 174 000a 941B     		subs	r4, r2, r6
 175              	.LVL9:
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 176              		.loc 3 104 23 view .LVU33
 177              	.LBE976:
 178              	.LBE975:
 179              	.LBE974:
 180              	.LBE973:
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 213:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 215:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 181              		.loc 2 215 12 view .LVU34
 182 000c 0194     		str	r4, [sp, #4]
 216:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 217:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 183              		.loc 2 217 2 view .LVU35
 184 000e 0F2C     		cmp	r4, #15
 185 0010 0DD8     		bhi	.L17
 186              	.LVL10:
 187              	.L12:
 188              	.LBB977:
 189              	.LBI977:
 190              		.file 4 "/usr/include/newlib/c++/10.3.1/bits/basic_string.h"
   1:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
ARM GAS  /tmp/ccFECPfA.s 			page 12


  23:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
  31:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
  33:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  34:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  37:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  39:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  43:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  46:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  47:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # include <string_view>
  49:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  50:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
  52:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** {
  53:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  54:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  55:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef __cpp_lib_is_constant_evaluated
  56:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Support P1032R1 in C++20 (but not P0980R1 yet).
  57:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # define __cpp_lib_constexpr_string 201811L
  58:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #elif __cplusplus >= 201703L
  59:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Support P0426R1 changes to char_traits in C++17.
  60:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # define __cpp_lib_constexpr_string 201611L
  61:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #elif __cplusplus > 201703L
  62:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  63:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  64:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  65:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  66:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****   /**
  67:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  68:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  69:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  70:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @ingroup strings
  71:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @ingroup sequences
  72:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  73:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  74:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  75:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *                   char_traits<_CharT>.
  76:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  77:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  78:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  79:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
ARM GAS  /tmp/ccFECPfA.s 			page 13


  80:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  81:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  82:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  83:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    */
  84:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  85:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     class basic_string
  86:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     {
  87:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  88:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  89:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  90:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Types:
  92:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
  93:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef _Traits					traits_type;
  94:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  95:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  96:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  97:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  98:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  99:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
 101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
 103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
 104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 							const_iterator;
 105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
 109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     protected:
 112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef iterator __const_iterator;
 115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
 120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _Res>;
 130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static __sv_type
 133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return __svt; }
 135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
ARM GAS  /tmp/ccFECPfA.s 			page 14


 137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // allows to add an internal constructor that does not
 138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // participate in overload resolution when a string_view
 139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // is provided.
 140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       struct __sv_wrapper
 141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__sv_type _M_sv;
 144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *          wrapper.
 149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       explicit
 153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type		_M_string_length;
 176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       union
 180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_data(pointer __p)
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_length(size_type __length)
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
ARM GAS  /tmp/ccFECPfA.s 			page 15


 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_data() const
 191              		.loc 4 194 7 is_stmt 1 view .LVU36
 192              	.LBB978:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 193              		.loc 4 195 28 is_stmt 0 view .LVU37
 194 0012 2868     		ldr	r0, [r5]
 195              	.LVL11:
 196              		.loc 4 195 28 view .LVU38
 197              	.LBE978:
 198              	.LBE977:
 199              	.LBB979:
 200              	.LBI979:
 196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_local_data()
 199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return pointer(_M_local_buf);
 204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_pointer
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_local_data() const
 209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_set_length(size_type __n)
 223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_length(__n);
 225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       bool
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_is_local() const
 230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Create & Destroy
 233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_create(size_type&, size_type);
 235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_dispose()
 238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (!_M_is_local())
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
ARM GAS  /tmp/ccFECPfA.s 			page 16


 241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 std::__false_type)
 253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
 254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Integer>
 261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__req, __c); }
 268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
 273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         }
 276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     std::input_iterator_tag);
 282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _FwdIterator>
 286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     std::forward_iterator_tag);
 289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       allocator_type&
 294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_get_allocator()
 295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const allocator_type&
ARM GAS  /tmp/ccFECPfA.s 			page 17


 298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_get_allocator() const
 299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
 302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 313:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
 314:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 315:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 316:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 317:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 318:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 319:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 320:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__pos > this->size())
 321:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 322:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 323:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __s, __pos, this->size());
 324:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return __pos;
 325:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 326:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 327:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 328:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 329:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 330:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 331:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 332:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 333:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 334:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 335:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 336:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 337:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 338:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 339:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 340:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 341:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 342:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 344:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       bool
 345:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 346:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 347:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 348:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 349:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 350:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 351:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 352:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // traits_type::copy/move/assign.
 353:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
ARM GAS  /tmp/ccFECPfA.s 			page 18


 355:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 357:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 358:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 359:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 360:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 361:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 362:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 363:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 364:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 365:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 366:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 367:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 368:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 369:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 370:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 371:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 372:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 373:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 374:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 375:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 376:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 377:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 378:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 379:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 380:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 381:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 382:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _Iterator>
 383:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         static void
 384:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 385:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
 386:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 387:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 388:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 389:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 390:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 391:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 392:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 393:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 394:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 395:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 396:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 397:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 398:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 399:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 400:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 401:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 402:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 403:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 404:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 201              		.loc 4 404 7 is_stmt 1 view .LVU39
 202              	.LBB980:
 203              	.LBI980:
 354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 204              		.loc 4 354 7 view .LVU40
 205              	.LBB981:
 356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
ARM GAS  /tmp/ccFECPfA.s 			page 19


 206              		.loc 4 356 2 is_stmt 0 view .LVU41
 207 0014 012C     		cmp	r4, #1
 208 0016 13D0     		beq	.L18
 209              	.LVL12:
 210              	.LBB982:
 211              	.LBI982:
 212              		.file 5 "/usr/include/newlib/c++/10.3.1/bits/char_traits.h"
   1:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** //
  31:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** //
  33:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  34:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  37:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  39:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus > 201703L
  43:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # include <compare>
  44:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
  45:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  46:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  47:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  48:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
  49:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  50:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
ARM GAS  /tmp/ccFECPfA.s 			page 20


  51:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** {
  52:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  53:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  54:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
  55:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  56:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
  57:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  58:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  59:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  60:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  61:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  62:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  63:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  64:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
  65:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct _Char_types
  66:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
  67:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef unsigned long   int_type;
  68:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef std::streampos  pos_type;
  69:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef std::streamoff  off_type;
  70:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  71:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     };
  72:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  73:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  74:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
  75:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  76:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
  77:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  78:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  79:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
  80:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  81:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  82:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  83:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  84:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
  85:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  86:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  87:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  88:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    */
  89:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
  90:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct char_traits
  91:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
  92:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef _CharT                                    char_type;
  93:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  94:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  95:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  96:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  97:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cpp_lib_three_way_comparison
  98:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       using comparison_category = std::strong_ordering;
  99:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 100:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 101:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
 102:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
 103:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 104:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 105:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 106:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 107:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
ARM GAS  /tmp/ccFECPfA.s 			page 21


 108:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 109:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 110:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 111:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 < __c2; }
 112:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 113:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 114:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 115:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 116:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 117:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       length(const char_type* __s);
 118:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 120:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 121:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 122:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 123:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 124:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 125:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 126:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 127:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 128:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 129:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 130:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 132:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       to_char_type(const int_type& __c)
 133:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 134:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 135:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 136:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       to_int_type(const char_type& __c)
 137:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 138:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 139:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 140:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 141:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 142:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 143:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 144:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eof()
 145:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 146:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 148:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       not_eof(const int_type& __c)
 149:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 150:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     };
 151:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 152:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 153:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 154:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 155:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 156:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 157:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 158:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 159:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return -1;
 160:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 161:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return 1;
 162:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return 0;
 163:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 164:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 22


 165:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 166:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 167:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 168:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     length(const char_type* __p)
 169:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 170:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       std::size_t __i = 0;
 171:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 172:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****         ++__i;
 173:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __i;
 174:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 175:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 176:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 177:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 178:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 179:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 180:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 181:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 182:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****         if (eq(__s[__i], __a))
 183:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****           return __s + __i;
 184:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return 0;
 185:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 186:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 187:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 188:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 189:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 190:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 191:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 192:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 193:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       if (__n == 0)
 194:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return __s1;
 195:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 196:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       if (std::is_constant_evaluated())
 197:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	{
 198:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  if (__s1 > __s2 && __s1 < __s2 + __n)
 199:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    std::copy_backward(__s2, __s2 + __n, __s1 + __n);
 200:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  else
 201:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    std::copy(__s2, __s2 + __n, __s1);
 202:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 203:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	}
 204:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 205:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 206:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 207:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 208:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 209:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 210:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 211:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 212:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 213:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 214:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 215:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 216:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 217:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __s1;
 218:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 219:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 220:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 221:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccFECPfA.s 			page 23


 222:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 223:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 224:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 225:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 226:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 227:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 228:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __s;
 229:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 230:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 231:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 232:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** } // namespace
 233:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 234:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 235:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** {
 236:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 237:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 238:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 239:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 241:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Unofficial macro indicating P1032R1 support in C++20
 242:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # define __cpp_lib_constexpr_char_traits 201811L
 243:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #else
 244:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Unofficial macro indicating P0426R1 support in C++17
 245:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # define __cpp_lib_constexpr_char_traits 201611L
 246:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 247:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 248:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
 249:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 250:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  string are known at compile time.
 251:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @param  __s  The string.
 252:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 253:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 254:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    */
 255:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 256:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX_ALWAYS_INLINE constexpr bool
 257:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 258:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 259:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 260:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       (void) __s;
 261:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // In constexpr contexts all strings should be constant.
 262:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 263:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #else
 264:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 265:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	__s++;
 266:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 267:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 268:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 269:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 270:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
 271:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 272:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  known at compile time.
 273:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @param  __a  The character array.
 274:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @param  __n  Number of characters.
 275:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 276:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 277:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    */
 278:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
ARM GAS  /tmp/ccFECPfA.s 			page 24


 279:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX_ALWAYS_INLINE constexpr bool
 280:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 281:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 282:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 283:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       (void) __a;
 284:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       (void) __n;
 285:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // In constexpr contexts all character arrays should be constant.
 286:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 287:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #else
 288:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       size_t __i = 0;
 289:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       while (__i < __n && __builtin_constant_p(__a[__i]))
 290:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	__i++;
 291:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __i == __n;
 292:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 293:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 294:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 295:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 296:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   // 21.1
 297:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
 298:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 299:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 300:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 301:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 302:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 303:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 304:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 305:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 306:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 307:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
 308:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   */
 309:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<class _CharT>
 310:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 311:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     { };
 312:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 313:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 314:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 315:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<>
 316:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct char_traits<char>
 317:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 318:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef char              char_type;
 319:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef int               int_type;
 320:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef streampos         pos_type;
 321:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef streamoff         off_type;
 322:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef mbstate_t         state_type;
 323:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cpp_lib_three_way_comparison
 324:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       using comparison_category = strong_ordering;
 325:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 326:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 327:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 330:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 331:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 332:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 333:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 334:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 335:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
ARM GAS  /tmp/ccFECPfA.s 			page 25


 336:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 337:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 338:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	// LWG 467.
 339:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 340:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 341:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 342:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 344:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 345:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 346:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 347:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return 0;
 348:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 349:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 350:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 351:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 352:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  {
 353:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    for (size_t __i = 0; __i < __n; ++__i)
 354:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	      if (lt(__s1[__i], __s2[__i]))
 355:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 		return -1;
 356:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	      else if (lt(__s2[__i], __s1[__i]))
 357:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 		return 1;
 358:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    return 0;
 359:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  }
 360:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 361:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 362:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 363:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 364:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
 365:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       length(const char_type* __s)
 366:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 367:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 368:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__constant_string_p(__s))
 369:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 370:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return __builtin_strlen(__s);
 372:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 373:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 374:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR const char_type*
 375:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       find(const char_type* __s, size_t __n, const char_type& __a)
 376:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 377:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 378:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return 0;
 379:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 380:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 381:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __builtin_constant_p(__a)
 382:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s, __n))
 383:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 384:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 385:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 386:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 387:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 389:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, size_t __n)
 390:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 391:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 392:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
ARM GAS  /tmp/ccFECPfA.s 			page 26


 393:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 394:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (std::is_constant_evaluated())
 395:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
 396:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 397:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 398:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 399:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 400:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 401:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, size_t __n)
 213              		.loc 5 401 7 is_stmt 1 view .LVU42
 214              	.LBB983:
 402:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 403:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 215              		.loc 5 403 2 view .LVU43
 216 0018 A4B1     		cbz	r4, .L14
 404:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 405:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 406:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (std::is_constant_evaluated())
 407:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
 408:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 409:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 217              		.loc 5 409 2 view .LVU44
 218              		.loc 5 409 49 is_stmt 0 view .LVU45
 219 001a 2246     		mov	r2, r4
 220 001c 3146     		mov	r1, r6
 221 001e FFF7FEFF 		bl	memcpy
 222              	.LVL13:
 223              		.loc 5 409 66 view .LVU46
 224 0022 0FE0     		b	.L14
 225              	.LVL14:
 226              	.L16:
 227              		.loc 5 409 66 view .LVU47
 228              	.LBE983:
 229              	.LBE982:
 230              	.LBE981:
 231              	.LBE980:
 232              	.LBE979:
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 233              		.loc 2 211 42 discriminator 1 view .LVU48
 234 0024 9142     		cmp	r1, r2
 235 0026 F0D0     		beq	.L11
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 236              		.loc 2 212 28 view .LVU49
 237 0028 0A48     		ldr	r0, .L19
 238              	.LVL15:
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 239              		.loc 2 212 28 view .LVU50
 240 002a FFF7FEFF 		bl	_ZSt19__throw_logic_errorPKc
 241              	.LVL16:
 242              	.L17:
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 243              		.loc 2 219 13 view .LVU51
 244 002e 0022     		movs	r2, #0
 245              	.LVL17:
 246              		.loc 2 219 13 view .LVU52
 247 0030 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccFECPfA.s 			page 27


 248              	.LVL18:
 249              		.loc 2 219 13 view .LVU53
 250 0032 2846     		mov	r0, r5
 251              	.LVL19:
 252              		.loc 2 219 13 view .LVU54
 253 0034 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
 254              	.LVL20:
 255              	.LBB988:
 256              	.LBI988:
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 257              		.loc 4 186 7 is_stmt 1 view .LVU55
 258              	.LBB989:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 259              		.loc 4 187 26 is_stmt 0 view .LVU56
 260 0038 2860     		str	r0, [r5]
 261              	.LVL21:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 262              		.loc 4 187 26 view .LVU57
 263              	.LBE989:
 264              	.LBE988:
 220:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 265              		.loc 2 220 17 view .LVU58
 266 003a 019B     		ldr	r3, [sp, #4]
 267              	.LVL22:
 268              	.LBB990:
 269              	.LBI990:
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 270              		.loc 4 218 7 is_stmt 1 view .LVU59
 271              	.LBB991:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 272              		.loc 4 219 31 is_stmt 0 view .LVU60
 273 003c AB60     		str	r3, [r5, #8]
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 274              		.loc 4 219 45 view .LVU61
 275 003e E8E7     		b	.L12
 276              	.LVL23:
 277              	.L18:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 278              		.loc 4 219 45 view .LVU62
 279              	.LBE991:
 280              	.LBE990:
 281              	.LBB992:
 282              	.LBB987:
 283              	.LBB986:
 284              	.LBB984:
 285              	.LBI984:
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 286              		.loc 5 328 7 is_stmt 1 view .LVU63
 287              	.LBB985:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 288              		.loc 5 329 9 view .LVU64
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 289              		.loc 5 329 16 is_stmt 0 view .LVU65
 290 0040 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 291              		.loc 5 329 14 view .LVU66
 292 0042 0370     		strb	r3, [r0]
ARM GAS  /tmp/ccFECPfA.s 			page 28


 293              	.LVL24:
 294              	.L14:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 295              		.loc 5 329 14 view .LVU67
 296              	.LBE985:
 297              	.LBE984:
 298              	.LBE986:
 299              	.LBE987:
 300              	.LBE992:
 221:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 223:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__try
 225:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 226:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__catch(...)
 227:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 228:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_dispose();
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 230:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 231:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 232:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	_M_set_length(__dnew);
 301              		.loc 2 232 15 view .LVU68
 302 0044 019B     		ldr	r3, [sp, #4]
 303              	.LVL25:
 304              	.LBB993:
 305              	.LBI993:
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 306              		.loc 4 222 7 is_stmt 1 view .LVU69
 307              	.LBB994:
 308              	.LBB995:
 309              	.LBI995:
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 310              		.loc 4 190 7 view .LVU70
 311              	.LBB996:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 312              		.loc 4 191 26 is_stmt 0 view .LVU71
 313 0046 6B60     		str	r3, [r5, #4]
 314              	.LVL26:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 315              		.loc 4 191 26 view .LVU72
 316              	.LBE996:
 317              	.LBE995:
 318              	.LBB997:
 319              	.LBI997:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 320              		.loc 4 194 7 is_stmt 1 view .LVU73
 321              	.LBB998:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 322              		.loc 4 195 28 is_stmt 0 view .LVU74
 323 0048 2A68     		ldr	r2, [r5]
 324              	.LVL27:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 325              		.loc 4 195 28 view .LVU75
 326              	.LBE998:
 327              	.LBE997:
 328              	.LBB999:
 329              	.LBI999:
ARM GAS  /tmp/ccFECPfA.s 			page 29


 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 330              		.loc 5 328 7 is_stmt 1 view .LVU76
 331              	.LBB1000:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 332              		.loc 5 329 9 view .LVU77
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 333              		.loc 5 329 14 is_stmt 0 view .LVU78
 334 004a 0021     		movs	r1, #0
 335 004c D154     		strb	r1, [r2, r3]
 336              	.LVL28:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 337              		.loc 5 329 14 view .LVU79
 338              	.LBE1000:
 339              	.LBE999:
 340              	.LBE994:
 341              	.LBE993:
 233:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       }
 342              		.loc 2 233 7 view .LVU80
 343 004e 02B0     		add	sp, sp, #8
 344              	.LCFI3:
 345              		.cfi_def_cfa_offset 16
 346              		@ sp needed
 347 0050 70BD     		pop	{r4, r5, r6, pc}
 348              	.LVL29:
 349              	.L20:
 350              		.loc 2 233 7 view .LVU81
 351 0052 00BF     		.align	2
 352              	.L19:
 353 0054 00000000 		.word	.LC0
 354              		.cfi_endproc
 355              	.LFE2118:
 356              		.fnend
 358              		.section	.text._ZNSt12_Vector_baseIcSaIcEED2Ev,"axG",%progbits,_ZNSt12_Vector_baseIcSaIcEED5Ev,com
 359              		.align	1
 360              		.weak	_ZNSt12_Vector_baseIcSaIcEED2Ev
 361              		.syntax unified
 362              		.thumb
 363              		.thumb_func
 364              		.fpu fpv4-sp-d16
 366              	_ZNSt12_Vector_baseIcSaIcEED2Ev:
 367              		.fnstart
 368              	.LVL30:
 369              	.LFB2189:
 370              		.file 6 "/usr/include/newlib/c++/10.3.1/bits/stl_vector.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  /tmp/ccFECPfA.s 			page 30


  14:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  65:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # include <compare>
  67:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  68:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 31


  71:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** extern "C" void
  73:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  const void*, const void*);
  75:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  76:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** {
  79:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  82:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     struct _Vector_base
  85:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     {
  86:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        	pointer;
  90:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
  93:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_start;
  94:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_finish;
  95:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 100:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 101:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 107:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 109:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 111:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 112:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 115:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 116:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 117:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 119:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 126:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
 127:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 32


 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Vector_impl
 129:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 131:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 135:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 139:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 146:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 150:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 151:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 154:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 155:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 156:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  struct _Asan
 159:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 160:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 163:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 168:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Grow
 169:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 170:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 173:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  };
 174:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 175:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename _Up>
 177:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 179:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 182:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
ARM GAS  /tmp/ccFECPfA.s 			page 33


 185:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 187:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
 190:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 191:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 192:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 195:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 196:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 200:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 202:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
 205:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 206:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Reinit
 208:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 209:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      {
 211:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      }
 214:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 215:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ~_Reinit()
 216:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      {
 217:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      }
 222:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 223:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 225:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 226:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 229:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 230:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 231:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Grow
 233:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 234:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 238:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 34


 242:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 246:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    private:
 247:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      size_type _M_n;
 249:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 250:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  };
 251:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 252:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
 271:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 272:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 273:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 275:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 279:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 283:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       allocator_type
 284:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 287:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base() = default;
 289:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 290:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base() { }
 291:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 292:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 293:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 296:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n)
ARM GAS  /tmp/ccFECPfA.s 			page 35


 299:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl()
 300:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 302:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 305:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 307:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 310:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 315:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 317:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 318:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else
 321:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 322:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
 325:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 326:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 327:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 328:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 331:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 332:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 371              		.loc 6 333 7 is_stmt 1 view -0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		.loc 6 333 7 is_stmt 0 view .LVU83
 376 0000 10B5     		push	{r4, lr}
 377              	.LCFI4:
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 4, -8
 380              		.cfi_offset 14, -4
 381 0002 0446     		mov	r4, r0
 382              	.LBB1012:
 334:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 383              		.loc 6 335 15 view .LVU84
 384 0004 0068     		ldr	r0, [r0]
 385              	.LVL31:
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 386              		.loc 6 336 17 view .LVU85
 387 0006 A168     		ldr	r1, [r4, #8]
 388              		.loc 6 336 35 view .LVU86
 389 0008 091A     		subs	r1, r1, r0
ARM GAS  /tmp/ccFECPfA.s 			page 36


 390              	.LVL32:
 391              	.LBB1013:
 392              	.LBI1013:
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 338:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 339:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 340:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 342:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       pointer
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 345:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 348:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 349:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 393              		.loc 6 350 7 is_stmt 1 view .LVU87
 394              	.LBB1014:
 351:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 352:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__p)
 395              		.loc 6 353 2 is_stmt 0 view .LVU88
 396 000a 08B1     		cbz	r0, .L22
 397              	.LVL33:
 398              	.LBB1015:
 399              	.LBI1015:
 400              		.file 7 "/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h"
   1:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 37


  30:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  33:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #include <bits/stl_construct.h>
  34:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  35:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  36:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <bits/allocator.h>
  37:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <bits/ptr_traits.h>
  38:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <ext/numeric_traits.h>
  39:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
  40:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  41:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** {
  43:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  45:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  48:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   struct __allocator_traits_base
  49:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   {
  50:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  51:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  52:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  53:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  54:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  55:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  56:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  57:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  58:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   protected:
  59:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  60:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  61:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  62:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  63:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  64:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  65:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  66:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  67:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  68:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  69:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  70:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  71:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  72:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  73:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  74:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  75:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   };
  76:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  78:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using __alloc_rebind
  79:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  80:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  81:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /**
  82:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  83:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * @ingroup allocators
  84:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   */
  85:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
  86:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
ARM GAS  /tmp/ccFECPfA.s 			page 38


  87:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
  88:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator type
  89:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  90:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocated type
  91:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  92:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  93:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
  94:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  95:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
  96:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  97:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
  98:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  99:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 100:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     private:
 101:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 102:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 103:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Ptr
 104:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 105:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 106:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 107:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 109:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 110:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 111:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 112:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 113:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 114:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 115:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 116:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Diff
 117:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 118:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 120:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 121:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 122:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 123:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 124:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 125:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 126:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 127:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 128:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 129:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 130:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     public:
 132:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 133:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 134:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 135:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 136:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 137:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 138:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 139:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 141:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 142:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 143:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
ARM GAS  /tmp/ccFECPfA.s 			page 39


 144:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 145:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 146:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 147:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 148:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 149:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 150:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 151:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 152:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 153:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 154:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 155:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 156:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 157:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 158:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 159:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 160:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 161:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 162:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 163:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 164:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 165:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's size type
 166:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 167:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 168:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 169:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 170:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 171:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 172:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 173:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 174:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 175:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 176:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 177:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 178:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 179:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 180:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 181:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 182:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 183:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 184:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 185:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 186:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 187:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 188:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 189:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 190:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 191:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 192:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 193:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 194:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 195:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 196:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap
 197:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 198:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 200:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
ARM GAS  /tmp/ccFECPfA.s 			page 40


 201:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 202:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 203:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 204:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 205:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using is_always_equal
 206:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 207:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 208:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 209:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 210:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 211:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 212:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 213:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     private:
 214:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 215:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 216:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 217:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 218:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 219:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 220:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 221:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr pointer
 222:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 223:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 224:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 225:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 226:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct __construct_helper
 227:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 228:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 229:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 230:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 231:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    static true_type __test(int);
 232:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 233:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  template<typename>
 234:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    static false_type __test(...);
 235:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 236:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 237:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 238:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 239:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 240:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using __has_construct
 241:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 242:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 243:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 245:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 246:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 247:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 248:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 249:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 251:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 252:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 253:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 254:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 255:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 256:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 257:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
ARM GAS  /tmp/ccFECPfA.s 			page 41


 258:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 259:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 260:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 261:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 262:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 263:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 264:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 265:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 266:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 267:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 268:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 269:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 270:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 271:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 272:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 273:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 274:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 275:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 276:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 277:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 278:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 279:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 280:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 281:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 282:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 283:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr size_type
 284:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 285:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 286:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 287:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 288:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 289:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    / sizeof(value_type);
 290:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 291:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 292:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 293:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 294:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 295:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 296:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 297:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 298:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 299:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr _Alloc2
 300:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 301:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a; }
 302:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     public:
 304:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 305:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 306:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 307:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 308:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 309:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 310:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 311:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 312:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 313:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 314:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
ARM GAS  /tmp/ccFECPfA.s 			page 42


 315:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 316:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 317:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 318:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 319:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 320:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 321:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 322:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 323:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 324:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 325:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 326:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 327:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 328:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 329:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 330:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 331:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 332:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 333:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 334:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 335:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 336:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 337:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 338:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 339:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 340:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 341:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 342:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 344:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 345:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 346:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 347:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 348:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 349:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 350:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 351:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 352:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  arguments @a __args...
 353:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 354:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 355:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 356:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 357:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 358:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 359:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 360:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 361:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 362:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 363:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 364:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 365:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 366:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 367:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 368:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 369:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 370:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 371:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
ARM GAS  /tmp/ccFECPfA.s 			page 43


 372:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 373:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 374:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 375:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 376:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 377:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 378:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 379:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 380:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 381:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 382:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 383:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 384:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 385:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 386:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 387:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 389:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 390:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 391:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 392:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 393:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 394:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 395:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 396:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 397:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 398:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 399:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     };
 400:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 401:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus > 201703L
 402:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 403:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 404:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 405:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 406:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 407:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 408:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 409:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator type
 410:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 411:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 412:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocated type
 413:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using value_type = _Tp;
 414:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 415:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's pointer type.
 416:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using pointer = _Tp*;
 417:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 418:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 419:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 420:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 421:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 422:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using void_pointer = void*;
 423:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 424:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 425:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 426:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 427:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's difference type
 428:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
ARM GAS  /tmp/ccFECPfA.s 			page 44


 429:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 430:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's size type
 431:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using size_type = std::size_t;
 432:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 433:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 434:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 435:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 437:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 438:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 440:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 441:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 442:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 443:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using is_always_equal = true_type;
 444:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 445:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 446:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 447:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 448:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 449:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 450:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 451:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 452:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 453:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 454:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 455:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 456:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 457:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 458:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 460:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 461:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 462:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 463:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 464:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 465:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 466:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 467:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 468:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 469:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 470:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 471:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 472:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 473:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 474:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       {
 475:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 476:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.allocate(__n, __hint);
 477:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 478:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.allocate(__n);
 479:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 480:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       }
 481:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 482:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 483:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 484:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 485:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
ARM GAS  /tmp/ccFECPfA.s 			page 45


 486:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 487:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 488:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 489:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 490:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 401              		.loc 7 491 7 is_stmt 1 view .LVU89
 402              	.LBB1016:
 403              	.LBB1017:
 404              	.LBI1017:
 405              		.file 8 "/usr/include/newlib/c++/10.3.1/ext/new_allocator.h"
   1:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
   3:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** //
   5:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  11:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  16:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  20:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  25:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****  */
  28:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  29:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  32:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <new>
  34:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  39:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  40:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** {
  42:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  44:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****   /**
  45:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  46:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @ingroup allocators
ARM GAS  /tmp/ccFECPfA.s 			page 46


  47:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *
  48:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *
  52:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    */
  54:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     {
  57:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     public:
  58:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  67:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  71:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  72:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  77:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  78:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  81:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  84:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  85:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  88:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  91:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       pointer
  92:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  95:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       const_pointer
  96:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  99:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 100:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 102:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
ARM GAS  /tmp/ccFECPfA.s 			page 47


 104:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 105:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
 106:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
 107:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 // 3308. std::allocator<void>().allocate(n)
 108:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 109:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 110:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (__n > this->_M_max_size())
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 113:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 114:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 115:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 116:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  {
 117:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 118:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 119:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  }
 120:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 122:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 123:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 124:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 125:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       void
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       deallocate(_Tp* __p, size_type __t)
 406              		.loc 8 126 7 view .LVU90
 407              	.LBB1018:
 127:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 128:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 129:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 130:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  {
 131:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    ::operator delete(__p,
 132:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** # if __cpp_sized_deallocation
 133:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			      __t * sizeof(_Tp),
 134:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** # endif
 135:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 136:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    return;
 137:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  }
 138:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	::operator delete(__p
 408              		.loc 8 139 19 is_stmt 0 view .LVU91
 409 000c FFF7FEFF 		bl	_ZdlPvj
 410              	.LVL34:
 411              	.L22:
 412              		.loc 8 139 19 view .LVU92
 413              	.LBE1018:
 414              	.LBE1017:
 415              	.LBE1016:
 416              	.LBE1015:
 417              	.LBE1014:
 418              	.LBE1013:
 419              	.LBB1019:
 420              	.LBI1019:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 421              		.loc 6 128 14 is_stmt 1 view .LVU93
 422              	.LBB1020:
 423              	.LBI1020:
 424              		.file 9 "/usr/include/newlib/c++/10.3.1/bits/allocator.h"
   1:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Allocators -*- C++ -*-
ARM GAS  /tmp/ccFECPfA.s 			page 48


   2:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *
  29:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  */
  37:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  38:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  */
  42:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  43:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  46:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <type_traits>
  50:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
  51:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  52:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  54:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** {
  56:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  58:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /**
ARM GAS  /tmp/ccFECPfA.s 			page 49


  59:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @{
  61:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    */
  62:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  63:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // but then it would have a non-trivial default ctor and dtor, which
  65:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // would be an ABI change. So C++20 still uses the allocator<void> explicit
  66:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // specialization, with the historical ABI properties, but with the same
  67:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // members that are present in the primary template.
  68:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if ! _GLIBCXX_INLINE_VERSION
  70:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /// allocator<void> specialization.
  71:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   template<>
  72:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     class allocator<void>
  73:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     {
  74:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     public:
  75:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef size_t      size_type;
  77:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  78:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus <= 201703L
  80:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // These were removed for C++20.
  81:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef void*       pointer;
  82:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const void* const_pointer;
  83:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  84:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
  85:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	struct rebind
  86:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
  88:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  89:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  90:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  93:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  94:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
  95:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  96:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus > 201703L
  97:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator() = default;
  98:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  99:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up>
 100:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	constexpr
 101:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 102:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 103:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 104:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // No deallocate member because it would be undefined to call it
 105:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // with any pointer which wasn't obtained from allocate.
 106:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 107:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #else // ! C++20
 108:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // allocator_traits<allocator<void>> uses construct and destroy.
 109:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up, typename... _Args>
 110:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	void
 111:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 112:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 113:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 114:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 115:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up>
ARM GAS  /tmp/ccFECPfA.s 			page 50


 116:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	void
 117:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	destroy(_Up* __p)
 118:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 119:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ __p->~_Up(); }
 120:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // C++17
 121:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // C++11
 122:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     };
 123:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // ! _GLIBCXX_INLINE_VERSION
 124:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 125:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /**
 126:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 127:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *
 128:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 129:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  for further details.
 130:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *
 131:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 132:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    */
 133:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   template<typename _Tp>
 134:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 135:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     {
 136:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     public:
 137:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp        value_type;
 138:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef size_t     size_type;
 139:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 140:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 141:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus <= 201703L
 142:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // These were removed for C++20.
 143:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp*       pointer;
 144:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const _Tp* const_pointer;
 145:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp&       reference;
 146:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const _Tp& const_reference;
 147:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 148:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
 149:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	struct rebind
 150:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 151:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 152:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 153:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 154:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 155:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 156:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 157:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 158:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
 159:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 160:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 161:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 162:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 163:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 165:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 168:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 169:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 170:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 171:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // Avoid implicit deprecation.
 172:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
ARM GAS  /tmp/ccFECPfA.s 			page 51


 173:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 174:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 175:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
 176:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 178:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 179:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 180:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       constexpr
 181:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 182:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 425              		.loc 9 182 7 view .LVU94
 426              	.LBB1021:
 427              	.LBI1021:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 428              		.loc 8 89 7 view .LVU95
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 429              		.loc 8 89 7 is_stmt 0 view .LVU96
 430              	.LBE1021:
 431              	.LBE1020:
 432              	.LBE1019:
 433              	.LBE1012:
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 434              		.loc 6 337 7 view .LVU97
 435 0010 2046     		mov	r0, r4
 436 0012 10BD     		pop	{r4, pc}
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 437              		.loc 6 337 7 view .LVU98
 438              		.cfi_endproc
 439              	.LFE2189:
 440              		.cantunwind
 441              		.fnend
 443              		.weak	_ZNSt12_Vector_baseIcSaIcEED1Ev
 444              		.thumb_set _ZNSt12_Vector_baseIcSaIcEED1Ev,_ZNSt12_Vector_baseIcSaIcEED2Ev
 445              		.section	.rodata._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_.
 446              		.align	2
 447              	.LC1:
 448 0000 63616E6E 		.ascii	"cannot create std::vector larger than max_size()\000"
 448      6F742063 
 448      72656174 
 448      65207374 
 448      643A3A76 
 449              		.section	.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,"a
 450              		.align	1
 451              		.weak	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 452              		.syntax unified
 453              		.thumb
 454              		.thumb_func
 455              		.fpu fpv4-sp-d16
 457              	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:
 458              		.fnstart
 459              	.LVL35:
 460              	.LFB2005:
 461              		.file 10 "Peripheral/Inc/serial_printf.hpp"
   1:Peripheral/Inc/serial_printf.hpp **** #pragma once
   2:Peripheral/Inc/serial_printf.hpp **** #include <string>
   3:Peripheral/Inc/serial_printf.hpp **** #include <vector>
   4:Peripheral/Inc/serial_printf.hpp **** #include <cstdio>
ARM GAS  /tmp/ccFECPfA.s 			page 52


   5:Peripheral/Inc/serial_printf.hpp **** #include "usart.h"
   6:Peripheral/Inc/serial_printf.hpp **** 
   7:Peripheral/Inc/serial_printf.hpp **** #define LOG_INFO "[INFO]  "
   8:Peripheral/Inc/serial_printf.hpp **** #define LOG_DEBUG "[DEBUG] "
   9:Peripheral/Inc/serial_printf.hpp **** #define LOG_ERROR "[ERROR] "
  10:Peripheral/Inc/serial_printf.hpp **** #define LOG_WARNING "[WARN]  "
  11:Peripheral/Inc/serial_printf.hpp **** 
  12:Peripheral/Inc/serial_printf.hpp **** #define DEBUG_MODE true
  13:Peripheral/Inc/serial_printf.hpp **** 
  14:Peripheral/Inc/serial_printf.hpp **** template <typename... Args>
  15:Peripheral/Inc/serial_printf.hpp **** void serial_printf(const std::string &fmt, Args... args)
 462              		.loc 10 15 6 is_stmt 1 view -0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 16
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466              		.loc 10 15 6 is_stmt 0 view .LVU100
 467 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 468              		.save {r4, r5, r6, r7, lr}
 469              	.LCFI5:
 470              		.cfi_def_cfa_offset 20
 471              		.cfi_offset 4, -20
 472              		.cfi_offset 5, -16
 473              		.cfi_offset 6, -12
 474              		.cfi_offset 7, -8
 475              		.cfi_offset 14, -4
 476              		.pad #20
 477 0002 85B0     		sub	sp, sp, #20
 478              	.LCFI6:
 479              		.cfi_def_cfa_offset 40
 480 0004 0746     		mov	r7, r0
 481              	.LVL36:
 482              	.LBB1104:
 483              	.LBI1104:
 405:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 406:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 407:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 408:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static int
 409:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 410:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 411:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 412:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 413:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 414:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 415:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 416:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 417:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 418:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return int(__d);
 419:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 420:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 421:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 422:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_assign(const basic_string&);
 423:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 424:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 425:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 426:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		size_type __len2);
 427:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 428:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
ARM GAS  /tmp/ccFECPfA.s 			page 53


 429:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 430:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 431:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
 432:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Construct/copy/destroy:
 433:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 434:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 435:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 437:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 438:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 439:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string()
 440:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 441:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 442:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 443:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 444:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 445:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 446:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 447:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       explicit
 448:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 449:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 450:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 451:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 452:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 453:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 454:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 455:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 456:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str)
 457:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 458:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 459:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 460:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 461:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 462:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 463:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 464:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 465:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 466:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 467:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 468:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 469:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 470:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 471:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 472:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 473:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 474:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 475:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 476:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 477:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 478:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 479:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 480:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 481:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 482:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 483:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 484:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 485:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   size_type __n)
ARM GAS  /tmp/ccFECPfA.s 			page 54


 486:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 487:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 488:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 489:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 490:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 491:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 492:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 493:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 494:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 495:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 496:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 497:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 498:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 499:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 500:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 501:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 502:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 503:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 504:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start
 505:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 506:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 507:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 508:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 509:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 510:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 511:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source character %array.
 512:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 513:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 514:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 515:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 516:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  has no special meaning.
 517:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 518:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 519:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 520:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 521:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 522:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 523:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 524:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 525:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source C string.
 526:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 527:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 528:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 529:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 530:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 531:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 532:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 534:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 535:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __end = __s ? __s + traits_type::length(__s)
 537:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  // We just need a non-null pointer here to get an exception:
 538:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__s, __end, random_access_iterator_tag());
 540:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 541:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccFECPfA.s 			page 55


 543:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 544:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters.
 545:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Character to use.
 546:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 547:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 548:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 549:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 550:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 551:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 552:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 553:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 554:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 555:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__n, __c); }
 556:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 557:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 558:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 559:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Move construct string.
 560:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 561:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 562:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 563:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 564:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        **/
 565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 566:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 567:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 569:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 570:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 571:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 572:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 573:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 574:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 575:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 577:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 578:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 579:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 580:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 581:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 582:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_length(__str.length());
 583:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 584:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str._M_set_length(0);
 585:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 586:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 587:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 588:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 589:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 590:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 591:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 592:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 593:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 594:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 595:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 596:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 597:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 598:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 599:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 56


 600:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 601:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 602:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 603:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 604:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 605:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 606:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 607:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 608:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 609:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 610:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 611:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 612:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 613:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 614:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 615:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 616:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 617:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 618:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 619:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 620:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 621:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 622:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 623:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 624:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
 625:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 626:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 627:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 628:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __beg  Start of range.
 629:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __end  End of range.
 630:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 631:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 632:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 633:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InputIterator,
 634:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 635:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 636:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InputIterator>
 637:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 638:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 639:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 640:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 641:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 642:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 643:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 644:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 645:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 646:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 647:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 648:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 649:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 650:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 651:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 652:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 653:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 654:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 655:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 656:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccFECPfA.s 			page 57


 657:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 658:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 659:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 660:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 661:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 662:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	explicit
 663:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 664:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 665:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
 666:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 667:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 668:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 669:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ~basic_string()
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 672:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 673:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 674:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 675:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 676:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 677:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 678:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(const basic_string& __str)
 679:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 680:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->assign(__str);
 681:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 682:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 683:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 684:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 685:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
 686:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 687:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 688:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(const _CharT* __s)
 689:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->assign(__s); }
 690:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 691:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 692:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 693:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Source character.
 694:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 695:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 696:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  (*this)[0] == @a c.
 697:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 698:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 699:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(_CharT __c)
 700:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 701:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->assign(1, __c);
 702:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 703:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 704:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 705:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 706:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 707:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 708:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 709:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 710:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 711:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 712:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        **/
 713:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  /tmp/ccFECPfA.s 			page 58


 714:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 715:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 716:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(basic_string&& __str)
 717:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 718:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 719:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 720:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 721:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 722:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 723:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 724:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 725:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(_M_local_data());
 726:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_set_length(0);
 727:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 728:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 729:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 730:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 731:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 732:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 733:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it.
 734:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (__str.size())
 735:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 736:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_set_length(__str.size());
 737:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 738:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 739:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 740:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 741:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 742:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
 743:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    pointer __data = nullptr;
 744:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    size_type __capacity;
 745:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (!_M_is_local())
 746:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
 747:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 748:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
 749:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    // __str can reuse our existing storage.
 750:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    __data = _M_data();
 751:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 752:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
 753:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		else // __str can't use it, so free it.
 754:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 755:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
 756:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 757:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 758:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 759:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 760:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (__data)
 761:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
 762:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		__str._M_data(__data);
 763:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 764:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
 765:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    else
 766:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 767:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 768:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else // Need to do a deep copy
 769:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  assign(__str);
 770:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str.clear();
ARM GAS  /tmp/ccFECPfA.s 			page 59


 771:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 772:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 773:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 774:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 775:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 776:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 777:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 778:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 779:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 780:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 781:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 782:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 783:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 784:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
 785:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 786:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 787:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 788:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 789:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 790:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 791:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****      template<typename _Tp>
 792:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 793:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        operator=(const _Tp& __svt)
 794:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        { return this->assign(__svt); }
 795:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 796:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 797:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 798:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return A string_view.
 799:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 800:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator __sv_type() const noexcept
 801:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 802:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
 803:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 804:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Iterators:
 805:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 806:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 807:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the %string.
 808:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 809:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
 810:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 811:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return iterator(_M_data()); }
 812:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 813:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 814:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 815:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 816:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 817:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 818:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 819:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 820:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 821:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 822:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 823:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 824:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 825:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
 826:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 827:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
ARM GAS  /tmp/ccFECPfA.s 			page 60


 828:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 829:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 830:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 831:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last character in the %string.
 832:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 833:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 834:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 835:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 836:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 837:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 838:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 839:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 840:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  order.
 841:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 842:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reverse_iterator
 843:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 844:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 845:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 846:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 847:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 848:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 849:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  reverse element order.
 850:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 851:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 852:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 853:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 854:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 855:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 856:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
 857:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 858:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element order.
 859:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 860:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reverse_iterator
 861:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 862:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 863:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 864:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 865:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 866:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 867:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 868:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 869:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 870:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 871:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 872:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 873:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 874:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 875:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 876:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 877:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 878:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 879:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       cbegin() const noexcept
 880:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 881:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 882:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 883:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 884:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last character in the %string.
ARM GAS  /tmp/ccFECPfA.s 			page 61


 885:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 886:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 887:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       cend() const noexcept
 888:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 889:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 890:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 891:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 892:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 893:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  reverse element order.
 894:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 895:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 896:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       crbegin() const noexcept
 897:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 898:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 899:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 900:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 901:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 902:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 903:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 904:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 905:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       crend() const noexcept
 906:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 907:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 908:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 909:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
 910:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Capacity:
 911:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 912:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  null-termination.
 913:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 914:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 915:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 916:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 917:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 918:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  null-termination.
 919:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 922:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 923:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 924:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 925:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 926:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 927:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 928:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 929:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 930:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 931:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 932:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 933:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 934:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 935:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 936:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 937:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 938:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 939:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 940:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 941:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccFECPfA.s 			page 62


 942:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 943:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 944:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 945:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 946:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 947:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 948:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 949:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  setting them to 0.
 950:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 951:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 952:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       resize(size_type __n)
 953:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 954:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 955:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 956:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 957:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 958:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       shrink_to_fit() noexcept
 959:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 960:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_exceptions
 961:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (capacity() > size())
 962:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 963:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    try
 964:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      { reserve(0); }
 965:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    catch(...)
 966:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      { }
 967:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 968:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 969:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 970:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 971:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 972:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 973:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 974:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  before needing to allocate more memory.
 975:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 976:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 977:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 978:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 979:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 980:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 981:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 982:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 983:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 984:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 985:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *          characters.
 986:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 987:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 988:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 989:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 990:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 991:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 992:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
 993:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 994:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 995:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 996:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 997:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 998:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  data.
ARM GAS  /tmp/ccFECPfA.s 			page 63


 999:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1000:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1001:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
1002:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1003:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1004:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Erases the string, making it empty.
1005:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1006:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1007:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1008:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
1009:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1010:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1011:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1012:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  <code>*this == ""</code>.
1013:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1014:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
1015:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1016:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->size() == 0; }
1017:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1018:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Element access:
1019:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1020:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1021:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1022:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1023:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1024:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1025:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1026:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1027:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  see at().)
1028:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1029:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1030:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1031:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1032:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1033:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1034:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1035:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1036:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1037:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1038:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1039:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1040:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1041:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1042:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1043:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1044:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  see at().)
1045:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1046:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1047:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator[](size_type __pos)
1048:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1049:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1050:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// and in C++11 mode.
1051:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1052:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1053:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1054:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1055:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
ARM GAS  /tmp/ccFECPfA.s 			page 64


1056:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1057:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1058:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1059:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1060:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1061:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1062:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1063:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1064:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1065:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1066:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1067:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1068:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       at(size_type __n) const
1069:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1070:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n >= this->size())
1071:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1072:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1073:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1074:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __n, this->size());
1075:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1076:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1077:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1078:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1079:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1080:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1081:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1082:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1083:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1084:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1085:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1086:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1087:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1088:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1089:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       at(size_type __n)
1090:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1091:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n >= size())
1092:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1093:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1094:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1095:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __n, this->size());
1096:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1097:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1098:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1099:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       front() noexcept
1106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](0);
1109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
ARM GAS  /tmp/ccFECPfA.s 			page 65


1113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       front() const noexcept
1117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](0);
1120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       back() noexcept
1128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last element of the %string.
1136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       back() const noexcept
1139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Modifiers:
1146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(const basic_string& __str)
1153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__str); }
1154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(const _CharT* __s)
1162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__s); }
1163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a character.
1166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to append.
1167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
ARM GAS  /tmp/ccFECPfA.s 			page 66


1170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(_CharT __c)
1171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->push_back(__c);
1173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ return this->append(__svt); }
1197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const basic_string& __str)
1206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a substring.
1210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  remainder of @a __str is appended.
1220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data()
1224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 67


1227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C substring.
1229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const _CharT* __s)
1248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append multiple characters.
1257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters.
1280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
ARM GAS  /tmp/ccFECPfA.s 			page 68


1284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
1293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         append(const _Tp& __svt)
1305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
1306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           __sv_type __sv = __svt;
1307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         }
1309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
1313:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1314:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1315:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1316:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1317:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1318:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1319:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1320:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1321:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1322:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_append(__sv.data()
1323:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1324:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1325:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1326:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1327:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1328:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1329:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a single character.
1330:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to append.
1331:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1332:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1333:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       push_back(_CharT __c)
1334:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1335:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __size = this->size();
1336:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1337:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1338:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1339:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1340:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
ARM GAS  /tmp/ccFECPfA.s 			page 69


1341:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1342:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1343:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1344:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1345:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1346:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1347:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1348:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const basic_string& __str)
1349:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1350:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1351:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
1352:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
1353:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
1354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
1355:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
1356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
1357:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
1358:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
1359:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
1360:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1361:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_data(_M_local_data());
1362:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_set_length(0);
1363:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
1364:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		else
1365:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
1366:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    const auto __len = __str.size();
1367:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
1368:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
1369:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
1370:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1371:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_data(__ptr);
1372:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_capacity(__len);
1373:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_set_length(__len);
1374:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
1375:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
1376:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
1377:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
1378:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1379:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_assign(__str);
1380:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1381:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1382:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1383:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1384:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1385:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1386:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1387:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1388:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1389:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1390:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1391:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1392:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1393:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(basic_string&& __str)
1394:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1395:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1396:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1397:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
ARM GAS  /tmp/ccFECPfA.s 			page 70


1398:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this = std::move(__str);
1399:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1400:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1401:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1402:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1403:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1404:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to use.
1405:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1406:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1407:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1408:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1409:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1410:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1411:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1412:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1413:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1414:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1415:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1416:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1417:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1418:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1419:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1420:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1421:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1422:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1423:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1424:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1425:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1426:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1427:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1428:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1429:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1430:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1431:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1432:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1433:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1434:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1435:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1436:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1437:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1438:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1439:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1440:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1441:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1442:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1443:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1444:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1445:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  function returns.
1446:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1447:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1448:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const _CharT* __s)
1449:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1450:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1451:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1452:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  traits_type::length(__s));
1453:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1454:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 71


1455:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1456:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1457:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1458:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1459:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1460:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1461:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1462:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character @a __c.
1463:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1464:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1465:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1466:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1467:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1468:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1469:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1470:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1471:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1472:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1473:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1474:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1475:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1476:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1477:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1478:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1479:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1480:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1481:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1482:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
1483:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
1484:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1485:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1486:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1487:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1488:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1489:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1490:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1491:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1492:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1493:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1494:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1495:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1496:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1497:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1498:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1499:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1500:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1502:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1503:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1504:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1505:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt)
1506:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1507:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1508:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1509:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1510:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1511:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccFECPfA.s 			page 72


1512:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1513:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1514:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1515:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1516:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1517:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1518:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1519:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1520:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1521:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1522:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1523:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1524:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
1525:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1526:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1527:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1528:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1529:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1530:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1531:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1532:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1534:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *              insert at.
1535:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1537:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1538:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1540:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1541:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1542:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1543:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1544:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1545:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1546:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1547:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1548:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1549:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1550:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1551:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1552:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1553:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1554:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1555:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1556:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1557:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1558:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1559:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1560:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1561:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1562:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1563:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1564:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1566:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1567:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
ARM GAS  /tmp/ccFECPfA.s 			page 73


1569:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1570:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1571:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1572:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1573:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1574:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1575:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1577:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *              insert at.
1578:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1579:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1580:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1581:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1582:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1583:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1584:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1585:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1586:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1587:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1588:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1589:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1590:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	iterator
1591:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1592:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
1593:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1594:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1595:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1596:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1597:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1598:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1599:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1600:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1601:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1602:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1603:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1604:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1605:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1606:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1607:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1608:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1609:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1610:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1611:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1612:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
1613:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1614:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1615:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1616:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1617:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1618:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1619:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1620:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1621:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1622:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1623:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1624:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1625:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
ARM GAS  /tmp/ccFECPfA.s 			page 74


1626:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1627:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1628:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1629:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // See PR libstdc++/83328
1630:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1631:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1632:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1633:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1634:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1635:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1636:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1637:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1638:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1639:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1640:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert value of a string.
1641:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1 Position in string to insert at.
1642:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to insert.
1643:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1644:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1645:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1646:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1647:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1648:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1649:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1650:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1651:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1652:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1653:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1654:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
1655:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1656:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1657:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a substring.
1658:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1659:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str   The string to insert.
1660:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1661:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1662:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1663:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1664:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1665:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1666:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1667:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1668:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1669:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1672:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1673:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1674:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1675:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1676:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1677:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1678:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1679:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1680:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1681:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1682:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a C substring.
ARM GAS  /tmp/ccFECPfA.s 			page 75


1683:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1684:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1685:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1686:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1687:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1688:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1689:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1690:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1691:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1692:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1693:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1694:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1695:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1696:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1697:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1698:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1699:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1700:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1701:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1702:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a C string.
1703:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1704:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1705:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1706:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1707:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1708:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1709:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1710:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1711:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
1712:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1713:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1714:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
1715:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1716:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1717:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1718:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1719:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1720:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1721:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     traits_type::length(__s));
1722:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1723:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1724:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1725:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1726:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1727:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1728:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1729:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1730:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1731:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1732:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1733:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1734:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1735:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1736:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1737:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1738:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1739:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
ARM GAS  /tmp/ccFECPfA.s 			page 76


1740:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1741:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1742:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1743:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1744:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1745:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1746:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert one character.
1747:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1748:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1749:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1750:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1751:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1752:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1753:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1754:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1755:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1756:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1757:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1758:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1759:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1760:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1761:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1762:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1763:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1764:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1765:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1766:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1767:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1768:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1769:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1770:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1771:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1772:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1773:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1774:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1775:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1776:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1777:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1778:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1779:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1780:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1781:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1782:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1783:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1784:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1785:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
1786:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1787:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1788:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1789:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1790:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1791:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1792:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1793:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1794:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1795:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1796:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0),
ARM GAS  /tmp/ccFECPfA.s 			page 77


1797:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
1798:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1799:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1800:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1801:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1802:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1803:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1804:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove characters.
1805:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1806:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1807:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1808:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1809:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1810:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1811:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1812:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1813:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1814:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1815:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1816:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1817:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1818:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1819:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1820:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1821:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1822:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == npos)
1823:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1824:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (__n != 0)
1825:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
1826:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1827:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1828:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1829:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1830:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove one character.
1831:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1832:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1833:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1834:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1835:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1836:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1837:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1838:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(__const_iterator __position)
1839:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1840:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1841:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __position < end());
1842:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1843:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1844:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1845:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1846:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1847:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1848:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1849:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1850:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1851:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1852:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1853:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
ARM GAS  /tmp/ccFECPfA.s 			page 78


1854:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1855:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1856:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1857:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1858:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1859:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1860:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __last <= end());
1861:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         const size_type __pos = __first - begin();
1862:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__last == end())
1863:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1864:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
1865:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1866:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1867:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1868:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1869:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1870:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1871:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove the last character.
1872:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1873:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The string must be non-empty.
1874:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1875:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1876:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pop_back() noexcept
1877:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1878:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1879:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1880:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1881:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1882:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1883:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1884:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1885:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1886:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1887:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1888:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1889:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1890:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1891:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1892:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1893:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1894:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1895:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1896:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1897:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1898:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  error is thrown.
1899:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1900:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1901:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1902:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1903:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1904:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1905:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1906:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1907:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1908:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1909:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1910:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
ARM GAS  /tmp/ccFECPfA.s 			page 79


1911:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1912:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1913:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __str.size().
1914:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1915:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1916:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1917:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1918:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1919:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1922:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1923:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1924:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1925:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1926:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1927:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1928:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1929:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1930:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1931:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1932:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1933:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1934:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1935:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1936:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1937:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1938:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1939:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1940:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1941:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1942:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1943:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1944:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1945:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1946:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1947:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1948:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1949:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      size_type __n2)
1950:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1951:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1952:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1953:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1954:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1955:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1956:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1957:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1958:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1959:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1960:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1961:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1962:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1963:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1964:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1965:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1966:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1967:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
ARM GAS  /tmp/ccFECPfA.s 			page 80


1968:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1969:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1970:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1971:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1972:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1973:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1974:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1975:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1976:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1977:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1978:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1979:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1980:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1981:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1982:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1983:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1984:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
1985:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1986:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1987:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1988:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1989:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1990:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1991:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1992:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1993:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1994:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1995:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1996:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1997:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1998:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1999:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
2000:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2001:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2002:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
2003:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2004:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2005:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String value to insert.
2006:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2007:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2008:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2009:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2010:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
2011:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
2012:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
2013:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2014:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2015:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2016:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const basic_string& __str)
2017:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2018:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2019:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2020:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2021:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2022:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2023:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2024:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
ARM GAS  /tmp/ccFECPfA.s 			page 81


2025:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2026:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2027:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2028:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2029:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2030:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2031:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2032:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2033:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2034:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2035:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2036:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2037:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2038:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2039:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2040:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2041:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2042:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2043:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2044:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2045:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2046:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2047:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2048:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2049:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2050:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2051:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2052:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2053:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2054:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2055:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2056:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2057:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2058:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2059:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2060:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2061:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2062:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2063:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2064:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2065:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2066:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2067:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2068:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
2069:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2070:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2071:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2072:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2073:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2074:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2075:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2076:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2077:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2078:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2079:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      _CharT __c)
2080:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2081:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
ARM GAS  /tmp/ccFECPfA.s 			page 82


2082:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2083:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2084:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2085:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2086:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2087:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2088:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2089:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2090:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2091:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2092:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2093:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2094:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2095:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2096:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2097:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2098:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2099:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
2103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
2105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
2108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 					   std::__false_type());
2113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
2115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
2116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
2119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
2120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
2121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
2124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
2131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
ARM GAS  /tmp/ccFECPfA.s 			page 83


2139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
ARM GAS  /tmp/ccFECPfA.s 			page 84


2196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
2197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
2230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
2231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           to replace at.
2239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           for the replace.
2241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
2252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 85


2253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
2254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _Integer>
2255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string&
2256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
2261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string&
2262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    __false_type);
2265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     _CharT __c);
2269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 const size_type __len2);
2273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
2278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to copy value into.
2282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Number of characters actually copied
2285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.
2290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
2292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  String to swap with.
2297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  time.
2300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
2302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // String operations:
2305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  happen.
ARM GAS  /tmp/ccFECPfA.s 			page 86


2310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const _CharT*
2312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
 484              		.loc 4 2312 7 is_stmt 1 view .LVU101
 485              	.LBB1105:
 486              	.LBI1105:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 487              		.loc 4 194 7 view .LVU102
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 488              		.loc 4 194 7 is_stmt 0 view .LVU103
 489              	.LBE1105:
 490              	.LBE1104:
  16:Peripheral/Inc/serial_printf.hpp **** {
  17:Peripheral/Inc/serial_printf.hpp ****     // フォーマットされた文字列の長さを取得
  18:Peripheral/Inc/serial_printf.hpp ****     size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args...);
 491              		.loc 10 18 31 view .LVU104
 492 0006 0268     		ldr	r2, [r0]
 493 0008 0021     		movs	r1, #0
 494 000a 0846     		mov	r0, r1
 495              	.LVL37:
 496              		.loc 10 18 31 view .LVU105
 497 000c FFF7FEFF 		bl	snprintf
 498              	.LVL38:
 499              	.LBB1106:
 500              	.LBI1106:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 501              		.loc 9 164 7 is_stmt 1 view .LVU106
 502              	.LBB1107:
 503              	.LBI1107:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 504              		.loc 8 79 7 view .LVU107
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 505              		.loc 8 79 7 is_stmt 0 view .LVU108
 506              	.LBE1107:
 507              	.LBE1106:
 508              	.LBB1108:
 509              	.LBI1108:
 354:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 356:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 357:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
 358:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 365:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     };
 366:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 367:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   /**
 368:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  individual elements in any order.
 370:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 371:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @ingroup sequences
 372:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 373:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
ARM GAS  /tmp/ccFECPfA.s 			page 87


 374:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 376:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 382:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   */
 388:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     {
 391:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Concept requirements.
 393:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 397:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 399:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 400:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 407:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 408:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 409:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 413:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 414:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator;
 422:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 428:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     private:
 429:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
ARM GAS  /tmp/ccFECPfA.s 			page 88


 431:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 433:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 438:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
 440:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return false; }
 442:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 443:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
 444:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_use_relocate()
 445:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 446:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 451:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 452:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 453:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 456:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 458:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 459:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 460:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return __result; }
 463:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 464:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 465:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 468:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 471:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif // C++11
 472:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 473:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
 474:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 479:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 480:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 483:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 484:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 486:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector() = default;
ARM GAS  /tmp/ccFECPfA.s 			page 89


 488:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 489:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector() { }
 490:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 491:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 492:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 493:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 495:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 496:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 497:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__a) { }
 499:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 500:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 501:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 502:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 505:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 506:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructed elements.
 508:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 509:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 510              		.loc 6 510 7 is_stmt 1 view .LVU109
 511              	.LBB1109:
 512              	.LBB1110:
 513              	.LBI1110:
 511:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 513:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 514:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 515:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 518:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 519:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 520:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 522:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 527:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 528:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 531:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 532:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 533:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 535:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 536:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
ARM GAS  /tmp/ccFECPfA.s 			page 90


 541:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 543:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 546:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @a __x  will not be copied
 548:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 550:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 553:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const vector& __x)
 554:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__x.size(),
 555:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 557:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 558:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 560:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 561:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 562:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 563:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 564:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 565:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 566:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 567:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  moved instance.
 569:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector.
 571:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 572:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 573:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 574:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 575:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 577:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 578:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 579:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 581:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 582:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 583:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 584:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     private:
 585:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 588:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 589:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__m)
 591:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 592:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (!__rv.empty())
 595:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 596:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
ARM GAS  /tmp/ccFECPfA.s 			page 91


 598:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 600:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 601:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    __rv.clear();
 602:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
 603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 604:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 607:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       noexcept( noexcept(
 609:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 613:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 614:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 615:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 617:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 618:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 619:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer_list @a __l.
 621:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 622:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 625:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__a)
 628:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 629:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 631:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 632:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 633:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 634:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 635:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 637:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 638:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 639:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 640:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [first,last).
 642:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 643:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 650:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 651:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 652:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
ARM GAS  /tmp/ccFECPfA.s 			page 92


 655:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Base(__a)
 656:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 657:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 659:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 660:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 661:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 662:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Base(__a)
 665:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 666:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 670:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 671:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 672:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 673:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  responsibility.
 677:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 679:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 680:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 682:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 684:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 685:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 686:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 689:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @a __x will not be copied.
 691:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 692:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 694:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 695:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(const vector& __x);
 696:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 697:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 698:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 699:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 702:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  if the allocators permit it).
 704:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 706:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 708:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 709:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 711:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	constexpr bool __move_storage =
ARM GAS  /tmp/ccFECPfA.s 			page 93


 712:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *this;
 716:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 717:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 718:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 719:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 721:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 722:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 724:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 725:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 728:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 729:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 730:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 732:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 734:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *this;
 735:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 736:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 737:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 738:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 739:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 743:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the number of elements assigned.
 747:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 748:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 749:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 752:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 753:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 755:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 756:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 757:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  range [__first,__last).
 759:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 760:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 763:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 764:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 765:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 766:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 768:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
ARM GAS  /tmp/ccFECPfA.s 			page 94


 769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 771:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 772:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 773:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 775:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 779:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 780:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 781:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 782:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 783:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 785:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 786:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 788:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 789:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 792:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 793:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 794:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 796:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 798:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 799:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 800:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 801:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::get_allocator;
 803:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 804:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // iterators
 805:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 806:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 809:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 810:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
 811:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 814:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 815:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 818:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 819:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 820:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 823:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 824:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
ARM GAS  /tmp/ccFECPfA.s 			page 95


 826:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 827:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 828:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
 829:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 832:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 833:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  ordinary element order.
 836:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 837:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 838:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 841:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 842:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 845:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 846:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reverse_iterator
 847:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 849:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 850:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 851:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  reverse element order.
 854:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 855:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 856:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 859:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 860:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  in reverse element order.
 863:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 864:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reverse_iterator
 865:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 867:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 868:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 869:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is done in reverse element order.
 872:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 873:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 874:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 876:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 877:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 878:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 879:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 882:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
ARM GAS  /tmp/ccFECPfA.s 			page 96


 883:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 884:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       cbegin() const noexcept
 885:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 887:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 888:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  ordinary element order.
 891:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 892:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 893:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       cend() const noexcept
 894:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 896:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 897:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  reverse element order.
 900:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 901:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 902:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       crbegin() const noexcept
 903:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 905:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 906:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is done in reverse element order.
 909:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 910:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 911:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       crend() const noexcept
 912:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 914:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 915:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.2] capacity
 916:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 918:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 921:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 923:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 926:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 927:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 928:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 929:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 931:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 933:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  default constructed elements are appended.
 935:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 936:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 937:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size)
 938:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 939:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
ARM GAS  /tmp/ccFECPfA.s 			page 97


 940:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 942:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 944:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 945:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 946:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 949:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 950:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  given data.
 955:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 956:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 957:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 959:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 960:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 962:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 964:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 965:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 966:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 969:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 970:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  given data.
 975:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 976:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 977:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 979:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 980:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 982:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 984:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 985:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 986:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 987:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 989:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       shrink_to_fit()
 990:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 991:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 992:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 993:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 994:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 996:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
ARM GAS  /tmp/ccFECPfA.s 			page 98


 997:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 998:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1002:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1003:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  equal end().)
1005:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1006:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return begin() == end(); }
1009:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1010:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1011:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1012:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *          elements.
1013:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1014:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1016:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  thrown.
1020:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1021:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  and copying of %vector data.
1026:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1027:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1028:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reserve(size_type __n);
1029:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1030:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // element access
1031:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1032:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1035:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1036:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1037:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  see at().)
1041:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1042:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1044:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1045:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1047:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1048:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1049:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1050:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1053:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
ARM GAS  /tmp/ccFECPfA.s 			page 99


1054:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1055:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  see at().)
1059:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1060:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1061:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1063:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1066:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1067:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
1068:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Safety check used only from at().
1069:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1070:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1071:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1072:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__n >= this->size())
1073:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				       "(which is %zu)"),
1076:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				   __n, this->size());
1077:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1078:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1079:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
1080:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1081:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1083:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1084:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1085:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1087:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1091:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1092:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       at(size_type __n)
1093:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1094:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_check(__n);
1095:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (*this)[__n];
1096:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1097:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1098:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1099:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1102:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1104:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1105:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1109:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1110:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       at(size_type __n) const
ARM GAS  /tmp/ccFECPfA.s 			page 100


1111:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1112:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_check(__n);
1113:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (*this)[__n];
1114:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1115:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1116:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1117:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1119:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1120:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1121:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1123:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *begin();
1125:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1126:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1127:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1130:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1131:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1132:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1134:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *begin();
1136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1137:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1138:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1139:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
1140:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1141:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1142:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1143:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1145:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(end() - 1);
1147:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1148:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1149:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1150:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  last element of the %vector.
1152:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1153:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1154:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1156:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(end() - 1);
1158:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1159:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1160:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1161:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // data access
1163:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1164:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1167:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Tp*
ARM GAS  /tmp/ccFECPfA.s 			page 101


1168:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1171:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const _Tp*
1172:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1175:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1176:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1177:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1179:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1180:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  available.
1185:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1186:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1187:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       push_back(const value_type& __x)
1188:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1189:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1190:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
1191:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1193:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				     __x);
1194:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
1195:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1197:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else
1198:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1199:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1200:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1201:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1202:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1203:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       push_back(value_type&& __x)
1204:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1206:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1207:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus > 201402L
1208:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	reference
1209:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1210:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1211:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1212:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1214:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1215:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1216:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Removes last element.
1217:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1218:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1220:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  called.
1223:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1224:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
ARM GAS  /tmp/ccFECPfA.s 			page 102


1225:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1227:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1229:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1232:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1233:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1234:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1235:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __args  Arguments.
1238:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1240:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1241:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  std::list.
1245:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1246:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1247:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1248:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1251:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1252:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1254:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1256:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1257:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1258:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1261:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1262:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1263:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1264:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1265:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1266:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1271:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1272:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1275:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1277:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1279:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1280:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1281:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/ccFECPfA.s 			page 103


1282:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1287:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1291:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1292:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1293:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1296:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1297:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1300:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1301:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1302:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  specified by @a position.
1304:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1305:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1308:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1309:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1310:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1311:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1312:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1313:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1315:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return begin() + __offset;
1316:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1317:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1318:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1319:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1320:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1321:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1327:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1328:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1329:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1330:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1332:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1334:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
ARM GAS  /tmp/ccFECPfA.s 			page 104


1339:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return begin() + __offset;
1340:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1341:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1342:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1348:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1349:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1351:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1354:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1355:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1356:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1360:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1365:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1366:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1368:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1369:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1370:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a pos.
1371:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1372:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1375:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1376:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
1377:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1378:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1379:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       _InputIterator __last)
1381:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1382:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			     __first, __last, __false_type());
1385:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  return begin() + __offset;
1386:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1387:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1388:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1389:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1392:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1393:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1394:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1395:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
ARM GAS  /tmp/ccFECPfA.s 			page 105


1396:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a pos.
1397:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1398:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1401:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1402:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1403:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1404:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1405:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       _InputIterator __last)
1406:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1407:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1411:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1412:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1413:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1414:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1415:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1418:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  shorten the %vector by one.
1420:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1421:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1425:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1427:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1428:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1429:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1430:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(const_iterator __position)
1431:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1433:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(iterator __position)
1434:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(__position); }
1435:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1436:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1437:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1438:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1439:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *                  erased.
1442:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *           prior to erasing (or end()).
1444:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1445:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will erase the elements in the range
1446:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1448:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
ARM GAS  /tmp/ccFECPfA.s 			page 106


1453:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1455:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1456:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1457:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1459:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const auto __beg = begin();
1460:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1461:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1462:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1463:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1464:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1465:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1466:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1467:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1468:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1469:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1472:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1477:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1479:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1480:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1482:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1483:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1484:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1486:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1490:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1491:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1492:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the user's responsibility.
1496:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1497:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1498:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1501:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
1502:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1503:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1506:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1507:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer
1508:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
ARM GAS  /tmp/ccFECPfA.s 			page 107


1510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1511:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __try
1513:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
1514:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1516:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      return __result;
1517:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
1518:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __catch(...)
1519:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
1520:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      __throw_exception_again;
1522:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
1523:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1524:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1525:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1526:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal constructor functions follow.
1527:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1528:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1530:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1531:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1534:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1535:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1537:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1539:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1541:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1543:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1544:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1546:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1547:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			       __false_type)
1549:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1550:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
1552:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1553:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1554:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1555:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1556:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1557:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1558:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    std::input_iterator_tag)
1560:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1561:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __try {
1562:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1564:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      emplace_back(*__first);
1565:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1566:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      push_back(*__first);
ARM GAS  /tmp/ccFECPfA.s 			page 108


1567:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1568:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  } __catch(...) {
1569:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    clear();
1570:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    __throw_exception_again;
1571:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1572:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1573:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1574:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1575:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1576:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1577:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    std::forward_iterator_tag)
1579:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1580:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_start
1582:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1585:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					this->_M_impl._M_start,
1587:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1588:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1589:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1590:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1592:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1593:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1595:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1596:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1598:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1599:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1600:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1601:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1602:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1604:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1608:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1609:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1610:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1611:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // assignment work for the range versions.
1613:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1614:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1616:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1617:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1619:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1620:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1623:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
ARM GAS  /tmp/ccFECPfA.s 			page 109


1624:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1625:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1626:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   __false_type)
1628:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1630:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1631:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1632:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1633:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      std::input_iterator_tag);
1635:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1636:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1637:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1638:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1639:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1641:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1642:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // to be the same thing.
1644:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1645:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1647:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal insert functions follow.
1648:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1649:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1651:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1653:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1654:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1655:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   __true_type)
1657:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1659:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1661:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1662:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1663:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1665:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1667:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1668:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1669:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1670:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1671:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1672:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1674:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1675:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1676:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1677:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 110


1681:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // the same thing.
1683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1684:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1686:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1687:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by resize(n).
1688:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1689:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_default_append(size_type __n);
1690:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1691:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       bool
1692:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_shrink_to_fit();
1693:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1694:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1695:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1696:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,x)
1697:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1698:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1700:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1701:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1703:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Temporary_value
1706:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1707:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename... _Args>
1708:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  explicit
1709:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1710:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
1711:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1712:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1714:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1715:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	~_Temporary_value()
1716:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1718:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	value_type&
1719:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1720:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1721:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       private:
1722:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Tp*
1723:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1725:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector* _M_this;
1726:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
1728:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1729:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1731:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Arg>
1732:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1733:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1735:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1736:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1737:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
ARM GAS  /tmp/ccFECPfA.s 			page 111


1738:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1739:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1741:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1743:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1745:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1746:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1747:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1748:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1750:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1753:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1754:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
1756:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
1757:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1758:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (max_size() - size() < __n)
1759:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
1760:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1761:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
1762:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
1763:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1764:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1765:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by constructors to check initial size.
1766:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static size_type
1767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
 514              		.loc 6 1767 7 view .LVU110
 515              	.LBB1111:
 516              	.LBB1112:
 517              	.LBI1112:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 518              		.loc 9 167 7 view .LVU111
 519              	.LBB1113:
 520              	.LBI1113:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 521              		.loc 8 82 7 view .LVU112
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 522              		.loc 8 82 7 is_stmt 0 view .LVU113
 523              	.LBE1113:
 524              	.LBE1112:
 525              	.LBB1114:
 526              	.LBI1114:
 527              		.loc 9 182 7 is_stmt 1 view .LVU114
 528              	.LBB1115:
 529              	.LBI1115:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 530              		.loc 8 89 7 view .LVU115
 531              	.LBE1115:
 532              	.LBE1114:
1768:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 533              		.loc 6 1769 2 is_stmt 0 view .LVU116
 534 0010 441C     		adds	r4, r0, #1
ARM GAS  /tmp/ccFECPfA.s 			page 112


 535 0012 1ED4     		bmi	.L35
 536 0014 0646     		mov	r6, r0
 537              	.LVL39:
 538              		.loc 6 1769 2 view .LVU117
 539              	.LBE1111:
 540              	.LBE1110:
 541              	.LBB1117:
 542              	.LBI1117:
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 543              		.loc 6 303 7 is_stmt 1 view .LVU118
 544              	.LBB1118:
 545              	.LBB1119:
 546              	.LBI1119:
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 547              		.loc 6 136 2 view .LVU119
 548              	.LBB1120:
 549              	.LBB1121:
 550              	.LBI1121:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 551              		.loc 9 167 7 view .LVU120
 552              	.LBB1122:
 553              	.LBI1122:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 554              		.loc 8 82 7 view .LVU121
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 555              		.loc 8 82 7 is_stmt 0 view .LVU122
 556              	.LBE1122:
 557              	.LBE1121:
 558              	.LBB1123:
 559              	.LBI1123:
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 560              		.loc 6 97 2 is_stmt 1 view .LVU123
 561              	.LBB1124:
 562              	.LBB1125:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 563              		.loc 6 98 47 is_stmt 0 view .LVU124
 564 0016 0023     		movs	r3, #0
 565 0018 0193     		str	r3, [sp, #4]
 566 001a 0293     		str	r3, [sp, #8]
 567 001c 0393     		str	r3, [sp, #12]
 568              	.LVL40:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 569              		.loc 6 98 47 view .LVU125
 570              	.LBE1125:
 571              	.LBE1124:
 572              	.LBE1123:
 573              	.LBE1120:
 574              	.LBE1119:
 575              	.LBB1126:
 576              	.LBI1126:
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 577              		.loc 6 359 7 is_stmt 1 view .LVU126
 578              	.LBB1127:
 579              	.LBB1128:
 580              	.LBI1128:
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 581              		.loc 6 343 7 view .LVU127
ARM GAS  /tmp/ccFECPfA.s 			page 113


 582              	.LBB1129:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 583              		.loc 6 346 18 is_stmt 0 view .LVU128
 584 001e ECB1     		cbz	r4, .L32
 585              	.LVL41:
 586              	.LBB1130:
 587              	.LBI1130:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 588              		.loc 7 459 7 is_stmt 1 view .LVU129
 589              	.LBB1131:
 590              	.LBI1131:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 591              		.loc 8 103 7 view .LVU130
 592              	.LBB1132:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 593              		.loc 8 111 2 is_stmt 0 view .LVU131
 594 0020 9C42     		cmp	r4, r3
 595 0022 19DB     		blt	.L36
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 596              		.loc 8 121 41 view .LVU132
 597 0024 2046     		mov	r0, r4
 598              	.LVL42:
 599              	.LEHB0:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 600              		.loc 8 121 41 view .LVU133
 601 0026 FFF7FEFF 		bl	_Znwj
 602              	.LVL43:
 603              	.LEHE0:
 604 002a 0546     		mov	r5, r0
 605              	.LVL44:
 606              	.L26:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 607              		.loc 8 121 41 view .LVU134
 608              	.LBE1132:
 609              	.LBE1131:
 610              	.LBE1130:
 611              	.LBE1129:
 612              	.LBE1128:
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 613              		.loc 6 361 25 view .LVU135
 614 002c 0195     		str	r5, [sp, #4]
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 615              		.loc 6 362 26 view .LVU136
 616 002e 0295     		str	r5, [sp, #8]
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 617              		.loc 6 363 59 view .LVU137
 618 0030 2A19     		adds	r2, r5, r4
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 619              		.loc 6 363 34 view .LVU138
 620 0032 0392     		str	r2, [sp, #12]
 621              	.LVL45:
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 622              		.loc 6 363 34 view .LVU139
 623              	.LBE1127:
 624              	.LBE1126:
 625              	.LBE1118:
 626              	.LBE1117:
ARM GAS  /tmp/ccFECPfA.s 			page 114


 627              	.LBB1141:
 628              	.LBI1141:
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 629              		.loc 6 1603 7 is_stmt 1 view .LVU140
 630              	.LBB1142:
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
 631              		.loc 6 1606 36 is_stmt 0 view .LVU141
 632 0034 2846     		mov	r0, r5
 633              	.LVL46:
 634              	.LBB1143:
 635              	.LBI1143:
 636              		.file 11 "/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
ARM GAS  /tmp/ccFECPfA.s 			page 115


  46:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <bits/stl_pair.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
  62:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  63:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <type_traits>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
  66:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  67:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <ext/alloc_traits.h>
  68:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** {
  71:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  73:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /** @addtogroup memory
  74:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @{
  75:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    */
  76:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
  78:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  80:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  81:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
  82:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  83:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
  84:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  85:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  86:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
  87:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  88:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
  89:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
  90:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  91:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  92:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
  93:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
  94:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
  95:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
  96:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  97:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  98:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
  99:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 100:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 101:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 102:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
ARM GAS  /tmp/ccFECPfA.s 			page 116


 103:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
 104:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 105:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 106:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 107:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 108:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 109:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 110:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 111:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 112:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 113:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 114:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 115:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 116:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 117:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 118:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 119:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 120:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 121:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 122:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 123:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 124:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 125:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 126:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 127:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 128:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 129:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType1;
 130:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 131:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType2;
 132:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 133:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 134:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 135:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 136:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 137:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 138:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 139:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 141:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 142:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 143:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 144:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 145:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 146:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 148:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 149:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 150:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 151:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 152:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 153:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 154:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 155:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 156:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 157:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 158:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 159:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
ARM GAS  /tmp/ccFECPfA.s 			page 117


 160:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 161:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 162:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 163:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 164:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 165:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 166:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 167:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 168:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 169:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 170:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 171:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 172:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 173:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 174:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 175:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 176:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 177:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 178:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 179:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 180:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 181:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 182:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 183:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 184:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 185:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 186:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 187:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 188:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 189:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 190:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 191:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 192:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 193:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 194:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 195:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 196:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 197:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 198:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 199:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 200:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 201:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 202:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 203:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 204:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 205:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 206:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 207:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 208:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 209:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 210:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 211:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 212:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 213:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 214:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 215:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 216:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
ARM GAS  /tmp/ccFECPfA.s 			page 118


 217:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 218:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 219:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 220:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 221:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 222:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 223:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 224:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 225:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 226:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 227:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 228:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 229:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 230:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 231:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 232:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 233:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 234:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 235:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 237:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
 238:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 240:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 241:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 242:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 243:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 244:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 245:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 246:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 247:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 248:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 249:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 250:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 251:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 252:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 253:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 254:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 255:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 256:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 257:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 258:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 259:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 261:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 262:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 263:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 264:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 265:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 266:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 267:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 268:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 269:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 270:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 271:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 272:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 273:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
ARM GAS  /tmp/ccFECPfA.s 			page 119


 274:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 275:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 276:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 277:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 278:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 279:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 280:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 281:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 282:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 283:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 284:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 285:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 286:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 287:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 288:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 289:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 290:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 291:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 292:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 293:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 294:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 295:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 296:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 297:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 298:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 299:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 300:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 301:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 302:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 303:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 304:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 305:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 306:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 307:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 308:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 309:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 310:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 311:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 312:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 313:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 314:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 315:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 316:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 317:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 318:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 319:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 320:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 321:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 322:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 323:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 324:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 325:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 326:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 327:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 328:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 329:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 330:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
ARM GAS  /tmp/ccFECPfA.s 			page 120


 331:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 332:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 333:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 334:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 335:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 					 __result, __alloc);
 336:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 337:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 338:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 339:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 340:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 341:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 342:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 343:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 344:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 345:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 346:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 347:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 348:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 349:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 350:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 351:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 352:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     void
 353:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 354:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 355:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 356:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 357:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 358:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 359:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 360:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 361:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 362:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 363:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 364:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 365:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 366:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 367:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 368:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 369:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 370:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 371:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 372:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 373:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 374:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 375:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 376:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 377:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 378:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 379:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 380:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 381:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 382:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 383:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 384:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 385:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 386:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 387:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
ARM GAS  /tmp/ccFECPfA.s 			page 121


 388:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 389:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 390:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 391:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 392:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 393:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 394:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 395:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 396:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 397:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 398:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Tp2>
 399:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 400:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 401:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 402:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 403:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 404:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 405:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 406:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 407:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 408:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // for construction and destruction.
 409:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 410:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_copy_move
 411:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 412:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  move [first2, last2) into
 413:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 414:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 415:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 416:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 417:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 418:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 419:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 420:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 421:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 422:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 423:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 424:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 425:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __result,
 426:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __alloc);
 427:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 428:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 429:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 430:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 431:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 432:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 433:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 434:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 435:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 436:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 437:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 438:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_move_copy
 439:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 440:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  copies [first2, last2) into
 441:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 442:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 443:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 444:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
ARM GAS  /tmp/ccFECPfA.s 			page 122


 445:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 446:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 447:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 448:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 449:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 450:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 451:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 452:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 453:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __result,
 454:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __alloc);
 455:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 456:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 457:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 458:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 459:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 460:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 461:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 462:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 463:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 464:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 465:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   
 466:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move
 467:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 468:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 469:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 470:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 471:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 472:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 473:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 474:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 475:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 476:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 477:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 478:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 479:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 480:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 481:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 482:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 483:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 484:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 485:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 486:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 487:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 488:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_move_fill
 489:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 490:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 491:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 492:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 493:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 494:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 495:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __first2,
 496:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 497:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 498:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 499:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 500:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							    __first2,
 501:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							    __alloc);
ARM GAS  /tmp/ccFECPfA.s 			page 123


 502:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 503:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 504:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 505:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 506:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 507:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 508:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 509:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 510:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 511:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 512:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 513:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 514:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 515:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
 516:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 517:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 518:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 519:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 520:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 521:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 522:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1
 523:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 524:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 525:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 526:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 527:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 528:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 529:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 530:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 531:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 532:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 533:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 534:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 535:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 536:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 537:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 538:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 539:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 540:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 541:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 543:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 544:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 545:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 546:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 547:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 548:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 549:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 550:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    _ValueType;
 551:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 552:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::fill(__first, __last, _ValueType());
 553:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 554:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 555:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 556:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 557:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1
 558:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
ARM GAS  /tmp/ccFECPfA.s 			page 124


 559:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 560:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 561:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 562:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 563:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 564:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 565:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 566:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 567:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 568:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
 569:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 570:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 571:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 572:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 573:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 574:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 575:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 576:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 577:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 578:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 579:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 580:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 581:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 582:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 584:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 585:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 586:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    _ValueType;
 587:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 588:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::fill_n(__first, __n, _ValueType());
 589:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 590:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 591:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 592:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default
 593:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 594:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed value_types(s).
 595:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator>
 596:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 597:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 598:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			    _ForwardIterator __last)
 599:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 600:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 601:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 602:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 603:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 604:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 606:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				     && __assignable>::
 607:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_default(__first, __last);
 608:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 609:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 610:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n
 611:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_type(s).
 612:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 613:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 615:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
ARM GAS  /tmp/ccFECPfA.s 			page 125


 616:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 617:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 618:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 619:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 620:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 621:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 622:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 623:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 624:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 625:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 626:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 627:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a
 628:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 629:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed value_types(s), constructed with the allocator alloc.
 630:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 631:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     void
 632:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 633:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 634:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 635:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 636:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 637:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 638:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 639:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 640:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 641:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 642:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 643:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 644:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 645:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 646:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 647:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 648:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 649:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 650:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 651:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 652:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 653:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 654:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      allocator<_Tp>&)
 655:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 656:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 657:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 658:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n_a
 659:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_types(s),
 660:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed with the allocator alloc.
 661:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 662:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 663:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 664:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				_Allocator& __alloc)
 665:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 666:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 667:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 668:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 669:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 670:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 671:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 672:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
ARM GAS  /tmp/ccFECPfA.s 			page 126


 673:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 674:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 675:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 676:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 677:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 678:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 679:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 680:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 681:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 682:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 683:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 637              		.loc 11 683 5 is_stmt 1 view .LVU142
 638              	.LBB1144:
 639              	.LBI1144:
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 640              		.loc 11 614 5 view .LVU143
 641              	.LBB1145:
 642              	.LBB1146:
 643              	.LBI1146:
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 644              		.loc 11 583 9 view .LVU144
 645              	.LBB1147:
 646              	.LBB1148:
 647              	.LBI1148:
 648              		.file 12 "/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
ARM GAS  /tmp/ccFECPfA.s 			page 127


  33:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** {
  81:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  83:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline int
ARM GAS  /tmp/ccFECPfA.s 			page 128


  90:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 119:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 127:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 139:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
ARM GAS  /tmp/ccFECPfA.s 			page 129


 147:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 160:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 171:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 186:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
ARM GAS  /tmp/ccFECPfA.s 			page 130


 204:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 211:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 216:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 233:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
ARM GAS  /tmp/ccFECPfA.s 			page 131


 261:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 262:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 263:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 264:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 265:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 266:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 272:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 275:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 278:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 280:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 282:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 283:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 284:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 285:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 286:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 287:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 288:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 293:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 294:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 297:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 300:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 302:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 304:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 305:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 306:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 307:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 308:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 311:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 313:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 314:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __it; }
 316:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 317:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
ARM GAS  /tmp/ccFECPfA.s 			page 132


 318:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _From, typename _To>
 321:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _From
 323:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 326:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 327:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 328:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 330:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __res; }
 332:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 333:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 338:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 339:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move
 341:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 342:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 343:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 345:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 347:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = *__first;
 349:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 350:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 351:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 352:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 353:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 354:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 355:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 357:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 358:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 360:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 362:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 364:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 365:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 366:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 367:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 368:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 369:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 370:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 372:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 373:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
ARM GAS  /tmp/ccFECPfA.s 			page 133


 375:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 377:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    {
 380:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = *__first;
 381:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 382:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 383:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    }
 384:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 385:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 386:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 387:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 389:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 390:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 392:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 393:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 395:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 397:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    {
 400:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 401:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 402:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 403:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    }
 404:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 405:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 406:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 407:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 408:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 409:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 410:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 412:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 413:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 415:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 417:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 418:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 424:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 428:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 429:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 430:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 431:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
ARM GAS  /tmp/ccFECPfA.s 			page 134


 432:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT>
 434:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct char_traits;
 435:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     class istreambuf_iterator;
 438:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     class ostreambuf_iterator;
 441:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 442:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 448:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 454:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				    _CharT*>::__type
 457:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 460:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 463:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 465:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 468:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 471:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 474:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 475:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 477:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct _Deque_iterator;
 479:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 480:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 482:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 483:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 485:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _OI);
 488:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 135


 489:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 490:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 496:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 498:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 502:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 505:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 508:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 511:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 513:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 514:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 516:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 517:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 518:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 519:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 520:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 522:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  _OI);
 525:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 526:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 527:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II, _II,
 530:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 532:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 533:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 540:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 541:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 544:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 545:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
ARM GAS  /tmp/ccFECPfA.s 			page 136


 546:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 547:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 548:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 554:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 555:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 556:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 557:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 558:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 560:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 562:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 563:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 568:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 571:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 572:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 573:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 574:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 577:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 578:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 579:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 580:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 581:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 587:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 589:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 590:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 591:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 593:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 595:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 596:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 601:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				      std::__miter_base(__last), __result);
ARM GAS  /tmp/ccFECPfA.s 			page 137


 603:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 604:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 607:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 609:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 610:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward
 612:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 613:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 616:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 618:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 619:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 620:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 621:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 622:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 623:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 624:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 625:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 626:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 628:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 631:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 633:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 634:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 636:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 637:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 638:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 639:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 640:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 641:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 643:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 646:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 648:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 650:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 652:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 653:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 654:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 655:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 656:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 657:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 658:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
ARM GAS  /tmp/ccFECPfA.s 			page 138


 660:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 663:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 665:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 667:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 669:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 670:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 671:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 672:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 673:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 674:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 675:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 677:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 678:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 680:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 682:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 683:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 689:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 691:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result - _Num;
 693:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 694:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 695:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 696:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 699:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 701:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 704:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 707:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 								 __last,
 711:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 								 __result);
 712:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 713:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 714:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
ARM GAS  /tmp/ccFECPfA.s 			page 139


 717:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 720:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 721:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 723:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _OI);
 726:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 727:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 728:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(
 731:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 735:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 742:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 745:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 747:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 748:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 751:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 752:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 753:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 754:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 756:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 757:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		_OI);
 760:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 761:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 762:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 767:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 768:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 772:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
ARM GAS  /tmp/ccFECPfA.s 			page 140


 774:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 776:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 777:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 783:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 784:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 790:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 791:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 794:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 797:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 799:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 800:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 807:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 810:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 811:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 812:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 813:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 819:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 820:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 826:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 827:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 830:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
ARM GAS  /tmp/ccFECPfA.s 			page 141


 831:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 833:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 835:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 836:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 840:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 843:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					       std::__miter_base(__last),
 845:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					       __result);
 846:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 847:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 848:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 850:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 852:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 853:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 856:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 859:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 860:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 861:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
 862:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 863:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 864:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 867:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 870:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 871:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 872:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 873:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 874:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 875:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 876:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 878:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 880:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 883:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 884:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 886:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 887:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__first)
ARM GAS  /tmp/ccFECPfA.s 			page 142


 888:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__first = __tmp;
 889:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return;
 890:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 891:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 895:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 896:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
 897:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 899:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 902:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 904:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     void
 906:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _VTp&);
 909:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 910:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 916:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     void
 918:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     const _Tp&);
 921:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 922:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 923:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 929:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 930:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 934:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 937:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 939:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 940:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator>)
 942:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 944:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __last, __value);
ARM GAS  /tmp/ccFECPfA.s 			page 143


 945:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 946:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 947:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
 954:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
 958:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 961:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 967:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 973:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
 974:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 979:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
 980:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 985:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 986:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(float __n) { return (long long)__n; }
 988:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(double __n) { return (long long)__n; }
 990:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long double __n) { return (long long)__n; }
 992:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__float128 __n) { return (long long)__n; }
 995:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 996:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 997:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
1000:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
ARM GAS  /tmp/ccFECPfA.s 			page 144


1002:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1003:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
1005:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1006:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1007:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1008:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
1011:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1014:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
1015:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
1017:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1018:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1019:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1020:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp>
1022:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1024:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag);
1026:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1027:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1030:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1031:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::output_iterator_tag)
1032:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1033:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1034:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1036:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1037:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1038:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1039:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1042:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag)
1044:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1045:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1046:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1048:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1050:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1051:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1057:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1058:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
ARM GAS  /tmp/ccFECPfA.s 			page 145


1059:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__n <= 0)
1061:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
1062:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1063:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
1067:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1068:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1069:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
1070:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
1072:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An output iterator.
1073:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The iterator at first+n.
1076:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
1077:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
1081:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
1083:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1088:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
1089:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 649              		.loc 12 1089 5 view .LVU145
 650              		.loc 12 1089 5 is_stmt 0 view .LVU146
 651              	.LBE1148:
 652              	.LBE1147:
 653              	.LBE1146:
 654              	.LBE1145:
 655              	.LBE1144:
 656              	.LBE1143:
 657              	.LBE1142:
 658              	.LBE1141:
 659              	.LBE1109:
 660              	.LBE1108:
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 661              		.loc 12 951 37 is_stmt 1 view .LVU147
 662              	.LBB1183:
 663              	.LBB1181:
 664              	.LBB1177:
 665              	.LBB1175:
 666              	.LBB1173:
 667              	.LBB1171:
 668              	.LBB1169:
 669              	.LBB1167:
 670              	.LBB1165:
 671              	.LBB1163:
 672              	.LBB1149:
 673              	.LBB1150:
ARM GAS  /tmp/ccFECPfA.s 			page 146


 674              	.LBI1150:
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 675              		.loc 12 1054 5 view .LVU148
 676              	.LBB1151:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 677              		.loc 12 1060 7 is_stmt 0 view .LVU149
 678 0036 9CB9     		cbnz	r4, .L37
 679              	.LVL47:
 680              	.L28:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 681              		.loc 12 1060 7 view .LVU150
 682              	.LBE1151:
 683              	.LBE1150:
 684              	.LBE1149:
 685              	.LBE1163:
 686              	.LBE1165:
 687              	.LBE1167:
 688              	.LBE1169:
 689              	.LBE1171:
 690              	.LBE1173:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 691              		.loc 6 1605 26 view .LVU151
 692 0038 0290     		str	r0, [sp, #8]
 693              	.LVL48:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 694              		.loc 6 1605 26 view .LVU152
 695              	.LBE1175:
 696              	.LBE1177:
 697              	.LBE1181:
 698              	.LBE1183:
 699              	.LBB1184:
 700              	.LBI1184:
 701              		.loc 9 182 7 is_stmt 1 view .LVU153
 702              	.LBB1185:
 703              	.LBI1185:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 704              		.loc 8 89 7 view .LVU154
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 705              		.loc 8 89 7 is_stmt 0 view .LVU155
 706              	.LBE1185:
 707              	.LBE1184:
 708              	.LBB1186:
 709              	.LBI1186:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 710              		.loc 6 1043 7 is_stmt 1 view .LVU156
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 711              		.loc 6 1043 7 is_stmt 0 view .LVU157
 712              	.LBE1186:
 713              	.LBB1187:
 714              	.LBI1187:
 715              		.loc 4 2312 7 is_stmt 1 view .LVU158
 716              	.LBB1188:
 717              	.LBI1188:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 718              		.loc 4 194 7 view .LVU159
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 719              		.loc 4 194 7 is_stmt 0 view .LVU160
ARM GAS  /tmp/ccFECPfA.s 			page 147


 720              	.LBE1188:
 721              	.LBE1187:
  19:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
  20:Peripheral/Inc/serial_printf.hpp ****     std::vector<char> buf(len + 1);
  21:Peripheral/Inc/serial_printf.hpp ****     std::snprintf(&buf[0], len + 1, fmt.c_str(), args...);
 722              		.loc 10 21 18 view .LVU161
 723 003a 3A68     		ldr	r2, [r7]
 724 003c 2146     		mov	r1, r4
 725 003e 0198     		ldr	r0, [sp, #4]
 726 0040 FFF7FEFF 		bl	snprintf
 727              	.LVL49:
 728              	.LBB1189:
 729              	.LBI1189:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 730              		.loc 6 1043 7 is_stmt 1 view .LVU162
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 731              		.loc 6 1043 7 is_stmt 0 view .LVU163
 732              	.LBE1189:
  22:Peripheral/Inc/serial_printf.hpp ****     // ヌル終端された文字列をUARTに送信
  23:Peripheral/Inc/serial_printf.hpp ****     HAL_UART_Transmit(&huart1, (uint8_t *)&buf[0], len, 0xFF);
 733              		.loc 10 23 22 view .LVU164
 734 0044 FF23     		movs	r3, #255
 735 0046 B2B2     		uxth	r2, r6
 736 0048 0199     		ldr	r1, [sp, #4]
 737 004a 1048     		ldr	r0, .L40
 738              	.LEHB1:
 739 004c FFF7FEFF 		bl	HAL_UART_Transmit
 740              	.LVL50:
 741              	.LEHE1:
 742 0050 0FE0     		b	.L38
 743              	.LVL51:
 744              	.L35:
 745              	.LBB1190:
 746              	.LBB1182:
 747              	.LBB1178:
 748              	.LBB1116:
1770:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 749              		.loc 6 1770 24 view .LVU165
 750 0052 0F48     		ldr	r0, .L40+4
 751              	.LVL52:
 752              	.LEHB2:
 753              		.loc 6 1770 24 view .LVU166
 754 0054 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 755              	.LVL53:
 756              	.L36:
 757              		.loc 6 1770 24 view .LVU167
 758              	.LBE1116:
 759              	.LBE1178:
 760              	.LBB1179:
 761              	.LBB1140:
 762              	.LBB1139:
 763              	.LBB1138:
 764              	.LBB1137:
 765              	.LBB1136:
 766              	.LBB1135:
 767              	.LBB1134:
 768              	.LBB1133:
ARM GAS  /tmp/ccFECPfA.s 			page 148


 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 769              		.loc 8 112 26 view .LVU168
 770 0058 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 771              	.LVL54:
 772              	.L32:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 773              		.loc 8 112 26 view .LVU169
 774              	.LBE1133:
 775              	.LBE1134:
 776              	.LBE1135:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 777              		.loc 6 346 18 view .LVU170
 778 005c 0025     		movs	r5, #0
 779 005e E5E7     		b	.L26
 780              	.LVL55:
 781              	.L37:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 782              		.loc 6 346 18 view .LVU171
 783              	.LBE1136:
 784              	.LBE1137:
 785              	.LBE1138:
 786              	.LBE1139:
 787              	.LBE1140:
 788              	.LBE1179:
 789              	.LBB1180:
 790              	.LBB1176:
 791              	.LBB1174:
 792              	.LBB1172:
 793              	.LBB1170:
 794              	.LBB1168:
 795              	.LBB1166:
 796              	.LBB1164:
 797              	.LBB1162:
 798              	.LBB1161:
 799              	.LBB1160:
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
 800              		.loc 12 1065 20 view .LVU172
 801 0060 1546     		mov	r5, r2
 802              	.LVL56:
 803              	.LBB1152:
 804              	.LBI1152:
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 805              		.loc 12 913 5 is_stmt 1 view .LVU173
 806              	.LBB1153:
 807              	.LBI1153:
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 808              		.loc 12 881 5 view .LVU174
 809              	.LBB1154:
 810              	.LBB1155:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 811              		.loc 12 892 7 is_stmt 0 view .LVU175
 812 0062 2246     		mov	r2, r4
 813 0064 0CB9     		cbnz	r4, .L39
 814              	.LVL57:
 815              	.L29:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 816              		.loc 12 892 7 view .LVU176
ARM GAS  /tmp/ccFECPfA.s 			page 149


 817              	.LBE1155:
 818              	.LBE1154:
 819              	.LBE1153:
 820              	.LBE1152:
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 821              		.loc 12 1066 24 view .LVU177
 822 0066 2846     		mov	r0, r5
 823              	.LBB1159:
 824              	.LBB1158:
 825              	.LBB1157:
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 826              		.loc 12 894 5 view .LVU178
 827 0068 E6E7     		b	.L28
 828              	.LVL58:
 829              	.L39:
 830              	.LBB1156:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 831              		.loc 12 893 18 view .LVU179
 832 006a 0021     		movs	r1, #0
 833 006c FFF7FEFF 		bl	memset
 834              	.LVL59:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 835              		.loc 12 893 18 view .LVU180
 836 0070 F9E7     		b	.L29
 837              	.LVL60:
 838              	.L38:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 839              		.loc 12 893 18 view .LVU181
 840              	.LBE1156:
 841              	.LBE1157:
 842              	.LBE1158:
 843              	.LBE1159:
 844              	.LBE1160:
 845              	.LBE1161:
 846              	.LBE1162:
 847              	.LBE1164:
 848              	.LBE1166:
 849              	.LBE1168:
 850              	.LBE1170:
 851              	.LBE1172:
 852              	.LBE1174:
 853              	.LBE1176:
 854              	.LBE1180:
 855              	.LBE1182:
 856              	.LBE1190:
 857              	.LBB1191:
 858              	.LBI1191:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 859              		.loc 6 678 7 is_stmt 1 view .LVU182
 860              	.LBB1192:
 861              	.LBB1193:
 862              	.LBI1193:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 863              		.loc 6 276 7 view .LVU183
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 864              		.loc 6 276 7 is_stmt 0 view .LVU184
 865              	.LBE1193:
ARM GAS  /tmp/ccFECPfA.s 			page 150


 866              	.LBB1194:
 867              	.LBI1194:
 492:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 493:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 494:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 495:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 496:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 497:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 498:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 499:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 500:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 501:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 502:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 503:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 504:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 505:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 506:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 507:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 508:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  _Args&&... __args)
 509:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 510:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 511:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 512:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 513:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 514:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 515:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 516:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 517:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 518:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 519:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 520:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 521:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 522:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 523:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 524:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 525:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 526:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 527:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 528:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 529:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 530:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 531:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  __a.destroy(__p);
 532:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 533:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::destroy_at(__p);
 534:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 535:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 536:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 537:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 538:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 539:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 540:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 541:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 542:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 543:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 544:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       {
 545:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 546:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.max_size();
ARM GAS  /tmp/ccFECPfA.s 			page 151


 547:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 548:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 549:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 550:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       }
 551:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 552:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 553:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 554:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 555:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __rhs
 556:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 557:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 558:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 559:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __rhs; }
 560:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     };
 561:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 562:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 563:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 564:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 565:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 566:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { __one = __two; }
 567:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 568:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 569:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 570:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 571:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 572:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 573:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 574:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 575:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 576:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 577:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 578:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 579:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 580:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 581:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocca::value)
 582:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__one = __two;
 583:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 584:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 585:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 586:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 587:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 588:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 589:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     constexpr _Alloc
 590:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 591:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 592:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 593:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 594:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 595:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 596:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 597:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 598:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 599:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { __one = std::move(__two); }
 600:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 601:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 602:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 603:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
ARM GAS  /tmp/ccFECPfA.s 			page 152


 604:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 605:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 606:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 607:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 608:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 609:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 610:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 611:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 612:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 613:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocma::value)
 614:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__one = std::move(__two);
 615:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 616:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 617:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 618:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 619:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 620:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 621:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 622:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 623:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 624:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using std::swap;
 625:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       swap(__one, __two);
 626:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 627:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 628:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 629:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 630:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 631:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 632:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 633:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 634:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 635:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 636:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 637:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 638:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 639:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 640:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocs::value)
 641:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 642:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using std::swap;
 643:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  swap(__one, __two);
 644:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 645:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 646:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 647:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 648:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 649:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 650:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 651:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 652:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	   typename = void>
 653:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl
 654:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : false_type
 655:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 656:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 657:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 658:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 659:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 660:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
ARM GAS  /tmp/ccFECPfA.s 			page 153


 661:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		   std::declval<_Tp>()))>>
 662:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : true_type
 663:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 664:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 665:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 666:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 667:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 668:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 669:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_copy_insertable
 670:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 671:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 672:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 673:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 674:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 675:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 676:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 677:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : is_copy_constructible<_Tp>
 678:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 679:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 680:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 681:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 682:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 683:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 684:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_move_insertable
 685:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 686:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 687:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 688:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 689:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 690:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 691:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : is_move_constructible<_Tp>
 692:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 693:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 694:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // Trait to detect Allocator-like types.
 695:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename = void>
 696:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_allocator : false_type { };
 697:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 698:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 699:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_allocator<_Alloc,
 700:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 701:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 702:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : true_type { };
 703:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 704:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 705:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using _RequireAllocator
 706:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 707:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 708:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 709:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using _RequireNotAllocator
 710:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 711:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif // C++11
 712:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 713:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /**
 714:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 715:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 716:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 717:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    */
ARM GAS  /tmp/ccFECPfA.s 			page 154


 718:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 719:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 720:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     void
 721:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 722:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	     _Allocator& __alloc)
 723:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 724:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       for (; __first != __last; ++__first)
 725:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201103L
 726:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 727:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 728:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 729:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 					      std::__addressof(*__first));
 730:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 731:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 732:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 733:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 734:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 735:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 868              		.loc 7 735 5 is_stmt 1 view .LVU185
 869              		.loc 7 735 5 is_stmt 0 view .LVU186
 870              	.LBE1194:
 871              	.LBB1195:
 872              	.LBI1195:
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 873              		.loc 6 333 7 is_stmt 1 view .LVU187
 874              	.LBB1196:
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 875              		.loc 6 335 15 is_stmt 0 view .LVU188
 876 0072 0198     		ldr	r0, [sp, #4]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 877              		.loc 6 336 17 view .LVU189
 878 0074 0399     		ldr	r1, [sp, #12]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 879              		.loc 6 336 35 view .LVU190
 880 0076 091A     		subs	r1, r1, r0
 881              	.LVL61:
 882              	.LBB1197:
 883              	.LBI1197:
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 884              		.loc 6 350 7 is_stmt 1 view .LVU191
 885              	.LBB1198:
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 886              		.loc 6 353 2 is_stmt 0 view .LVU192
 887 0078 08B1     		cbz	r0, .L24
 888              	.LVL62:
 889              	.LBB1199:
 890              	.LBI1199:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 891              		.loc 7 491 7 is_stmt 1 view .LVU193
 892              	.LBB1200:
 893              	.LBB1201:
 894              	.LBI1201:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 895              		.loc 8 126 7 view .LVU194
 896              	.LBB1202:
 897              		.loc 8 139 19 is_stmt 0 view .LVU195
 898 007a FFF7FEFF 		bl	_ZdlPvj
ARM GAS  /tmp/ccFECPfA.s 			page 155


 899              	.LVL63:
 900              		.loc 8 139 19 view .LVU196
 901              	.LBE1202:
 902              	.LBE1201:
 903              	.LBE1200:
 904              	.LBE1199:
 905              	.LBE1198:
 906              	.LBE1197:
 907              	.LBB1203:
 908              	.LBI1203:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 909              		.loc 6 128 14 is_stmt 1 view .LVU197
 910              	.LBB1204:
 911              	.LBB1205:
 912              	.LBI1205:
 913              		.loc 9 182 7 view .LVU198
 914              	.LBB1206:
 915              	.LBI1206:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 916              		.loc 8 89 7 view .LVU199
 917              	.L24:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 918              		.loc 8 89 7 is_stmt 0 view .LVU200
 919              	.LBE1206:
 920              	.LBE1205:
 921              	.LBE1204:
 922              	.LBE1203:
 923              	.LBE1196:
 924              	.LBE1195:
 925              	.LBE1192:
 926              	.LBE1191:
  24:Peripheral/Inc/serial_printf.hpp **** }
 927              		.loc 10 24 1 view .LVU201
 928 007e 05B0     		add	sp, sp, #20
 929              	.LCFI7:
 930              		.cfi_remember_state
 931              		.cfi_def_cfa_offset 20
 932              		@ sp needed
 933 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 934              	.LVL64:
 935              	.L33:
 936              	.LCFI8:
 937              		.cfi_restore_state
 938              	.LBB1207:
 939              	.LBI1207:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 940              		.loc 6 678 7 is_stmt 1 view .LVU202
 941              	.LBB1208:
 942              	.LBB1209:
 943              	.LBI1209:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 944              		.loc 6 276 7 view .LVU203
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 945              		.loc 6 276 7 is_stmt 0 view .LVU204
 946              	.LBE1209:
 947              	.LBB1210:
 948              	.LBI1210:
ARM GAS  /tmp/ccFECPfA.s 			page 156


 949              		.loc 7 735 5 is_stmt 1 view .LVU205
 950              		.loc 7 735 5 is_stmt 0 view .LVU206
 951              	.LBE1210:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 952              		.loc 6 683 7 view .LVU207
 953 0082 01A8     		add	r0, sp, #4
 954              	.LVL65:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 955              		.loc 6 683 7 view .LVU208
 956 0084 FFF7FEFF 		bl	_ZNSt12_Vector_baseIcSaIcEED2Ev
 957              	.LVL66:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 958              		.loc 6 683 7 view .LVU209
 959 0088 FFF7FEFF 		bl	__cxa_end_cleanup
 960              	.LVL67:
 961              	.LEHE2:
 962              	.L41:
 963              		.align	2
 964              	.L40:
 965 008c 00000000 		.word	huart1
 966 0090 00000000 		.word	.LC1
 967              	.LBE1208:
 968              	.LBE1207:
 969              		.cfi_endproc
 970              	.LFE2005:
 971              		.global	__gxx_personality_v0
 972              		.personality	__gxx_personality_v0
 973              		.handlerdata
 974              	.LLSDA2005:
 975 0008 FF       		.byte	0xff
 976 0009 FF       		.byte	0xff
 977 000a 01       		.byte	0x1
 978 000b 0D       		.uleb128 .LLSDACSE2005-.LLSDACSB2005
 979              	.LLSDACSB2005:
 980 000c 26       		.uleb128 .LEHB0-.LFB2005
 981 000d 04       		.uleb128 .LEHE0-.LEHB0
 982 000e 00       		.uleb128 0
 983 000f 00       		.uleb128 0
 984 0010 4C       		.uleb128 .LEHB1-.LFB2005
 985 0011 04       		.uleb128 .LEHE1-.LEHB1
 986 0012 8201     		.uleb128 .L33-.LFB2005
 987 0014 00       		.uleb128 0
 988 0015 54       		.uleb128 .LEHB2-.LFB2005
 989 0016 38       		.uleb128 .LEHE2-.LEHB2
 990 0017 00       		.uleb128 0
 991 0018 00       		.uleb128 0
 992              	.LLSDACSE2005:
 993              		.section	.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,"a
 994              		.fnend
 996              		.section	.rodata._ZN5WioE55setupEv.str1.4,"aMS",%progbits,1
 997              		.align	2
 998              	.LC2:
 999 0000 52656164 		.ascii	"ReadWioE5 setup complete.\012\000"
 999      57696F45 
 999      35207365 
 999      74757020 
 999      636F6D70 
ARM GAS  /tmp/ccFECPfA.s 			page 157


 1000              		.section	.text._ZN5WioE55setupEv,"ax",%progbits
 1001              		.align	1
 1002              		.global	_ZN5WioE55setupEv
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv4-sp-d16
 1008              	_ZN5WioE55setupEv:
 1009              		.fnstart
 1010              	.LVL68:
 1011              	.LFB1759:
  37:App/Src/WioE5.cpp **** 
  38:App/Src/WioE5.cpp **** void WioE5::setup()
  39:App/Src/WioE5.cpp **** {
 1012              		.loc 1 39 1 is_stmt 1 view -0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 24
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              		.loc 1 39 1 is_stmt 0 view .LVU211
 1017 0000 00B5     		push	{lr}
 1018              		.save {lr}
 1019              	.LCFI9:
 1020              		.cfi_def_cfa_offset 4
 1021              		.cfi_offset 14, -4
 1022              		.pad #28
 1023 0002 87B0     		sub	sp, sp, #28
 1024              	.LCFI10:
 1025              		.cfi_def_cfa_offset 32
  40:App/Src/WioE5.cpp ****     // 初期化コード
  41:App/Src/WioE5.cpp ****     HAL_Delay(10);
 1026              		.loc 1 41 5 is_stmt 1 view .LVU212
 1027              		.loc 1 41 14 is_stmt 0 view .LVU213
 1028 0004 0A20     		movs	r0, #10
 1029              	.LVL69:
 1030              	.LEHB3:
 1031              		.loc 1 41 14 view .LVU214
 1032 0006 FFF7FEFF 		bl	HAL_Delay
 1033              	.LVL70:
  42:App/Src/WioE5.cpp ****     serial_printf("ReadWioE5 setup complete.\n");
 1034              		.loc 1 42 5 is_stmt 1 view .LVU215
 1035              	.LBB1256:
 1036              	.LBI1256:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 1037              		.loc 9 164 7 view .LVU216
 1038              	.LBB1257:
 1039              	.LBI1257:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1040              		.loc 8 79 7 view .LVU217
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1041              		.loc 8 79 7 is_stmt 0 view .LVU218
 1042              	.LBE1257:
 1043              	.LBE1256:
 1044              	.LBB1258:
 1045              	.LBI1258:
 533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 1046              		.loc 4 533 7 is_stmt 1 view .LVU219
 1047              	.LBB1259:
ARM GAS  /tmp/ccFECPfA.s 			page 158


 1048              	.LBB1260:
 1049              	.LBI1260:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1050              		.loc 4 198 7 view .LVU220
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1051              		.loc 4 198 7 is_stmt 0 view .LVU221
 1052              	.LBE1260:
 1053              	.LBB1261:
 1054              	.LBI1261:
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 1055              		.loc 4 164 2 is_stmt 1 view .LVU222
 1056              	.LBB1262:
 1057              	.LBB1263:
 1058              	.LBB1264:
 1059              	.LBI1264:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1060              		.loc 9 167 7 view .LVU223
 1061              	.LBB1265:
 1062              	.LBI1265:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1063              		.loc 8 82 7 view .LVU224
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1064              		.loc 8 82 7 is_stmt 0 view .LVU225
 1065              	.LBE1265:
 1066              	.LBE1264:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1067              		.loc 4 165 35 view .LVU226
 1068 000a 02AB     		add	r3, sp, #8
 1069              	.LVL71:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1070              		.loc 4 165 35 view .LVU227
 1071 000c 0093     		str	r3, [sp]
 1072              	.LVL72:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1073              		.loc 4 165 35 view .LVU228
 1074              	.LBE1263:
 1075              	.LBE1262:
 1076              	.LBE1261:
 1077              	.LBB1266:
 1078              	.LBB1267:
 1079              	.LBI1267:
 365:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 1080              		.loc 5 365 7 is_stmt 1 view .LVU229
 1081              	.LBE1267:
 1082              	.LBE1266:
 1083              	.LBE1259:
 1084              	.LBE1258:
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 1085              		.loc 5 371 2 view .LVU230
 1086              	.LBB1270:
 1087              	.LBB1269:
 1088              	.LBB1268:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 1089              		.loc 4 539 14 is_stmt 0 view .LVU231
 1090 000e 104A     		ldr	r2, .L48
 1091              	.LVL73:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
ARM GAS  /tmp/ccFECPfA.s 			page 159


 1092              		.loc 4 539 14 view .LVU232
 1093 0010 4FF00003 		mov	r3, #0
 1094 0014 A2F11A01 		sub	r1, r2, #26
 1095 0018 6846     		mov	r0, sp
 1096 001a FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 1097              	.LVL74:
 1098              	.LEHE3:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 1099              		.loc 4 539 14 view .LVU233
 1100              	.LBE1268:
 1101              	.LBE1269:
 1102              	.LBE1270:
 1103              		.loc 1 42 18 view .LVU234
 1104 001e 6846     		mov	r0, sp
 1105              	.LEHB4:
 1106 0020 FFF7FEFF 		bl	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 1107              	.LVL75:
 1108              	.LEHE4:
 1109              	.LBB1271:
 1110              	.LBI1271:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 1111              		.loc 4 670 7 is_stmt 1 view .LVU235
 1112              	.LBB1272:
 1113              	.LBB1273:
 1114              	.LBI1273:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1115              		.loc 4 237 7 view .LVU236
 1116              	.LBB1274:
 1117              	.LBB1275:
 1118              	.LBI1275:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1119              		.loc 4 229 7 view .LVU237
 1120              	.LBB1276:
 1121              	.LBI1276:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1122              		.loc 4 194 7 view .LVU238
 1123              	.LBB1277:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1124              		.loc 4 195 28 is_stmt 0 view .LVU239
 1125 0024 0098     		ldr	r0, [sp]
 1126              	.LVL76:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1127              		.loc 4 195 28 view .LVU240
 1128              	.LBE1277:
 1129              	.LBE1276:
 1130              	.LBB1278:
 1131              	.LBI1278:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1132              		.loc 4 208 7 is_stmt 1 view .LVU241
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1133              		.loc 4 208 7 is_stmt 0 view .LVU242
 1134              	.LBE1278:
 1135              	.LBE1275:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1136              		.loc 4 239 2 view .LVU243
 1137 0026 02AB     		add	r3, sp, #8
 1138 0028 9842     		cmp	r0, r3
ARM GAS  /tmp/ccFECPfA.s 			page 160


 1139 002a 03D0     		beq	.L43
 1140              	.LVL77:
 1141              	.LBB1279:
 1142              	.LBI1279:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1143              		.loc 4 244 7 is_stmt 1 view .LVU244
 1144              	.LBB1280:
 1145              	.LBB1281:
 1146              	.LBI1281:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1147              		.loc 7 491 7 view .LVU245
 1148              	.LBB1282:
 1149              	.LBI1282:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1150              		.loc 8 126 7 view .LVU246
 1151              	.LBB1283:
 1152              		.loc 8 139 19 is_stmt 0 view .LVU247
 1153 002c 0299     		ldr	r1, [sp, #8]
 1154 002e 0131     		adds	r1, r1, #1
 1155              	.LVL78:
 1156              		.loc 8 139 19 view .LVU248
 1157 0030 FFF7FEFF 		bl	_ZdlPvj
 1158              	.LVL79:
 1159              	.L43:
 1160              		.loc 8 139 19 view .LVU249
 1161              	.LBE1283:
 1162              	.LBE1282:
 1163              	.LBE1281:
 1164              	.LBE1280:
 1165              	.LBE1279:
 1166              	.LBE1274:
 1167              	.LBE1273:
 1168              	.LBB1284:
 1169              	.LBI1284:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1170              		.loc 4 158 14 is_stmt 1 view .LVU250
 1171              	.LBB1285:
 1172              	.LBB1286:
 1173              	.LBI1286:
 1174              		.loc 9 182 7 view .LVU251
 1175              	.LBB1287:
 1176              	.LBI1287:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1177              		.loc 8 89 7 view .LVU252
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1178              		.loc 8 89 7 is_stmt 0 view .LVU253
 1179              	.LBE1287:
 1180              	.LBE1286:
 1181              	.LBE1285:
 1182              	.LBE1284:
 1183              	.LBE1272:
 1184              	.LBE1271:
 1185              	.LBB1288:
 1186              	.LBI1288:
 1187              		.loc 9 182 7 is_stmt 1 view .LVU254
 1188              	.LBB1289:
 1189              	.LBI1289:
ARM GAS  /tmp/ccFECPfA.s 			page 161


  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1190              		.loc 8 89 7 view .LVU255
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1191              		.loc 8 89 7 is_stmt 0 view .LVU256
 1192              	.LBE1289:
 1193              	.LBE1288:
  43:App/Src/WioE5.cpp ****     // HAL_UART_Transmit(&huart1, (uint8_t *)"WioE5 setup complete.\n", 22, 300);
  44:App/Src/WioE5.cpp ****     HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 1194              		.loc 1 44 5 is_stmt 1 view .LVU257
 1195              		.loc 1 44 24 is_stmt 0 view .LVU258
 1196 0034 0122     		movs	r2, #1
 1197 0036 0749     		ldr	r1, .L48+4
 1198 0038 0748     		ldr	r0, .L48+8
 1199              	.LEHB5:
 1200 003a FFF7FEFF 		bl	HAL_UART_Receive_IT
 1201              	.LVL80:
  45:App/Src/WioE5.cpp **** }
 1202              		.loc 1 45 1 view .LVU259
 1203 003e 07B0     		add	sp, sp, #28
 1204              	.LCFI11:
 1205              		.cfi_remember_state
 1206              		.cfi_def_cfa_offset 4
 1207              		@ sp needed
 1208 0040 5DF804FB 		ldr	pc, [sp], #4
 1209              	.L45:
 1210              	.LCFI12:
 1211              		.cfi_restore_state
 1212              	.LVL81:
 1213              	.LBB1290:
 1214              	.LBI1290:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 1215              		.loc 4 670 7 is_stmt 1 view .LVU260
 1216              	.LBB1291:
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1217              		.loc 4 671 19 is_stmt 0 view .LVU261
 1218 0044 6846     		mov	r0, sp
 1219 0046 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1220              	.LVL82:
 1221              	.LBB1292:
 1222              	.LBI1292:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1223              		.loc 4 158 14 is_stmt 1 view .LVU262
 1224              	.LBB1293:
 1225              	.LBB1294:
 1226              	.LBI1294:
 1227              		.loc 9 182 7 view .LVU263
 1228              	.LBB1295:
 1229              	.LBI1295:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1230              		.loc 8 89 7 view .LVU264
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1231              		.loc 8 89 7 is_stmt 0 view .LVU265
 1232 004a FFF7FEFF 		bl	__cxa_end_cleanup
 1233              	.LVL83:
 1234              	.LEHE5:
 1235              	.L49:
 1236 004e 00BF     		.align	2
ARM GAS  /tmp/ccFECPfA.s 			page 162


 1237              	.L48:
 1238 0050 1A000000 		.word	.LC2+26
 1239 0054 00000000 		.word	.LANCHOR0
 1240 0058 00000000 		.word	huart2
 1241              	.LBE1295:
 1242              	.LBE1294:
 1243              	.LBE1293:
 1244              	.LBE1292:
 1245              	.LBE1291:
 1246              	.LBE1290:
 1247              		.cfi_endproc
 1248              	.LFE1759:
 1249              		.personality	__gxx_personality_v0
 1250              		.handlerdata
 1251              	.LLSDA1759:
 1252 0008 FF       		.byte	0xff
 1253 0009 FF       		.byte	0xff
 1254 000a 01       		.byte	0x1
 1255 000b 0C       		.uleb128 .LLSDACSE1759-.LLSDACSB1759
 1256              	.LLSDACSB1759:
 1257 000c 06       		.uleb128 .LEHB3-.LFB1759
 1258 000d 18       		.uleb128 .LEHE3-.LEHB3
 1259 000e 00       		.uleb128 0
 1260 000f 00       		.uleb128 0
 1261 0010 20       		.uleb128 .LEHB4-.LFB1759
 1262 0011 04       		.uleb128 .LEHE4-.LEHB4
 1263 0012 44       		.uleb128 .L45-.LFB1759
 1264 0013 00       		.uleb128 0
 1265 0014 3A       		.uleb128 .LEHB5-.LFB1759
 1266 0015 14       		.uleb128 .LEHE5-.LEHB5
 1267 0016 00       		.uleb128 0
 1268 0017 00       		.uleb128 0
 1269              	.LLSDACSE1759:
 1270              		.section	.text._ZN5WioE55setupEv
 1271              		.fnend
 1273              		.section	.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M
 1274              		.align	1
 1275              		.weak	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_
 1276              		.syntax unified
 1277              		.thumb
 1278              		.thumb_func
 1279              		.fpu fpv4-sp-d16
 1281              	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEP
 1282              		.fnstart
 1283              	.LVL84:
 1284              	.LFB2201:
 1285              		.file 13 "/usr/include/newlib/c++/10.3.1/bits/stl_deque.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // Deque implementation -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 163


  11:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * Copyright (c) 1997
  40:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** /** @file bits/stl_deque.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  *  Do not attempt to use it directly. @headername{deque}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #ifndef _STL_DEQUE_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #define _STL_DEQUE_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #include <bits/concept_check.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #include <bits/stl_iterator_base_types.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #include <bits/stl_iterator_base_funcs.h>
  62:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
  63:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #include <initializer_list>
  64:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #include <bits/stl_uninitialized.h> // for __is_bitwise_relocatable
  65:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
  66:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus > 201703L
  67:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** # include <compare>
ARM GAS  /tmp/ccFECPfA.s 			page 164


  68:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
  69:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  70:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #include <debug/assertions.h>
  71:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  72:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** {
  74:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  76:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   /**
  78:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @brief This function controls the size of memory nodes.
  79:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @param  __size  The size of an element.
  80:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @return   The number (not byte size) of elements per node.
  81:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
  82:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  This function started off as a compiler kludge from SGI, but
  83:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  seems to be a useful wrapper around a repeated constant
  84:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  expression.  The @b 512 is tunable (and no other code needs to
  85:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  change), but no investigation has been done since inheriting the
  86:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  SGI code.  Touch _GLIBCXX_DEQUE_BUF_SIZE only if you know what
  87:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  you are doing, however: changing it breaks the binary
  88:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  compatibility!!
  89:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   */
  90:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #ifndef _GLIBCXX_DEQUE_BUF_SIZE
  92:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #define _GLIBCXX_DEQUE_BUF_SIZE 512
  93:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
  94:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
  95:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   _GLIBCXX_CONSTEXPR inline size_t
  96:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   __deque_buf_size(size_t __size)
  97:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
  98:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
  99:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 100:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 101:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   /**
 102:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @brief A deque::iterator.
 103:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 104:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Quite a bit of intelligence here.  Much of the functionality of
 105:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  deque is actually passed off to this class.  A deque holds two
 106:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  of these internally, marking its valid range.  Access to
 107:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  elements is done as offsets of either of those two, relying on
 108:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  operator overloading in this class.
 109:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 110:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  All the functions are op overloads except for _M_set_node.
 111:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   */
 112:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 113:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     struct _Deque_iterator
 114:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     {
 115:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
 116:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Deque_iterator<_Tp, _Tp&, _Tp*>		   iterator;
 117:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Deque_iterator<_Tp, const _Tp&, const _Tp*> const_iterator;
 118:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Tp*					   _Elt_pointer;
 119:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Tp**					   _Map_pointer;
 120:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
 121:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     private:
 122:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _CvTp>
 123:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	using __iter = _Deque_iterator<_Tp, _CvTp&, __ptr_rebind<_Ptr, _CvTp>>;
 124:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     public:
ARM GAS  /tmp/ccFECPfA.s 			page 165


 125:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef __iter<_Tp>				   iterator;
 126:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef __iter<const _Tp>				   const_iterator;
 127:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef __ptr_rebind<_Ptr, _Tp>			   _Elt_pointer;
 128:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef __ptr_rebind<_Ptr, _Elt_pointer>		   _Map_pointer;
 129:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 130:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 132:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return __deque_buf_size(sizeof(_Tp)); }
 133:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 134:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef std::random_access_iterator_tag	iterator_category;
 135:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Tp				value_type;
 136:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Ptr				pointer;
 137:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Ref				reference;
 138:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef size_t				size_type;
 139:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef ptrdiff_t				difference_type;
 140:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Deque_iterator			_Self;
 141:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 142:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Elt_pointer _M_cur;
 143:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Elt_pointer _M_first;
 144:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Elt_pointer _M_last;
 145:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer _M_node;
 146:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
 148:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_cur(__x), _M_first(*__y),
 149:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last(*__y + _S_buffer_size()), _M_node(__y) { }
 150:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 151:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_iterator() _GLIBCXX_NOEXCEPT
 152:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_cur(), _M_first(), _M_last(), _M_node() { }
 153:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 154:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
 155:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Conversion from iterator to const_iterator.
 156:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
 157:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 158:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last(__x._M_last), _M_node(__x._M_node) { }
 159:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
 160:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Conversion from iterator to const_iterator.
 161:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _Iter,
 162:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	       typename = _Require<is_same<_Self, const_iterator>,
 163:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				   is_same<_Iter, iterator>>>
 164:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        _Deque_iterator(const _Iter& __x) noexcept
 165:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        : _M_cur(__x._M_cur), _M_first(__x._M_first),
 166:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 167:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 168:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_iterator(const _Deque_iterator& __x) noexcept
 169:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        : _M_cur(__x._M_cur), _M_first(__x._M_first),
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 171:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 172:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_iterator& operator=(const _Deque_iterator&) = default;
 173:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 174:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 175:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
 176:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_const_cast() const _GLIBCXX_NOEXCEPT
 177:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return iterator(_M_cur, _M_node); }
 178:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 179:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reference
 180:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator*() const _GLIBCXX_NOEXCEPT
 181:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return *_M_cur; }
ARM GAS  /tmp/ccFECPfA.s 			page 166


 182:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 183:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       pointer
 184:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator->() const _GLIBCXX_NOEXCEPT
 185:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _M_cur; }
 186:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 187:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Self&
 188:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator++() _GLIBCXX_NOEXCEPT
 189:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 190:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	++_M_cur;
 191:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (_M_cur == _M_last)
 192:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 193:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_set_node(_M_node + 1);
 194:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_cur = _M_first;
 195:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 196:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *this;
 197:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 198:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Self
 200:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 201:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 202:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Self __tmp = *this;
 203:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	++*this;
 204:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return __tmp;
 205:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 206:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 207:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Self&
 208:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator--() _GLIBCXX_NOEXCEPT
 209:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 210:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (_M_cur == _M_first)
 211:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 212:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_set_node(_M_node - 1);
 213:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_cur = _M_last;
 214:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 215:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	--_M_cur;
 216:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *this;
 217:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 218:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 219:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Self
 220:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 221:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 222:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Self __tmp = *this;
 223:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	--*this;
 224:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return __tmp;
 225:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 226:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 227:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Self&
 228:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
 229:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 230:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const difference_type __offset = __n + (_M_cur - _M_first);
 231:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__offset >= 0 && __offset < difference_type(_S_buffer_size()))
 232:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_cur += __n;
 233:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else
 234:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 235:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    const difference_type __node_offset =
 236:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      __offset > 0 ? __offset / difference_type(_S_buffer_size())
 237:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			   : -difference_type((-__offset - 1)
 238:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					      / _S_buffer_size()) - 1;
ARM GAS  /tmp/ccFECPfA.s 			page 167


 239:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_set_node(_M_node + __node_offset);
 240:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_cur = _M_first + (__offset - __node_offset
 241:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				 * difference_type(_S_buffer_size()));
 242:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 243:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *this;
 244:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 245:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 246:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Self&
 247:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 248:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return *this += -__n; }
 249:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 250:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reference
 251:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 252:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return *(*this + __n); }
 253:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 254:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 255:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Prepares to traverse new_node.  Sets everything except
 256:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  _M_cur, which should therefore be set by the caller
 257:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  immediately afterwards, based on _M_first and _M_last.
 258:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 259:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
 260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 261:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_node = __new_node;
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_first = *__new_node;
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 265:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 266:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 267:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend bool
 268:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 269:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return __x._M_cur == __y._M_cur; }
 270:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 271:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Note: we also provide overloads whose operands are of the same type in
 272:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // order to avoid ambiguous overload resolution when std::rel_ops
 273:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // operators are in scope (for additional details, see libstdc++/3628)
 274:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _RefR, typename _PtrR>
 275:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	friend bool
 276:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator==(const _Self& __x,
 277:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 278:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_GLIBCXX_NOEXCEPT
 279:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ return __x._M_cur == __y._M_cur; }
 280:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 281:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cpp_lib_three_way_comparison
 282:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend strong_ordering
 283:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator<=>(const _Self& __x, const _Self& __y) noexcept
 284:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 285:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (const auto __cmp = __x._M_node <=> __y._M_node; __cmp != 0)
 286:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  return __cmp;
 287:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return __x._M_cur <=> __y._M_cur;
 288:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 289:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
 290:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend bool
 291:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 292:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return !(__x == __y); }
 293:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 294:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _RefR, typename _PtrR>
 295:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	friend bool
ARM GAS  /tmp/ccFECPfA.s 			page 168


 296:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator!=(const _Self& __x,
 297:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 298:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_GLIBCXX_NOEXCEPT
 299:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ return !(__x == __y); }
 300:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 301:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend bool
 302:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator<(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 303:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 304:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return (__x._M_node == __y._M_node)
 305:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);
 306:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 307:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 308:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _RefR, typename _PtrR>
 309:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	friend bool
 310:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator<(const _Self& __x,
 311:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 312:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_GLIBCXX_NOEXCEPT
 313:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 314:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  return (__x._M_node == __y._M_node)
 315:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);
 316:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 317:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 318:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend bool
 319:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator>(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 320:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return __y < __x; }
 321:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 322:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _RefR, typename _PtrR>
 323:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	friend bool
 324:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator>(const _Self& __x,
 325:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 326:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_GLIBCXX_NOEXCEPT
 327:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ return __y < __x; }
 328:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 329:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend bool
 330:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator<=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 331:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return !(__y < __x); }
 332:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 333:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _RefR, typename _PtrR>
 334:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	friend bool
 335:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator<=(const _Self& __x,
 336:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 337:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_GLIBCXX_NOEXCEPT
 338:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ return !(__y < __x); }
 339:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 340:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend bool
 341:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator>=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 342:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return !(__x < __y); }
 343:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 344:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _RefR, typename _PtrR>
 345:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	friend bool
 346:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator>=(const _Self& __x,
 347:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y)
 348:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_GLIBCXX_NOEXCEPT
 349:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ return !(__x < __y); }
 350:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif // three-way comparison
 351:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 352:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend difference_type
ARM GAS  /tmp/ccFECPfA.s 			page 169


 353:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 354:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 355:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return difference_type(_S_buffer_size())
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 357:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 358:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 359:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 360:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 361:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // According to the resolution of DR179 not only the various comparison
 362:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // operators but also operator- must accept mixed iterator/const_iterator
 363:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // parameters.
 364:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _RefR, typename _PtrR>
 365:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	friend difference_type
 366:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator-(const _Self& __x,
 367:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT
 368:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 369:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  return difference_type(_S_buffer_size())
 370:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 371:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    + (__y._M_last - __y._M_cur);
 372:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 373:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 374:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend _Self
 375:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 376:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 377:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Self __tmp = __x;
 378:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__tmp += __n;
 379:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return __tmp;
 380:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 381:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 382:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend _Self
 383:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT
 384:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 385:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Self __tmp = __x;
 386:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__tmp -= __n;
 387:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return __tmp;
 388:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 389:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 390:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       friend _Self
 391:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator+(difference_type __n, const _Self& __x) _GLIBCXX_NOEXCEPT
 392:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return __x + __n; }
 393:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     };
 394:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 395:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   /**
 396:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Deque base class.  This class provides the unified face for %deque's
 397:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  allocation.  This class's constructor and destructor allocate and
 398:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  deallocate (but do not initialize) storage.  This makes %exception
 399:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  safety easier.
 400:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 401:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Nothing in this class ever constructs or destroys an actual Tp element.
 402:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  (Deque handles that itself.)  Only/All memory management is performed
 403:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  here.
 404:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   */
 405:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   template<typename _Tp, typename _Alloc>
 406:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     class _Deque_base
 407:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     {
 408:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     protected:
 409:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
ARM GAS  /tmp/ccFECPfA.s 			page 170


 410:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	rebind<_Tp>::other _Tp_alloc_type;
 411:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	 _Alloc_traits;
 412:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 413:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
 414:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Tp*					_Ptr;
 415:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef const _Tp*				_Ptr_const;
 416:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
 417:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc_traits::pointer		_Ptr;
 418:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc_traits::const_pointer	_Ptr_const;
 419:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 420:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 421:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc_traits::template rebind<_Ptr>::other
 422:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Map_alloc_type;
 423:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef __gnu_cxx::__alloc_traits<_Map_alloc_type> _Map_alloc_traits;
 424:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 425:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Alloc		  allocator_type;
 426:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 427:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       allocator_type
 428:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 429:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 430:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 431:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Deque_iterator<_Tp, _Tp&, _Ptr>	  iterator;
 432:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;
 433:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 434:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_base()
 435:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl()
 436:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_initialize_map(0); }
 437:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 438:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_base(size_t __num_elements)
 439:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl()
 440:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_initialize_map(__num_elements); }
 441:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 442:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_base(const allocator_type& __a, size_t __num_elements)
 443:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl(__a)
 444:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_initialize_map(__num_elements); }
 445:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 446:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_base(const allocator_type& __a)
 447:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl(__a)
 448:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { /* Caller must initialize map. */ }
 449:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 450:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 451:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_base(_Deque_base&& __x)
 452:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 453:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 454:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_initialize_map(0);
 455:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__x._M_impl._M_map)
 456:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 457:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 458:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 459:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_base(_Deque_base&& __x, const allocator_type& __a)
 460:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl(std::move(__x._M_impl), _Tp_alloc_type(__a))
 461:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { __x._M_initialize_map(0); }
 462:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 463:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_base(_Deque_base&& __x, const allocator_type& __a, size_t __n)
 464:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl(__a)
 465:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 466:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__x.get_allocator() == __a)
ARM GAS  /tmp/ccFECPfA.s 			page 171


 467:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 468:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    if (__x._M_impl._M_map)
 469:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      {
 470:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		_M_initialize_map(0);
 471:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		this->_M_impl._M_swap_data(__x._M_impl);
 472:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      }
 473:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 474:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else
 475:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 476:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_initialize_map(__n);
 477:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 478:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 479:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 480:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 481:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ~_Deque_base() _GLIBCXX_NOEXCEPT;
 482:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 483:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename iterator::_Map_pointer _Map_pointer;
 484:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 485:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       struct _Deque_impl_data
 486:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 487:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Map_pointer _M_map;
 488:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	size_t _M_map_size;
 489:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	iterator _M_start;
 490:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	iterator _M_finish;
 491:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 492:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 493:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 494:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ }
 495:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 496:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 497:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl_data(const _Deque_impl_data&) = default;
 498:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl_data&
 499:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	operator=(const _Deque_impl_data&) = default;
 500:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 501:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl_data(_Deque_impl_data&& __x) noexcept
 502:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _Deque_impl_data(__x)
 503:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ __x = _Deque_impl_data(); }
 504:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 505:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 506:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
 507:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_swap_data(_Deque_impl_data& __x) _GLIBCXX_NOEXCEPT
 508:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 509:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 510:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  // information used by TBAA.
 511:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  std::swap(*this, __x);
 512:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 513:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       };
 514:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 515:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // This struct encapsulates the implementation of the std::deque
 516:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // standard container and at the same time makes use of the EBO
 517:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // for empty allocators.
 518:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       struct _Deque_impl
 519:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : public _Tp_alloc_type, public _Deque_impl_data
 520:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 521:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 522:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
 523:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _Tp_alloc_type()
ARM GAS  /tmp/ccFECPfA.s 			page 172


 524:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ }
 525:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 526:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 527:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _Tp_alloc_type(__a)
 528:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ }
 529:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 530:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 531:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl(_Deque_impl&&) = default;
 532:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 533:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl(_Tp_alloc_type&& __a) noexcept
 534:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _Tp_alloc_type(std::move(__a))
 535:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ }
 536:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 537:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Deque_impl(_Deque_impl&& __d, _Tp_alloc_type&& __a)
 538:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _Tp_alloc_type(std::move(__a)), _Deque_impl_data(std::move(__d))
 539:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ }
 540:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 541:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       };
 542:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 543:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Tp_alloc_type&
 544:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 545:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl; }
 546:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 547:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const _Tp_alloc_type&
 548:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 549:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl; }
 550:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 551:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_alloc_type
 552:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 553:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 554:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 555:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Ptr
 556:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_allocate_node()
 557:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 558:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 559:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 560:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 561:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 562:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
 563:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 564:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 565:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Traits;
 566:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 567:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 568:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 569:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer
 570:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_allocate_map(size_t __n)
 571:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 572:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 573:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return _Map_alloc_traits::allocate(__map_alloc, __n);
 574:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 575:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 576:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
 577:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 578:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 579:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 580:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
ARM GAS  /tmp/ccFECPfA.s 			page 173


 581:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 582:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 583:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void _M_initialize_map(size_t);
 584:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish);
 585:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void _M_destroy_nodes(_Map_pointer __nstart,
 586:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			    _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT;
 587:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       enum { _S_initial_map_size = 8 };
 588:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 589:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Deque_impl _M_impl;
 590:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     };
 591:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 592:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   template<typename _Tp, typename _Alloc>
 593:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 594:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     ~_Deque_base() _GLIBCXX_NOEXCEPT
 595:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     {
 596:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       if (this->_M_impl._M_map)
 597:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 598:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 599:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			   this->_M_impl._M_finish._M_node + 1);
 600:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 601:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 602:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     }
 603:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 604:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   /**
 605:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @brief Layout storage.
 606:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @param  __num_elements  The count of T's for which to allocate space
 607:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *                          at first.
 608:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @return   Nothing.
 609:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 610:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  The initial underlying memory layout is a bit complicated...
 611:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   */
 612:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   template<typename _Tp, typename _Alloc>
 613:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     void
 614:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 615:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 616:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     {
 617:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 618:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				  + 1);
 619:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 620:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 621:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					   size_t(__num_nodes + 2));
 622:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 623:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 624:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // For "small" maps (needing less than _M_map_size nodes), allocation
 625:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // starts in the middle elements and grows outwards.  So nstart may be
 626:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // the beginning of _M_map, but for small maps it may be as far in as
 627:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // _M_map+3.
 628:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 629:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer __nstart = (this->_M_impl._M_map
 630:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 631:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer __nfinish = __nstart + __num_nodes;
 632:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 633:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       __try
 634:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ _M_create_nodes(__nstart, __nfinish); }
 635:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       __catch(...)
 636:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 637:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
ARM GAS  /tmp/ccFECPfA.s 			page 174


 638:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  this->_M_impl._M_map = _Map_pointer();
 639:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 640:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  __throw_exception_again;
 641:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 642:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 643:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_start._M_set_node(__nstart);
 644:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 645:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 646:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 647:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					+ __num_elements
 648:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 649:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     }
 650:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 651:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   template<typename _Tp, typename _Alloc>
 652:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     void
 653:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 654:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
 655:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     {
 656:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer __cur;
 657:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       __try
 658:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 659:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 660:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 661:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 662:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       __catch(...)
 663:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 664:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_destroy_nodes(__nstart, __cur);
 665:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  __throw_exception_again;
 666:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 667:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     }
 668:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 669:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   template<typename _Tp, typename _Alloc>
 670:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     void
 671:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _Deque_base<_Tp, _Alloc>::
 1286              		.loc 13 671 5 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		.loc 13 671 5 is_stmt 0 view .LVU267
 1291 0000 38B5     		push	{r3, r4, r5, lr}
 1292              	.LCFI13:
 1293              		.cfi_def_cfa_offset 16
 1294              		.cfi_offset 3, -16
 1295              		.cfi_offset 4, -12
 1296              		.cfi_offset 5, -8
 1297              		.cfi_offset 14, -4
 1298 0002 0C46     		mov	r4, r1
 1299 0004 1546     		mov	r5, r2
 1300              	.LVL85:
 1301              		.loc 13 671 5 view .LVU268
 1302 0006 05E0     		b	.L52
 1303              	.LVL86:
 1304              	.L54:
 1305              	.LBB1296:
 1306              	.LBB1297:
 1307              	.LBI1297:
 563:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
ARM GAS  /tmp/ccFECPfA.s 			page 175


 1308              		.loc 13 563 7 is_stmt 1 discriminator 2 view .LVU269
 1309              	.LBB1298:
 1310              	.LBB1299:
 1311              	.LBI1299:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1312              		.loc 7 491 7 discriminator 2 view .LVU270
 1313              	.LBB1300:
 1314              	.LBI1300:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1315              		.loc 8 126 7 discriminator 2 view .LVU271
 1316              	.LBB1301:
 1317              		.loc 8 139 19 is_stmt 0 discriminator 2 view .LVU272
 1318 0008 4FF4FC71 		mov	r1, #504
 1319 000c 54F8040B 		ldr	r0, [r4], #4
 1320              	.LVL87:
 1321              		.loc 8 139 19 discriminator 2 view .LVU273
 1322 0010 FFF7FEFF 		bl	_ZdlPvj
 1323              	.LVL88:
 1324              		.loc 8 139 19 discriminator 2 view .LVU274
 1325              	.LBE1301:
 1326              	.LBE1300:
 1327              	.LBE1299:
 1328              	.LBE1298:
 1329              	.LBE1297:
 672:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _M_destroy_nodes(_Map_pointer __nstart,
 673:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
 674:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     {
 675:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 1330              		.loc 13 675 7 is_stmt 1 discriminator 2 view .LVU275
 1331              	.L52:
 1332              		.loc 13 675 45 discriminator 3 view .LVU276
 1333 0014 AC42     		cmp	r4, r5
 1334 0016 F7D3     		bcc	.L54
 1335              		.loc 13 675 45 is_stmt 0 discriminator 3 view .LVU277
 1336              	.LBE1296:
 676:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_deallocate_node(*__n);
 677:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     }
 1337              		.loc 13 677 5 view .LVU278
 1338 0018 38BD     		pop	{r3, r4, r5, pc}
 1339              		.loc 13 677 5 view .LVU279
 1340              		.cfi_endproc
 1341              	.LFE2201:
 1342              		.cantunwind
 1343              		.fnend
 1345              		.section	.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 1346              		.align	1
 1347              		.weak	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 1348              		.syntax unified
 1349              		.thumb
 1350              		.thumb_func
 1351              		.fpu fpv4-sp-d16
 1353              	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:
 1354              		.fnstart
 1355              	.LVL89:
 1356              	.LFB2134:
 593:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     ~_Deque_base() _GLIBCXX_NOEXCEPT
 1357              		.loc 13 593 5 is_stmt 1 view -0
ARM GAS  /tmp/ccFECPfA.s 			page 176


 1358              		.cfi_startproc
 1359              		@ args = 0, pretend = 0, frame = 0
 1360              		@ frame_needed = 0, uses_anonymous_args = 0
 593:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     ~_Deque_base() _GLIBCXX_NOEXCEPT
 1361              		.loc 13 593 5 is_stmt 0 view .LVU281
 1362 0000 10B5     		push	{r4, lr}
 1363              	.LCFI14:
 1364              		.cfi_def_cfa_offset 8
 1365              		.cfi_offset 4, -8
 1366              		.cfi_offset 14, -4
 1367 0002 0446     		mov	r4, r0
 1368              	.LBB1302:
 596:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 1369              		.loc 13 596 25 view .LVU282
 1370 0004 0368     		ldr	r3, [r0]
 596:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 1371              		.loc 13 596 7 view .LVU283
 1372 0006 4BB1     		cbz	r3, .L56
 599:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 1373              		.loc 13 599 31 view .LVU284
 1374 0008 426A     		ldr	r2, [r0, #36]
 598:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			   this->_M_impl._M_finish._M_node + 1);
 1375              		.loc 13 598 20 view .LVU285
 1376 000a 0432     		adds	r2, r2, #4
 1377 000c 4169     		ldr	r1, [r0, #20]
 1378 000e FFF7FEFF 		bl	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nod
 1379              	.LVL90:
 600:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 1380              		.loc 13 600 21 view .LVU286
 1381 0012 6168     		ldr	r1, [r4, #4]
 1382              	.LVL91:
 1383              	.LBB1303:
 1384              	.LBI1303:
 577:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 1385              		.loc 13 577 7 is_stmt 1 view .LVU287
 1386              	.LBB1304:
 1387              	.LBB1305:
 1388              	.LBI1305:
 552:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 1389              		.loc 13 552 7 view .LVU288
 1390              	.LBB1306:
 1391              	.LBI1306:
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 1392              		.loc 9 177 2 view .LVU289
 1393              	.LBB1307:
 1394              	.LBI1307:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1395              		.loc 8 79 7 view .LVU290
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1396              		.loc 8 79 7 is_stmt 0 view .LVU291
 1397              	.LBE1307:
 1398              	.LBE1306:
 1399              	.LBE1305:
 1400              	.LBB1308:
 1401              	.LBI1308:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1402              		.loc 7 491 7 is_stmt 1 view .LVU292
ARM GAS  /tmp/ccFECPfA.s 			page 177


 1403              	.LBB1309:
 1404              	.LBI1309:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1405              		.loc 8 126 7 view .LVU293
 1406              	.LBB1310:
 1407              		.loc 8 139 19 is_stmt 0 view .LVU294
 1408 0014 8900     		lsls	r1, r1, #2
 1409              	.LVL92:
 1410              		.loc 8 139 19 view .LVU295
 1411 0016 2068     		ldr	r0, [r4]
 1412 0018 FFF7FEFF 		bl	_ZdlPvj
 1413              	.LVL93:
 1414              		.loc 8 139 19 view .LVU296
 1415              	.LBE1310:
 1416              	.LBE1309:
 1417              	.LBE1308:
 1418              	.LBB1311:
 1419              	.LBI1311:
 1420              		.loc 9 182 7 is_stmt 1 view .LVU297
 1421              	.LBB1312:
 1422              	.LBI1312:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1423              		.loc 8 89 7 view .LVU298
 1424              	.L56:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1425              		.loc 8 89 7 is_stmt 0 view .LVU299
 1426              	.LBE1312:
 1427              	.LBE1311:
 1428              	.LBE1304:
 1429              	.LBE1303:
 1430              	.LBB1313:
 1431              	.LBI1313:
 518:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : public _Tp_alloc_type, public _Deque_impl_data
 1432              		.loc 13 518 14 is_stmt 1 view .LVU300
 1433              	.LBB1314:
 1434              	.LBI1314:
 1435              		.loc 9 182 7 view .LVU301
 1436              	.LBB1315:
 1437              	.LBI1315:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1438              		.loc 8 89 7 view .LVU302
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1439              		.loc 8 89 7 is_stmt 0 view .LVU303
 1440              	.LBE1315:
 1441              	.LBE1314:
 1442              	.LBE1313:
 1443              	.LBE1302:
 602:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 1444              		.loc 13 602 5 view .LVU304
 1445 001c 2046     		mov	r0, r4
 1446 001e 10BD     		pop	{r4, pc}
 602:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 1447              		.loc 13 602 5 view .LVU305
 1448              		.cfi_endproc
 1449              	.LFE2134:
 1450              		.cantunwind
 1451              		.fnend
ARM GAS  /tmp/ccFECPfA.s 			page 178


 1453              		.weak	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
 1454              		.thumb_set _ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev,_ZN
 1455              		.section	.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_fr
 1456              		.align	1
 1457              		.weak	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv
 1458              		.syntax unified
 1459              		.thumb
 1460              		.thumb_func
 1461              		.fpu fpv4-sp-d16
 1463              	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv:
 1464              		.fnstart
 1465              	.LVL94:
 1466              	.LFB2215:
 1467              		.file 14 "/usr/include/newlib/c++/10.3.1/bits/deque.tcc"
   1:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // Deque implementation (out of line) -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
   3:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** //
   5:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  11:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  16:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  20:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  25:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * Copyright (c) 1997
  40:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * and its documentation for any purpose is hereby granted without fee,
ARM GAS  /tmp/ccFECPfA.s 			page 179


  44:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  51:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** /** @file bits/deque.tcc
  52:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  *  Do not attempt to use it directly. @headername{deque}
  54:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  56:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #ifndef _DEQUE_TCC
  57:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #define _DEQUE_TCC 1
  58:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  59:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #include <bits/stl_algobase.h>
  60:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  61:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  62:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** {
  63:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  64:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  65:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  66:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
  67:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
  68:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
  69:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
  70:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_default_initialize()
  71:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
  72:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _Map_pointer __cur;
  73:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __try
  74:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
  75:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  for (__cur = this->_M_impl._M_start._M_node;
  76:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	       __cur < this->_M_impl._M_finish._M_node;
  77:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	       ++__cur)
  78:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    std::__uninitialized_default_a(*__cur, *__cur + _S_buffer_size(),
  79:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					   _M_get_Tp_allocator());
  80:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::__uninitialized_default_a(this->_M_impl._M_finish._M_first,
  81:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					 this->_M_impl._M_finish._M_cur,
  82:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					 _M_get_Tp_allocator());
  83:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
  84:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __catch(...)
  85:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
  86:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
  87:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			_M_get_Tp_allocator());
  88:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __throw_exception_again;
  89:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
  90:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
  91:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
  92:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
  93:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
  94:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>&
  95:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
  96:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     operator=(const deque& __x)
  97:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
  98:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (&__x != this)
  99:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 100:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
ARM GAS  /tmp/ccFECPfA.s 			page 180


 101:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 102:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 103:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 104:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 105:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		{
 106:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  // Replacement allocator cannot free existing storage,
 107:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  // so deallocate everything and take copy of __x's data.
 108:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  _M_replace_map(__x, __x.get_allocator());
 109:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::__alloc_on_copy(_M_get_Tp_allocator(),
 110:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				       __x._M_get_Tp_allocator());
 111:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  return *this;
 112:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		}
 113:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 114:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				   __x._M_get_Tp_allocator());
 115:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 116:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 117:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  const size_type __len = size();
 118:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  if (__len >= __x.size())
 119:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _M_erase_at_end(std::copy(__x.begin(), __x.end(),
 120:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				      this->_M_impl._M_start));
 121:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  else
 122:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 123:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      const_iterator __mid = __x.begin() + difference_type(__len);
 124:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      std::copy(__x.begin(), __mid, this->_M_impl._M_start);
 125:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_range_insert_aux(this->_M_impl._M_finish, __mid, __x.end(),
 126:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				  std::random_access_iterator_tag());
 127:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 128:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 129:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       return *this;
 130:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 131:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 132:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 133:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template<typename _Tp, typename _Alloc>
 134:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template<typename... _Args>
 135:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus > 201402L
 136:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       typename deque<_Tp, _Alloc>::reference
 137:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 138:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 139:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 140:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 141:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       emplace_front(_Args&&... __args)
 142:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 143:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
 144:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 145:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _Alloc_traits::construct(this->_M_impl,
 146:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     this->_M_impl._M_start._M_cur - 1,
 147:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     std::forward<_Args>(__args)...);
 148:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    --this->_M_impl._M_start._M_cur;
 149:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 150:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else
 151:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  _M_push_front_aux(std::forward<_Args>(__args)...);
 152:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus > 201402L
 153:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	return front();
 154:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 155:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 156:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 157:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template<typename _Tp, typename _Alloc>
ARM GAS  /tmp/ccFECPfA.s 			page 181


 158:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template<typename... _Args>
 159:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus > 201402L
 160:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       typename deque<_Tp, _Alloc>::reference
 161:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 162:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 163:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 164:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 165:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       emplace_back(_Args&&... __args)
 166:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 167:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (this->_M_impl._M_finish._M_cur
 168:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    != this->_M_impl._M_finish._M_last - 1)
 169:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 170:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _Alloc_traits::construct(this->_M_impl,
 171:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     this->_M_impl._M_finish._M_cur,
 172:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     std::forward<_Args>(__args)...);
 173:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    ++this->_M_impl._M_finish._M_cur;
 174:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 175:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else
 176:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  _M_push_back_aux(std::forward<_Args>(__args)...);
 177:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus > 201402L
 178:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	return back();
 179:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 180:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 181:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 182:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 183:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 184:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template<typename _Tp, typename _Alloc>
 185:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template<typename... _Args>
 186:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       typename deque<_Tp, _Alloc>::iterator
 187:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 188:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       emplace(const_iterator __position, _Args&&... __args)
 189:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 190:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (__position._M_cur == this->_M_impl._M_start._M_cur)
 191:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 192:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    emplace_front(std::forward<_Args>(__args)...);
 193:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    return this->_M_impl._M_start;
 194:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 195:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 196:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 197:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    emplace_back(std::forward<_Args>(__args)...);
 198:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __tmp = this->_M_impl._M_finish;
 199:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    --__tmp;
 200:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    return __tmp;
 201:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 202:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else
 203:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  return _M_insert_aux(__position._M_const_cast(),
 204:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       std::forward<_Args>(__args)...);
 205:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 206:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 207:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 208:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 209:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 210:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 211:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 212:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     insert(const_iterator __position, const value_type& __x)
 213:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 214:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     insert(iterator __position, const value_type& __x)
ARM GAS  /tmp/ccFECPfA.s 			page 182


 215:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 216:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 217:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (__position._M_cur == this->_M_impl._M_start._M_cur)
 218:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 219:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  push_front(__x);
 220:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  return this->_M_impl._M_start;
 221:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 222:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else if (__position._M_cur == this->_M_impl._M_finish._M_cur)
 223:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 224:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  push_back(__x);
 225:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __tmp = this->_M_impl._M_finish;
 226:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  --__tmp;
 227:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  return __tmp;
 228:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 229:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else
 230:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	return _M_insert_aux(__position._M_const_cast(), __x);
 231:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****    }
 232:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 233:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 234:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 235:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 236:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_erase(iterator __position)
 237:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 238:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       iterator __next = __position;
 239:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       ++__next;
 240:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const difference_type __index = __position - begin();
 241:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (static_cast<size_type>(__index) < (size() >> 1))
 242:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 243:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  if (__position != begin())
 244:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _GLIBCXX_MOVE_BACKWARD3(begin(), __position, __next);
 245:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  pop_front();
 246:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 247:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else
 248:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 249:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  if (__next != end())
 250:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _GLIBCXX_MOVE3(__next, end(), __position);
 251:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  pop_back();
 252:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 253:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       return begin() + __index;
 254:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 255:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 256:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 257:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 258:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 259:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_erase(iterator __first, iterator __last)
 260:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 261:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (__first == __last)
 262:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	return __first;
 263:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else if (__first == begin() && __last == end())
 264:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 265:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  clear();
 266:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  return end();
 267:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 268:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else
 269:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 270:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  const difference_type __n = __last - __first;
 271:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  const difference_type __elems_before = __first - begin();
ARM GAS  /tmp/ccFECPfA.s 			page 183


 272:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  if (static_cast<size_type>(__elems_before) <= (size() - __n) / 2)
 273:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 274:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      if (__first != begin())
 275:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		_GLIBCXX_MOVE_BACKWARD3(begin(), __first, __last);
 276:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_erase_at_begin(begin() + __n);
 277:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 278:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  else
 279:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 280:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      if (__last != end())
 281:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		_GLIBCXX_MOVE3(__last, end(), __first);
 282:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_erase_at_end(end() - __n);
 283:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 284:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  return begin() + __elems_before;
 285:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 286:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 287:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 288:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, class _Alloc>
 289:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template <typename _InputIterator>
 290:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 291:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 292:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 293:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    std::input_iterator_tag)
 294:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 295:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	iterator __cur = begin();
 296:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	for (; __first != __last && __cur != end(); ++__cur, (void)++__first)
 297:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  *__cur = *__first;
 298:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (__first == __last)
 299:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  _M_erase_at_end(__cur);
 300:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else
 301:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  _M_range_insert_aux(end(), __first, __last,
 302:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			      std::__iterator_category(__first));
 303:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 304:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 305:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 306:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
 307:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 308:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_fill_insert(iterator __pos, size_type __n, const value_type& __x)
 309:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 310:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 311:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 312:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __new_start = _M_reserve_elements_at_front(__n);
 313:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __try
 314:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 315:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      std::__uninitialized_fill_a(__new_start, this->_M_impl._M_start,
 316:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					  __x, _M_get_Tp_allocator());
 317:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      this->_M_impl._M_start = __new_start;
 318:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 319:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __catch(...)
 320:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 321:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_destroy_nodes(__new_start._M_node,
 322:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       this->_M_impl._M_start._M_node);
 323:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __throw_exception_again;
 324:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 325:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 326:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 327:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 328:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
ARM GAS  /tmp/ccFECPfA.s 			page 184


 329:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __try
 330:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 331:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      std::__uninitialized_fill_a(this->_M_impl._M_finish,
 332:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					  __new_finish, __x,
 333:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					  _M_get_Tp_allocator());
 334:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      this->_M_impl._M_finish = __new_finish;
 335:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 336:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __catch(...)
 337:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 338:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 339:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       __new_finish._M_node + 1);
 340:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __throw_exception_again;
 341:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 342:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 343:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else
 344:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	_M_insert_aux(__pos, __n, __x);
 345:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 346:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 347:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 348:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 349:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
 350:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 351:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_default_append(size_type __n)
 352:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 353:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (__n)
 354:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 355:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 356:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __try
 357:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 358:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      std::__uninitialized_default_a(this->_M_impl._M_finish,
 359:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					     __new_finish,
 360:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					     _M_get_Tp_allocator());
 361:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      this->_M_impl._M_finish = __new_finish;
 362:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 363:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __catch(...)
 364:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 365:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 366:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       __new_finish._M_node + 1);
 367:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __throw_exception_again;
 368:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 369:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 370:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 371:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 372:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 373:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     bool
 374:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 375:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_shrink_to_fit()
 376:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 377:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const difference_type __front_capacity
 378:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	= (this->_M_impl._M_start._M_cur - this->_M_impl._M_start._M_first);
 379:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (__front_capacity == 0)
 380:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	return false;
 381:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 382:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const difference_type __back_capacity
 383:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	= (this->_M_impl._M_finish._M_last - this->_M_impl._M_finish._M_cur);
 384:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (__front_capacity + __back_capacity < _S_buffer_size())
 385:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	return false;
ARM GAS  /tmp/ccFECPfA.s 			page 185


 386:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 387:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       return std::__shrink_to_fit_aux<deque>::_S_do_it(*this);
 388:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 389:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 390:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 391:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 392:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
 393:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 394:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_fill_initialize(const value_type& __value)
 395:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 396:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _Map_pointer __cur;
 397:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __try
 398:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 399:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  for (__cur = this->_M_impl._M_start._M_node;
 400:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	       __cur < this->_M_impl._M_finish._M_node;
 401:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	       ++__cur)
 402:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    std::__uninitialized_fill_a(*__cur, *__cur + _S_buffer_size(),
 403:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					__value, _M_get_Tp_allocator());
 404:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::__uninitialized_fill_a(this->_M_impl._M_finish._M_first,
 405:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				      this->_M_impl._M_finish._M_cur,
 406:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				      __value, _M_get_Tp_allocator());
 407:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 408:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __catch(...)
 409:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 410:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::_Destroy(this->_M_impl._M_start, iterator(*__cur, __cur),
 411:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			_M_get_Tp_allocator());
 412:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __throw_exception_again;
 413:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 414:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 415:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 416:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 417:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template <typename _InputIterator>
 418:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 419:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 420:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_range_initialize(_InputIterator __first, _InputIterator __last,
 421:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  std::input_iterator_tag)
 422:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 423:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	this->_M_initialize_map(0);
 424:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__try
 425:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 426:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    for (; __first != __last; ++__first)
 427:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 428:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      emplace_back(*__first);
 429:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 430:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      push_back(*__first);
 431:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 432:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 433:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__catch(...)
 434:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 435:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    clear();
 436:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __throw_exception_again;
 437:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 438:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 439:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 440:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 441:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template <typename _ForwardIterator>
 442:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
ARM GAS  /tmp/ccFECPfA.s 			page 186


 443:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 444:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 445:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  std::forward_iterator_tag)
 446:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 447:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	const size_type __n = std::distance(__first, __last);
 448:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	this->_M_initialize_map(_S_check_init_len(__n, _M_get_Tp_allocator()));
 449:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 450:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	_Map_pointer __cur_node;
 451:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__try
 452:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 453:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    for (__cur_node = this->_M_impl._M_start._M_node;
 454:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		 __cur_node < this->_M_impl._M_finish._M_node;
 455:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		 ++__cur_node)
 456:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      {
 457:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		_ForwardIterator __mid = __first;
 458:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		std::advance(__mid, _S_buffer_size());
 459:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		std::__uninitialized_copy_a(__first, __mid, *__cur_node,
 460:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					    _M_get_Tp_allocator());
 461:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		__first = __mid;
 462:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      }
 463:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    std::__uninitialized_copy_a(__first, __last,
 464:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					this->_M_impl._M_finish._M_first,
 465:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					_M_get_Tp_allocator());
 466:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 467:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__catch(...)
 468:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 469:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    std::_Destroy(this->_M_impl._M_start,
 470:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  iterator(*__cur_node, __cur_node),
 471:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  _M_get_Tp_allocator());
 472:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __throw_exception_again;
 473:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 474:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 475:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 476:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
 477:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template<typename _Tp, typename _Alloc>
 478:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 479:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template<typename... _Args>
 480:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 481:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 482:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_push_back_aux(_Args&&... __args)
 483:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 484:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 485:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 486:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_push_back_aux(const value_type& __t)
 487:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 488:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 489:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (size() == max_size())
 490:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __throw_length_error(
 491:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __N("cannot create std::deque larger than max_size()"));
 492:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 493:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	_M_reserve_map_at_back();
 494:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 495:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__try
 496:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 497:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 498:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _Alloc_traits::construct(this->_M_impl,
 499:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     this->_M_impl._M_finish._M_cur,
ARM GAS  /tmp/ccFECPfA.s 			page 187


 500:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     std::forward<_Args>(__args)...);
 501:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 502:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
 503:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 504:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 505:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						+ 1);
 506:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 507:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 508:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__catch(...)
 509:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 510:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
 511:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __throw_exception_again;
 512:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 513:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 514:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 515:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_first.
 516:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template<typename _Tp, typename _Alloc>
 517:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 518:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template<typename... _Args>
 519:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 520:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 521:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_push_front_aux(_Args&&... __args)
 522:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 523:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 524:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 525:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_push_front_aux(const value_type& __t)
 526:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 527:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 528:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (size() == max_size())
 529:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __throw_length_error(
 530:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __N("cannot create std::deque larger than max_size()"));
 531:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 532:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	_M_reserve_map_at_front();
 533:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	*(this->_M_impl._M_start._M_node - 1) = this->_M_allocate_node();
 534:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__try
 535:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 536:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node
 537:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					       - 1);
 538:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_last - 1;
 539:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 540:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _Alloc_traits::construct(this->_M_impl,
 541:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     this->_M_impl._M_start._M_cur,
 542:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     std::forward<_Args>(__args)...);
 543:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 544:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    this->_M_impl.construct(this->_M_impl._M_start._M_cur, __t);
 545:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 546:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 547:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__catch(...)
 548:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 549:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    ++this->_M_impl._M_start;
 550:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - 1));
 551:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __throw_exception_again;
 552:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 553:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 554:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 555:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_first.
 556:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
ARM GAS  /tmp/ccFECPfA.s 			page 188


 557:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void deque<_Tp, _Alloc>::
 558:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_pop_back_aux()
 559:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 560:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_deallocate_node(this->_M_impl._M_finish._M_first);
 561:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node - 1);
 562:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_last - 1;
 563:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _Alloc_traits::destroy(_M_get_Tp_allocator(),
 564:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			     this->_M_impl._M_finish._M_cur);
 565:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 566:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 567:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   // Called only if _M_impl._M_start._M_cur == _M_impl._M_start._M_last - 1.
 568:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   // Note that if the deque has at least one element (a precondition for this
 569:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   // member function), and if
 570:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
 571:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   // then the deque must have at least two nodes.
 572:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 573:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void deque<_Tp, _Alloc>::
 1468              		.loc 14 573 10 is_stmt 1 view -0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 0
 1471              		@ frame_needed = 0, uses_anonymous_args = 0
 1472              		.loc 14 573 10 is_stmt 0 view .LVU307
 1473 0000 10B5     		push	{r4, lr}
 1474              	.LCFI15:
 1475              		.cfi_def_cfa_offset 8
 1476              		.cfi_offset 4, -8
 1477              		.cfi_offset 14, -4
 1478 0002 0446     		mov	r4, r0
 574:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_pop_front_aux()
 575:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 576:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _Alloc_traits::destroy(_M_get_Tp_allocator(),
 1479              		.loc 14 576 29 view .LVU308
 1480 0004 8268     		ldr	r2, [r0, #8]
 1481              	.LVL95:
 1482              	.LBB1343:
 1483              	.LBI1343:
 527:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 1484              		.loc 7 527 2 is_stmt 1 view .LVU309
 1485              	.LBB1344:
 1486              	.LBI1344:
 140:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 141:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			  , __t * sizeof(_Tp)
 142:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 143:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			 );
 144:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 145:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 146:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
 147:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       size_type
 148:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 149:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       { return _M_max_size(); }
 150:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 151:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
 152:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 153:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	void
 154:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 155:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 156:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
ARM GAS  /tmp/ccFECPfA.s 			page 189


 157:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 158:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Up>
 159:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	void
 160:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	destroy(_Up* __p)
 1487              		.loc 8 160 2 view .LVU310
 1488              	.LBB1345:
 1489              	.LBI1345:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 1490              		.loc 4 670 7 view .LVU311
 1491              	.LBB1346:
 1492              	.LBI1346:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1493              		.loc 4 237 7 view .LVU312
 1494              	.LBB1347:
 1495              	.LBB1348:
 1496              	.LBI1348:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1497              		.loc 4 229 7 view .LVU313
 1498              	.LBB1349:
 1499              	.LBI1349:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1500              		.loc 4 194 7 view .LVU314
 1501              	.LBB1350:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1502              		.loc 4 195 28 is_stmt 0 view .LVU315
 1503 0006 1346     		mov	r3, r2
 1504 0008 53F8080B 		ldr	r0, [r3], #8
 1505              	.LVL96:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1506              		.loc 4 195 28 view .LVU316
 1507              	.LBE1350:
 1508              	.LBE1349:
 1509              	.LBB1351:
 1510              	.LBI1351:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1511              		.loc 4 208 7 is_stmt 1 view .LVU317
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1512              		.loc 4 208 7 is_stmt 0 view .LVU318
 1513              	.LBE1351:
 1514              	.LBE1348:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1515              		.loc 4 239 2 view .LVU319
 1516 000c 9842     		cmp	r0, r3
 1517 000e 03D0     		beq	.L59
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 1518              		.loc 4 240 14 view .LVU320
 1519 0010 9168     		ldr	r1, [r2, #8]
 1520              	.LVL97:
 1521              	.LBB1352:
 1522              	.LBI1352:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1523              		.loc 4 244 7 is_stmt 1 view .LVU321
 1524              	.LBB1353:
 1525              	.LBB1354:
 1526              	.LBI1354:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1527              		.loc 7 491 7 view .LVU322
ARM GAS  /tmp/ccFECPfA.s 			page 190


 1528              	.LBB1355:
 1529              	.LBI1355:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1530              		.loc 8 126 7 view .LVU323
 1531              	.LBB1356:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 1532              		.loc 8 139 19 is_stmt 0 view .LVU324
 1533 0012 0131     		adds	r1, r1, #1
 1534              	.LVL98:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 1535              		.loc 8 139 19 view .LVU325
 1536 0014 FFF7FEFF 		bl	_ZdlPvj
 1537              	.LVL99:
 1538              	.L59:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 1539              		.loc 8 139 19 view .LVU326
 1540              	.LBE1356:
 1541              	.LBE1355:
 1542              	.LBE1354:
 1543              	.LBE1353:
 1544              	.LBE1352:
 1545              	.LBE1347:
 1546              	.LBE1346:
 1547              	.LBB1357:
 1548              	.LBI1357:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1549              		.loc 4 158 14 is_stmt 1 view .LVU327
 1550              	.LBB1358:
 1551              	.LBI1358:
 1552              		.loc 9 182 7 view .LVU328
 1553              	.LBB1359:
 1554              	.LBI1359:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1555              		.loc 8 89 7 view .LVU329
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1556              		.loc 8 89 7 is_stmt 0 view .LVU330
 1557              	.LBE1359:
 1558              	.LBE1358:
 1559              	.LBE1357:
 1560              	.LBE1345:
 1561              	.LBE1344:
 1562              	.LBE1343:
 1563              	.LBB1360:
 1564              	.LBI1360:
 563:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 1565              		.loc 13 563 7 is_stmt 1 view .LVU331
 1566              	.LBB1361:
 1567              	.LBB1362:
 1568              	.LBI1362:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1569              		.loc 7 491 7 view .LVU332
 1570              	.LBB1363:
 1571              	.LBI1363:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1572              		.loc 8 126 7 view .LVU333
 1573              	.LBB1364:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
ARM GAS  /tmp/ccFECPfA.s 			page 191


 1574              		.loc 8 139 19 is_stmt 0 view .LVU334
 1575 0018 4FF4FC71 		mov	r1, #504
 1576 001c E068     		ldr	r0, [r4, #12]
 1577 001e FFF7FEFF 		bl	_ZdlPvj
 1578              	.LVL100:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 1579              		.loc 8 139 19 view .LVU335
 1580              	.LBE1364:
 1581              	.LBE1363:
 1582              	.LBE1362:
 1583              	.LBE1361:
 1584              	.LBE1360:
 577:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			     this->_M_impl._M_start._M_cur);
 578:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_deallocate_node(this->_M_impl._M_start._M_first);
 579:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 1585              		.loc 14 579 65 view .LVU336
 1586 0022 6369     		ldr	r3, [r4, #20]
 1587              		.loc 14 579 41 view .LVU337
 1588 0024 1A1D     		adds	r2, r3, #4
 1589              	.LVL101:
 1590              	.LBB1365:
 1591              	.LBI1365:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 1592              		.loc 13 260 7 is_stmt 1 view .LVU338
 1593              	.LBB1366:
 262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_first = *__new_node;
 1594              		.loc 13 262 10 is_stmt 0 view .LVU339
 1595 0026 6261     		str	r2, [r4, #20]
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1596              		.loc 13 263 11 view .LVU340
 1597 0028 5B68     		ldr	r3, [r3, #4]
 1598 002a E360     		str	r3, [r4, #12]
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1599              		.loc 13 264 21 view .LVU341
 1600 002c 03F5FC72 		add	r2, r3, #504
 1601              	.LVL102:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1602              		.loc 13 264 10 view .LVU342
 1603 0030 2261     		str	r2, [r4, #16]
 1604              	.LVL103:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1605              		.loc 13 264 10 view .LVU343
 1606              	.LBE1366:
 1607              	.LBE1365:
 580:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 1608              		.loc 14 580 37 view .LVU344
 1609 0032 A360     		str	r3, [r4, #8]
 581:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 1610              		.loc 14 581 5 view .LVU345
 1611 0034 10BD     		pop	{r4, pc}
 1612              		.loc 14 581 5 view .LVU346
 1613              		.cfi_endproc
 1614              	.LFE2215:
 1615              		.cantunwind
 1616              		.fnend
 1618              		.section	.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M
 1619              		.align	1
ARM GAS  /tmp/ccFECPfA.s 			page 192


 1620              		.weak	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_n
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
 1624              		.fpu fpv4-sp-d16
 1626              	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPP
 1627              		.fnstart
 1628              	.LVL104:
 1629              	.LFB2272:
 653:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
 1630              		.loc 13 653 5 is_stmt 1 view -0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 0
 1633              		@ frame_needed = 0, uses_anonymous_args = 0
 653:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
 1634              		.loc 13 653 5 is_stmt 0 view .LVU348
 1635 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1636              		.save {r3, r4, r5, r6, r7, lr}
 1637              	.LCFI16:
 1638              		.cfi_def_cfa_offset 24
 1639              		.cfi_offset 3, -24
 1640              		.cfi_offset 4, -20
 1641              		.cfi_offset 5, -16
 1642              		.cfi_offset 6, -12
 1643              		.cfi_offset 7, -8
 1644              		.cfi_offset 14, -4
 1645 0002 0746     		mov	r7, r0
 1646 0004 0E46     		mov	r6, r1
 1647 0006 1546     		mov	r5, r2
 1648              	.LVL105:
 659:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 1649              		.loc 13 659 15 view .LVU349
 1650 0008 0C46     		mov	r4, r1
 1651 000a 01E0     		b	.L63
 1652              	.LVL106:
 1653              	.L69:
 660:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 1654              		.loc 13 660 13 view .LVU350
 1655 000c 44F8040B 		str	r0, [r4], #4
 1656              	.LVL107:
 659:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 1657              		.loc 13 659 4 is_stmt 1 view .LVU351
 1658              	.L63:
 659:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    *__cur = this->_M_allocate_node();
 1659              		.loc 13 659 33 discriminator 2 view .LVU352
 1660 0010 AC42     		cmp	r4, r5
 1661 0012 11D2     		bcs	.L61
 1662              	.LVL108:
 1663              	.LBB1367:
 1664              	.LBI1367:
 556:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 1665              		.loc 13 556 7 view .LVU353
 1666              	.LBB1368:
 1667              	.LBB1369:
 1668              	.LBI1369:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1669              		.loc 7 459 7 view .LVU354
ARM GAS  /tmp/ccFECPfA.s 			page 193


 1670              	.LBB1370:
 1671              	.LBI1370:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1672              		.loc 8 103 7 view .LVU355
 1673              	.LBB1371:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1674              		.loc 8 121 41 is_stmt 0 view .LVU356
 1675 0014 4FF4FC70 		mov	r0, #504
 1676              	.LEHB6:
 1677 0018 FFF7FEFF 		bl	_Znwj
 1678              	.LVL109:
 1679              	.LEHE6:
 1680 001c F6E7     		b	.L69
 1681              	.L66:
 1682              	.LBE1371:
 1683              	.LBE1370:
 1684              	.LBE1369:
 1685              	.LBE1368:
 1686              	.LBE1367:
 662:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 1687              		.loc 13 662 7 view .LVU357
 1688 001e FFF7FEFF 		bl	__cxa_begin_catch
 1689              	.LVL110:
 664:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  __throw_exception_again;
 1690              		.loc 13 664 20 view .LVU358
 1691 0022 2246     		mov	r2, r4
 1692 0024 3146     		mov	r1, r6
 1693 0026 3846     		mov	r0, r7
 1694 0028 FFF7FEFF 		bl	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nod
 1695              	.LVL111:
 1696              	.LEHB7:
 665:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 1697              		.loc 13 665 4 view .LVU359
 1698 002c FFF7FEFF 		bl	__cxa_rethrow
 1699              	.LVL112:
 1700              	.LEHE7:
 1701              	.L67:
 662:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 1702              		.loc 13 662 7 view .LVU360
 1703 0030 FFF7FEFF 		bl	__cxa_end_catch
 1704              	.LVL113:
 1705              	.LEHB8:
 1706 0034 FFF7FEFF 		bl	__cxa_end_cleanup
 1707              	.LVL114:
 1708              	.LEHE8:
 1709              	.L61:
 667:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 1710              		.loc 13 667 5 view .LVU361
 1711 0038 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 667:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 1712              		.loc 13 667 5 view .LVU362
 1713              		.cfi_endproc
 1714              	.LFE2272:
 1715              		.personality	__gxx_personality_v0
 1716              		.handlerdata
 1717              		.align	2
 1718              	.LLSDA2272:
ARM GAS  /tmp/ccFECPfA.s 			page 194


 1719 0008 FF       		.byte	0xff
 1720 0009 10       		.byte	0x10
 1721 000a 15       		.uleb128 .LLSDATT2272-.LLSDATTD2272
 1722              	.LLSDATTD2272:
 1723 000b 01       		.byte	0x1
 1724 000c 0C       		.uleb128 .LLSDACSE2272-.LLSDACSB2272
 1725              	.LLSDACSB2272:
 1726 000d 18       		.uleb128 .LEHB6-.LFB2272
 1727 000e 04       		.uleb128 .LEHE6-.LEHB6
 1728 000f 1E       		.uleb128 .L66-.LFB2272
 1729 0010 01       		.uleb128 0x1
 1730 0011 2C       		.uleb128 .LEHB7-.LFB2272
 1731 0012 04       		.uleb128 .LEHE7-.LEHB7
 1732 0013 30       		.uleb128 .L67-.LFB2272
 1733 0014 00       		.uleb128 0
 1734 0015 34       		.uleb128 .LEHB8-.LFB2272
 1735 0016 04       		.uleb128 .LEHE8-.LEHB8
 1736 0017 00       		.uleb128 0
 1737 0018 00       		.uleb128 0
 1738              	.LLSDACSE2272:
 1739 0019 01       		.byte	0x1
 1740 001a 00       		.byte	0
 1741 001b 00       		.align	2
 1742 001c 00000000 		.word	0
 1743              	.LLSDATT2272:
 1744              		.section	.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M
 1745              		.fnend
 1747              		.section	.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M
 1748              		.align	1
 1749              		.weak	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initiali
 1750              		.syntax unified
 1751              		.thumb
 1752              		.thumb_func
 1753              		.fpu fpv4-sp-d16
 1755              	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapE
 1756              		.fnstart
 1757              	.LVL115:
 1758              	.LFB2200:
 614:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 1759              		.loc 13 614 5 is_stmt 1 view -0
 1760              		.cfi_startproc
 1761              		@ args = 0, pretend = 0, frame = 8
 1762              		@ frame_needed = 0, uses_anonymous_args = 0
 614:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     _M_initialize_map(size_t __num_elements)
 1763              		.loc 13 614 5 is_stmt 0 view .LVU364
 1764 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1765              		.save {r4, r5, r6, r7, r8, r9, lr}
 1766              	.LCFI17:
 1767              		.cfi_def_cfa_offset 28
 1768              		.cfi_offset 4, -28
 1769              		.cfi_offset 5, -24
 1770              		.cfi_offset 6, -20
 1771              		.cfi_offset 7, -16
 1772              		.cfi_offset 8, -12
 1773              		.cfi_offset 9, -8
 1774              		.cfi_offset 14, -4
 1775              		.pad #12
ARM GAS  /tmp/ccFECPfA.s 			page 195


 1776 0004 83B0     		sub	sp, sp, #12
 1777              	.LCFI18:
 1778              		.cfi_def_cfa_offset 40
 1779 0006 0446     		mov	r4, r0
 1780 0008 0D46     		mov	r5, r1
 617:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				  + 1);
 1781              		.loc 13 617 50 view .LVU365
 1782 000a 2F4B     		ldr	r3, .L82
 1783 000c A3FB0123 		umull	r2, r3, r3, r1
 1784 0010 CA1A     		subs	r2, r1, r3
 1785 0012 03EB5203 		add	r3, r3, r2, lsr #1
 1786 0016 1B09     		lsrs	r3, r3, #4
 617:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				  + 1);
 1787              		.loc 13 617 20 view .LVU366
 1788 0018 5E1C     		adds	r6, r3, #1
 1789              	.LVL116:
 620:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					   size_t(__num_nodes + 2));
 1790              		.loc 13 620 44 view .LVU367
 1791 001a 0822     		movs	r2, #8
 1792 001c 0092     		str	r2, [sp]
 621:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 1793              		.loc 13 621 28 view .LVU368
 1794 001e 0333     		adds	r3, r3, #3
 621:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 1795              		.loc 13 621 9 view .LVU369
 1796 0020 0193     		str	r3, [sp, #4]
 1797              	.LVL117:
 1798              	.LBB1401:
 1799              	.LBI1401:
 254:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 1800              		.loc 12 254 5 is_stmt 1 view .LVU370
 1801              	.LBB1402:
 259:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 1802              		.loc 12 259 7 is_stmt 0 view .LVU371
 1803 0022 9342     		cmp	r3, r2
 1804 0024 17D8     		bhi	.L75
 261:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1805              		.loc 12 261 14 view .LVU372
 1806 0026 6B46     		mov	r3, sp
 1807              	.L71:
 1808              	.LVL118:
 261:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1809              		.loc 12 261 14 view .LVU373
 1810              	.LBE1402:
 1811              	.LBE1401:
 620:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					   size_t(__num_nodes + 2));
 1812              		.loc 13 620 33 view .LVU374
 1813 0028 1868     		ldr	r0, [r3]
 1814              	.LVL119:
 620:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					   size_t(__num_nodes + 2));
 1815              		.loc 13 620 33 view .LVU375
 1816 002a 6060     		str	r0, [r4, #4]
 1817              	.LVL120:
 1818              	.LBB1404:
 1819              	.LBI1404:
 570:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 1820              		.loc 13 570 7 is_stmt 1 view .LVU376
ARM GAS  /tmp/ccFECPfA.s 			page 196


 1821              	.LBB1405:
 1822              	.LBB1406:
 1823              	.LBI1406:
 552:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 1824              		.loc 13 552 7 view .LVU377
 1825              	.LBB1407:
 1826              	.LBI1407:
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 1827              		.loc 9 177 2 view .LVU378
 1828              	.LBB1408:
 1829              	.LBI1408:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1830              		.loc 8 79 7 view .LVU379
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1831              		.loc 8 79 7 is_stmt 0 view .LVU380
 1832              	.LBE1408:
 1833              	.LBE1407:
 1834              	.LBE1406:
 1835              	.LBB1409:
 1836              	.LBI1409:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1837              		.loc 7 459 7 is_stmt 1 view .LVU381
 1838              	.LBB1410:
 1839              	.LBI1410:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1840              		.loc 8 103 7 view .LVU382
 1841              	.LBB1411:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 1842              		.loc 8 111 2 is_stmt 0 view .LVU383
 1843 002c B0F1005F 		cmp	r0, #536870912
 1844 0030 13D2     		bcs	.L80
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1845              		.loc 8 121 41 view .LVU384
 1846 0032 8000     		lsls	r0, r0, #2
 1847              	.LVL121:
 1848              	.LEHB9:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1849              		.loc 8 121 41 view .LVU385
 1850 0034 FFF7FEFF 		bl	_Znwj
 1851              	.LVL122:
 1852              	.LEHE9:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1853              		.loc 8 121 41 view .LVU386
 1854 0038 8046     		mov	r8, r0
 1855              	.LVL123:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1856              		.loc 8 121 41 view .LVU387
 1857              	.LBE1411:
 1858              	.LBE1410:
 1859              	.LBE1409:
 1860              	.LBB1414:
 1861              	.LBI1414:
 1862              		.loc 9 182 7 is_stmt 1 view .LVU388
 1863              	.LBB1415:
 1864              	.LBI1415:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1865              		.loc 8 89 7 view .LVU389
ARM GAS  /tmp/ccFECPfA.s 			page 197


  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1866              		.loc 8 89 7 is_stmt 0 view .LVU390
 1867              	.LBE1415:
 1868              	.LBE1414:
 1869              	.LBE1405:
 1870              	.LBE1404:
 622:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 1871              		.loc 13 622 28 view .LVU391
 1872 003a 2060     		str	r0, [r4]
 630:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer __nfinish = __nstart + __num_nodes;
 1873              		.loc 13 630 28 view .LVU392
 1874 003c 6768     		ldr	r7, [r4, #4]
 630:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer __nfinish = __nstart + __num_nodes;
 1875              		.loc 13 630 40 view .LVU393
 1876 003e BF1B     		subs	r7, r7, r6
 630:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _Map_pointer __nfinish = __nstart + __num_nodes;
 1877              		.loc 13 630 55 view .LVU394
 1878 0040 7F08     		lsrs	r7, r7, #1
 629:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 1879              		.loc 13 629 20 view .LVU395
 1880 0042 00EB8709 		add	r9, r0, r7, lsl #2
 1881              	.LVL124:
 631:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 1882              		.loc 13 631 20 view .LVU396
 1883 0046 09EB8606 		add	r6, r9, r6, lsl #2
 1884              	.LVL125:
 634:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       __catch(...)
 1885              		.loc 13 634 19 view .LVU397
 1886 004a 3246     		mov	r2, r6
 1887 004c 4946     		mov	r1, r9
 1888 004e 2046     		mov	r0, r4
 1889              	.LEHB10:
 1890 0050 FFF7FEFF 		bl	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_node
 1891              	.LVL126:
 1892              	.LEHE10:
 1893 0054 03E0     		b	.L81
 1894              	.LVL127:
 1895              	.L75:
 1896              	.LBB1418:
 1897              	.LBB1403:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 1898              		.loc 12 260 9 view .LVU398
 1899 0056 01AB     		add	r3, sp, #4
 1900              	.LVL128:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 1901              		.loc 12 260 9 view .LVU399
 1902 0058 E6E7     		b	.L71
 1903              	.LVL129:
 1904              	.L80:
 1905              	.LEHB11:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 1906              		.loc 12 260 9 view .LVU400
 1907              	.LBE1403:
 1908              	.LBE1418:
 1909              	.LBB1419:
 1910              	.LBB1417:
 1911              	.LBB1416:
ARM GAS  /tmp/ccFECPfA.s 			page 198


 1912              	.LBB1413:
 1913              	.LBB1412:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1914              		.loc 8 112 26 view .LVU401
 1915 005a FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 1916              	.LVL130:
 1917              	.LEHE11:
 1918              	.L81:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1919              		.loc 8 112 26 view .LVU402
 1920              	.LBE1412:
 1921              	.LBE1413:
 1922              	.LBE1416:
 1923              	.LBE1417:
 1924              	.LBE1419:
 1925              	.LBB1420:
 1926              	.LBI1420:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 1927              		.loc 13 260 7 is_stmt 1 view .LVU403
 1928              	.LBB1421:
 262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_first = *__new_node;
 1929              		.loc 13 262 10 is_stmt 0 view .LVU404
 1930 005e C4F81490 		str	r9, [r4, #20]
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1931              		.loc 13 263 11 view .LVU405
 1932 0062 58F82730 		ldr	r3, [r8, r7, lsl #2]
 1933 0066 E360     		str	r3, [r4, #12]
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1934              		.loc 13 264 21 view .LVU406
 1935 0068 03F5FC72 		add	r2, r3, #504
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1936              		.loc 13 264 10 view .LVU407
 1937 006c 2261     		str	r2, [r4, #16]
 1938              	.LVL131:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1939              		.loc 13 264 10 view .LVU408
 1940              	.LBE1421:
 1941              	.LBE1420:
 644:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 1942              		.loc 13 644 42 view .LVU409
 1943 006e 321F     		subs	r2, r6, #4
 1944              	.LVL132:
 1945              	.LBB1422:
 1946              	.LBI1422:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 1947              		.loc 13 260 7 is_stmt 1 view .LVU410
 1948              	.LBB1423:
 262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_first = *__new_node;
 1949              		.loc 13 262 10 is_stmt 0 view .LVU411
 1950 0070 6262     		str	r2, [r4, #36]
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1951              		.loc 13 263 11 view .LVU412
 1952 0072 56F8042C 		ldr	r2, [r6, #-4]
 1953              	.LVL133:
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 1954              		.loc 13 263 11 view .LVU413
 1955 0076 E261     		str	r2, [r4, #28]
ARM GAS  /tmp/ccFECPfA.s 			page 199


 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1956              		.loc 13 264 21 view .LVU414
 1957 0078 02F5FC71 		add	r1, r2, #504
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1958              		.loc 13 264 10 view .LVU415
 1959 007c 2162     		str	r1, [r4, #32]
 1960              	.LVL134:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 1961              		.loc 13 264 10 view .LVU416
 1962              	.LBE1423:
 1963              	.LBE1422:
 645:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 1964              		.loc 13 645 37 view .LVU417
 1965 007e A360     		str	r3, [r4, #8]
 648:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     }
 1966              		.loc 13 648 6 view .LVU418
 1967 0080 114B     		ldr	r3, .L82
 1968              	.LVL135:
 648:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     }
 1969              		.loc 13 648 6 view .LVU419
 1970 0082 A3FB0513 		umull	r1, r3, r3, r5
 1971              	.LVL136:
 648:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     }
 1972              		.loc 13 648 6 view .LVU420
 1973 0086 E91A     		subs	r1, r5, r3
 1974 0088 03EB5103 		add	r3, r3, r1, lsr #1
 1975 008c 1B09     		lsrs	r3, r3, #4
 1976 008e 03EB4303 		add	r3, r3, r3, lsl #1
 1977 0092 C3EBC303 		rsb	r3, r3, r3, lsl #3
 1978 0096 EB1A     		subs	r3, r5, r3
 647:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					% __deque_buf_size(sizeof(_Tp)));
 1979              		.loc 13 647 6 view .LVU421
 1980 0098 03EB4303 		add	r3, r3, r3, lsl #1
 1981 009c 02EBC303 		add	r3, r2, r3, lsl #3
 646:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					+ __num_elements
 1982              		.loc 13 646 38 view .LVU422
 1983 00a0 A361     		str	r3, [r4, #24]
 649:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 1984              		.loc 13 649 5 view .LVU423
 1985 00a2 03B0     		add	sp, sp, #12
 1986              	.LCFI19:
 1987              		.cfi_remember_state
 1988              		.cfi_def_cfa_offset 28
 1989              		@ sp needed
 1990 00a4 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1991              	.LVL137:
 1992              	.L76:
 1993              	.LCFI20:
 1994              		.cfi_restore_state
 635:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 1995              		.loc 13 635 7 view .LVU424
 1996 00a8 FFF7FEFF 		bl	__cxa_begin_catch
 1997              	.LVL138:
 637:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  this->_M_impl._M_map = _Map_pointer();
 1998              		.loc 13 637 21 view .LVU425
 1999 00ac 6168     		ldr	r1, [r4, #4]
 2000              	.LVL139:
ARM GAS  /tmp/ccFECPfA.s 			page 200


 2001              	.LBB1424:
 2002              	.LBI1424:
 577:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 2003              		.loc 13 577 7 is_stmt 1 view .LVU426
 2004              	.LBB1425:
 2005              	.LBB1426:
 2006              	.LBI1426:
 552:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 2007              		.loc 13 552 7 view .LVU427
 2008              	.LBB1427:
 2009              	.LBI1427:
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 2010              		.loc 9 177 2 view .LVU428
 2011              	.LBB1428:
 2012              	.LBI1428:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2013              		.loc 8 79 7 view .LVU429
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2014              		.loc 8 79 7 is_stmt 0 view .LVU430
 2015              	.LBE1428:
 2016              	.LBE1427:
 2017              	.LBE1426:
 2018              	.LBB1429:
 2019              	.LBI1429:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2020              		.loc 7 491 7 is_stmt 1 view .LVU431
 2021              	.LBB1430:
 2022              	.LBI1430:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 2023              		.loc 8 126 7 view .LVU432
 2024              	.LBB1431:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2025              		.loc 8 139 19 is_stmt 0 view .LVU433
 2026 00ae 8900     		lsls	r1, r1, #2
 2027              	.LVL140:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2028              		.loc 8 139 19 view .LVU434
 2029 00b0 2068     		ldr	r0, [r4]
 2030 00b2 FFF7FEFF 		bl	_ZdlPvj
 2031              	.LVL141:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2032              		.loc 8 139 19 view .LVU435
 2033              	.LBE1431:
 2034              	.LBE1430:
 2035              	.LBE1429:
 2036              	.LBB1432:
 2037              	.LBI1432:
 2038              		.loc 9 182 7 is_stmt 1 view .LVU436
 2039              	.LBB1433:
 2040              	.LBI1433:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2041              		.loc 8 89 7 view .LVU437
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2042              		.loc 8 89 7 is_stmt 0 view .LVU438
 2043              	.LBE1433:
 2044              	.LBE1432:
 2045              	.LBE1425:
ARM GAS  /tmp/ccFECPfA.s 			page 201


 2046              	.LBE1424:
 638:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  this->_M_impl._M_map_size = 0;
 2047              		.loc 13 638 25 view .LVU439
 2048 00b6 0023     		movs	r3, #0
 2049 00b8 2360     		str	r3, [r4]
 639:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  __throw_exception_again;
 2050              		.loc 13 639 30 view .LVU440
 2051 00ba 6360     		str	r3, [r4, #4]
 2052              	.LEHB12:
 640:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 2053              		.loc 13 640 4 view .LVU441
 2054 00bc FFF7FEFF 		bl	__cxa_rethrow
 2055              	.LVL142:
 2056              	.LEHE12:
 2057              	.L77:
 635:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 2058              		.loc 13 635 7 view .LVU442
 2059 00c0 FFF7FEFF 		bl	__cxa_end_catch
 2060              	.LVL143:
 2061              	.LEHB13:
 2062 00c4 FFF7FEFF 		bl	__cxa_end_cleanup
 2063              	.LVL144:
 2064              	.LEHE13:
 2065              	.L83:
 2066              		.align	2
 2067              	.L82:
 2068 00c8 87611886 		.word	-2045222521
 2069              		.cfi_endproc
 2070              	.LFE2200:
 2071              		.personality	__gxx_personality_v0
 2072              		.handlerdata
 2073              		.align	2
 2074              	.LLSDA2200:
 2075 0008 FF       		.byte	0xff
 2076 0009 10       		.byte	0x10
 2077 000a 21       		.uleb128 .LLSDATT2200-.LLSDATTD2200
 2078              	.LLSDATTD2200:
 2079 000b 01       		.byte	0x1
 2080 000c 18       		.uleb128 .LLSDACSE2200-.LLSDACSB2200
 2081              	.LLSDACSB2200:
 2082 000d 34       		.uleb128 .LEHB9-.LFB2200
 2083 000e 04       		.uleb128 .LEHE9-.LEHB9
 2084 000f 00       		.uleb128 0
 2085 0010 00       		.uleb128 0
 2086 0011 50       		.uleb128 .LEHB10-.LFB2200
 2087 0012 04       		.uleb128 .LEHE10-.LEHB10
 2088 0013 A801     		.uleb128 .L76-.LFB2200
 2089 0015 01       		.uleb128 0x1
 2090 0016 5A       		.uleb128 .LEHB11-.LFB2200
 2091 0017 04       		.uleb128 .LEHE11-.LEHB11
 2092 0018 00       		.uleb128 0
 2093 0019 00       		.uleb128 0
 2094 001a BC01     		.uleb128 .LEHB12-.LFB2200
 2095 001c 04       		.uleb128 .LEHE12-.LEHB12
 2096 001d C001     		.uleb128 .L77-.LFB2200
 2097 001f 00       		.uleb128 0
 2098 0020 C401     		.uleb128 .LEHB13-.LFB2200
ARM GAS  /tmp/ccFECPfA.s 			page 202


 2099 0022 04       		.uleb128 .LEHE13-.LEHB13
 2100 0023 00       		.uleb128 0
 2101 0024 00       		.uleb128 0
 2102              	.LLSDACSE2200:
 2103 0025 01       		.byte	0x1
 2104 0026 00       		.byte	0
 2105 0027 00       		.align	2
 2106 0028 00000000 		.word	0
 2107              	.LLSDATT2200:
 2108              		.section	.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M
 2109              		.fnend
 2111              		.section	.text._Z41__static_initialization_and_destruction_0ii,"ax",%progbits
 2112              		.align	1
 2113              		.syntax unified
 2114              		.thumb
 2115              		.thumb_func
 2116              		.fpu fpv4-sp-d16
 2118              	_Z41__static_initialization_and_destruction_0ii:
 2119              		.fnstart
 2120              	.LVL145:
 2121              	.LFB2421:
  46:App/Src/WioE5.cpp **** 
  47:App/Src/WioE5.cpp **** std::queue<std::string> atCmdQueue;
  48:App/Src/WioE5.cpp **** bool atBusy = false;
  49:App/Src/WioE5.cpp **** 
  50:App/Src/WioE5.cpp **** void WioE5::loop()
  51:App/Src/WioE5.cpp **** {
  52:App/Src/WioE5.cpp ****     // 応答受信後、次のコマンドを送信
  53:App/Src/WioE5.cpp ****     if (rxReady)
  54:App/Src/WioE5.cpp ****     {
  55:App/Src/WioE5.cpp ****         char rx2buffer[128];
  56:App/Src/WioE5.cpp ****         snprintf(rx2buffer, sizeof(rx2buffer), "WioE5: %s\r\n", rxBuffer);
  57:App/Src/WioE5.cpp ****         HAL_UART_Transmit(&huart1, (uint8_t *)rx2buffer, strlen(rx2buffer), 1000);
  58:App/Src/WioE5.cpp ****         rxReady = false;
  59:App/Src/WioE5.cpp ****         atBusy = false;
  60:App/Src/WioE5.cpp ****         HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
  61:App/Src/WioE5.cpp ****     }
  62:App/Src/WioE5.cpp ****     // キューにコマンドがあり、送信中でなければ送信
  63:App/Src/WioE5.cpp ****     if (!atCmdQueue.empty() && !atBusy)
  64:App/Src/WioE5.cpp ****     {
  65:App/Src/WioE5.cpp ****         std::string cmd = atCmdQueue.front();
  66:App/Src/WioE5.cpp ****         atCmdQueue.pop();
  67:App/Src/WioE5.cpp ****         char buffer[64] = {0};
  68:App/Src/WioE5.cpp ****         snprintf(buffer, sizeof(buffer), "%s\r\n", cmd.c_str());
  69:App/Src/WioE5.cpp ****         HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 1000);
  70:App/Src/WioE5.cpp ****         atBusy = true;
  71:App/Src/WioE5.cpp ****     }
  72:App/Src/WioE5.cpp **** }
  73:App/Src/WioE5.cpp **** 
  74:App/Src/WioE5.cpp **** void WioE5::sendAT(const char *cmd)
  75:App/Src/WioE5.cpp **** {
  76:App/Src/WioE5.cpp ****     // コマンドをキューに追加
  77:App/Src/WioE5.cpp ****     atCmdQueue.push(cmd);
  78:App/Src/WioE5.cpp **** }
 2122              		.loc 1 78 1 is_stmt 1 view -0
 2123              		.cfi_startproc
 2124              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccFECPfA.s 			page 203


 2125              		@ frame_needed = 0, uses_anonymous_args = 0
 2126              		.loc 1 78 1 is_stmt 0 view .LVU444
 2127 0000 0128     		cmp	r0, #1
 2128 0002 00D0     		beq	.L90
 2129              	.L87:
 2130 0004 7047     		bx	lr
 2131              	.L90:
 2132              		.loc 1 78 1 discriminator 1 view .LVU445
 2133 0006 4FF6FF73 		movw	r3, #65535
 2134 000a 9942     		cmp	r1, r3
 2135 000c FAD1     		bne	.L87
 2136              		.loc 1 78 1 view .LVU446
 2137 000e 10B5     		push	{r4, lr}
 2138              	.LCFI21:
 2139              		.cfi_def_cfa_offset 8
 2140              		.cfi_offset 4, -8
 2141              		.cfi_offset 14, -4
 2142              	.LVL146:
 2143              	.LBB1458:
 2144              	.LBI1458:
 2145              		.file 15 "/usr/include/newlib/c++/10.3.1/bits/stl_queue.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // Queue implementation -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * purpose.  It is provided "as is" without express or implied warranty.
ARM GAS  /tmp/ccFECPfA.s 			page 204


  37:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * Copyright (c) 1996,1997
  40:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** /** @file bits/stl_queue.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  *  Do not attempt to use it directly. @headername{queue}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #ifndef _STL_QUEUE_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #define _STL_QUEUE_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #include <bits/concept_check.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #include <debug/debug.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #if __cplusplus >= 201103L
  62:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** # include <bits/uses_allocator.h>
  63:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif
  64:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  65:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** {
  67:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****   /**
  70:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  @brief  A standard container giving FIFO behavior.
  71:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *
  72:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  @ingroup sequences
  73:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *
  74:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  @tparam _Tp  Type of element.
  75:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  @tparam _Sequence  Type of underlying sequence, defaults to deque<_Tp>.
  76:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *
  77:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  Meets many of the requirements of a
  78:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  <a href="tables.html#65">container</a>,
  79:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  but does not define anything to do with iterators.  Very few of the
  80:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  other standard container interfaces are defined.
  81:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *
  82:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  This is not a true container, but an @e adaptor.  It holds another
  83:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  container, and provides a wrapper interface to that container.  The
  84:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  wrapper is what enforces strict first-in-first-out %queue behavior.
  85:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *
  86:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  The second template parameter defines the type of the underlying
  87:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  sequence/container.  It defaults to std::deque, but it can be any type
  88:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  that supports @c front, @c back, @c push_back, and @c pop_front,
  89:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  such as std::list or an appropriate user-defined type.
  90:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *
  91:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  Members not found in @a normal containers are @c container_type,
  92:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  which is a typedef for the second Sequence parameter, and @c push and
  93:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****    *  @c pop, which are standard %queue/FIFO operations.
ARM GAS  /tmp/ccFECPfA.s 			page 205


  94:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****   */
  95:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****   template<typename _Tp, typename _Sequence = deque<_Tp> >
  96:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     class queue
  97:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     {
  98:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
  99:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       // concept requirements
 100:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       typedef typename _Sequence::value_type _Sequence_value_type;
 101:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** # if __cplusplus < 201103L
 102:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 103:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** # endif
 104:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       __glibcxx_class_requires(_Sequence, _FrontInsertionSequenceConcept)
 105:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       __glibcxx_class_requires(_Sequence, _BackInsertionSequenceConcept)
 106:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       __glibcxx_class_requires2(_Tp, _Sequence_value_type, _SameTypeConcept)
 107:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif
 108:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 109:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Tp1, typename _Seq1>
 110:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	friend bool
 111:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	operator==(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);
 112:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 113:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Tp1, typename _Seq1>
 114:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	friend bool
 115:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	operator<(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);
 116:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 117:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #if __cpp_lib_three_way_comparison
 118:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Tp1, three_way_comparable _Seq1>
 119:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	friend compare_three_way_result_t<_Seq1>
 120:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	operator<=>(const queue<_Tp1, _Seq1>&, const queue<_Tp1, _Seq1>&);
 121:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif
 122:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 123:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #if __cplusplus >= 201103L
 124:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Alloc>
 125:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	using _Uses = typename
 126:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	  enable_if<uses_allocator<_Sequence, _Alloc>::value>::type;
 127:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 128:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #if __cplusplus >= 201703L
 129:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 130:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       // 2566. Requirements on the first template parameter of container
 131:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       // adaptors
 132:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       static_assert(is_same<_Tp, typename _Sequence::value_type>::value,
 133:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	  "value_type must be the same as the underlying container");
 134:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif // C++17
 135:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif // C++11
 136:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 137:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     public:
 138:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       typedef typename	_Sequence::value_type		value_type;
 139:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       typedef typename	_Sequence::reference		reference;
 140:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       typedef typename	_Sequence::const_reference	const_reference;
 141:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       typedef typename	_Sequence::size_type		size_type;
 142:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       typedef		_Sequence			container_type;
 143:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 144:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     protected:
 145:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /*  Maintainers wondering why this isn't uglified as per style
 146:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  guidelines should note that this name is specified in the standard,
 147:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  C++98 [23.2.3.1].
 148:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  (Why? Presumably for the same reason that it's protected instead
 149:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  of private: to allow derivation.  But none of the other
 150:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  containers allow for derivation.  Odd.)
ARM GAS  /tmp/ccFECPfA.s 			page 206


 151:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 152:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        ///  @c c is the underlying container.
 153:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       _Sequence c;
 154:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 155:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     public:
 156:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 157:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  @brief  Default constructor creates no elements.
 158:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 159:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #if __cplusplus < 201103L
 160:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       explicit
 161:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       queue(const _Sequence& __c = _Sequence())
 162:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       : c(__c) { }
 163:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #else
 164:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Seq = _Sequence, typename _Requires = typename
 165:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	       enable_if<is_default_constructible<_Seq>::value>::type>
 166:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	queue()
 2146              		.loc 15 166 2 is_stmt 1 view .LVU447
 2147              	.LBB1459:
 2148              	.LBB1460:
 167:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	: c() { }
 2149              		.loc 15 167 6 is_stmt 0 view .LVU448
 2150 0010 0C4C     		ldr	r4, .L91
 2151 0012 2822     		movs	r2, #40
 2152 0014 0021     		movs	r1, #0
 2153              	.LVL147:
 2154              		.loc 15 167 6 view .LVU449
 2155 0016 2046     		mov	r0, r4
 2156              	.LVL148:
 2157              		.loc 15 167 6 view .LVU450
 2158 0018 FFF7FEFF 		bl	memset
 2159              	.LVL149:
 2160              	.LBB1461:
 2161              	.LBI1461:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 679:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   /**
 680:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @brief  A standard container using fixed-size memory allocation and
 681:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  constant-time manipulation of elements at either end.
 682:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 683:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @ingroup sequences
 684:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 685:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @tparam _Tp  Type of element.
 686:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 687:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 688:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 689:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 690:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  <a href="tables.html#67">sequence</a>, including the
 691:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  <a href="tables.html#68">optional sequence requirements</a>.
 692:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 693:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  In previous HP/SGI versions of deque, there was an extra template
 694:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  parameter so users could control the node size.  This extension turned
 695:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  out to violate the C++ standard (it can be detected using template
 696:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  template parameters), and it was removed.
 697:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 698:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Here's how a deque<Tp> manages memory.  Each deque has 4 members:
 699:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 700:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  - Tp**        _M_map
 701:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  - size_t      _M_map_size
ARM GAS  /tmp/ccFECPfA.s 			page 207


 702:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  - iterator    _M_start, _M_finish
 703:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 704:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  map_size is at least 8.  %map is an array of map_size
 705:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  pointers-to-@a nodes.  (The name %map has nothing to do with the
 706:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  std::map class, and @b nodes should not be confused with
 707:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  std::list's usage of @a node.)
 708:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 709:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  A @a node has no specific type name as such, but it is referred
 710:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  to as @a node in this file.  It is a simple array-of-Tp.  If Tp
 711:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  is very large, there will be one Tp element per node (i.e., an
 712:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  @a array of one).  For non-huge Tp's, node size is inversely
 713:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  related to Tp size: the larger the Tp, the fewer Tp's will fit
 714:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  in a node.  The goal here is to keep the total size of a node
 715:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  relatively small and constant over different Tp's, to improve
 716:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  allocator efficiency.
 717:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 718:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Not every pointer in the %map array will point to a node.  If
 719:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  the initial number of elements in the deque is small, the
 720:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  /middle/ %map pointers will be valid, and the ones at the edges
 721:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  will be unused.  This same situation will arise as the %map
 722:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  grows: available %map pointers, if any, will be on the ends.  As
 723:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  new nodes are created, only a subset of the %map's pointers need
 724:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  to be copied @a outward.
 725:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 726:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Class invariants:
 727:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * - For any nonsingular iterator i:
 728:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *    - i.node points to a member of the %map array.  (Yes, you read that
 729:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *      correctly:  i.node does not actually point to a node.)  The member of
 730:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *      the %map array is what actually points to the node.
 731:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *    - i.first == *(i.node)    (This points to the node (first Tp element).)
 732:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *    - i.last  == i.first + node_size
 733:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:
 734:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *      the implication of this is that i.cur is always a dereferenceable
 735:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *      pointer, even if i is a past-the-end iterator.
 736:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * - Start and Finish are always nonsingular iterators.  NOTE: this
 737:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * means that an empty deque must have one node, a deque with <N
 738:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * elements (where N is the node buffer size) must have one node, a
 739:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * deque with N through (2N-1) elements must have two nodes, etc.
 740:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * - For every node other than start.node and finish.node, every
 741:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * element in the node is an initialized object.  If start.node ==
 742:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * finish.node, then [start.cur, finish.cur) are initialized
 743:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * objects, and the elements outside that range are uninitialized
 744:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * storage.  Otherwise, [start.cur, start.last) and [finish.first,
 745:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * finish.cur) are initialized objects, and [start.first, start.cur)
 746:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * and [finish.cur, finish.last) are uninitialized storage.
 747:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * - [%map, %map + map_size) is a valid, non-empty range.
 748:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * - [start.node, finish.node] is a valid range contained within
 749:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *   [%map, %map + map_size).
 750:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    * - A pointer in the range [%map, %map + map_size) points to an allocated
 751:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *   node if and only if the pointer is in the range
 752:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *   [start.node, finish.node].
 753:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 754:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  Here's the magic:  nothing in deque is @b aware of the discontiguous
 755:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  storage!
 756:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *
 757:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  The memory setup and layout occurs in the parent, _Base, and the iterator
 758:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  class is entirely responsible for @a leaping from one node to the next.
ARM GAS  /tmp/ccFECPfA.s 			page 208


 759:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  All the implementation routines for deque itself work only through the
 760:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  start and finish iterators.  This keeps the routines simple and sane,
 761:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****    *  and we can use other standard algorithms as well.
 762:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   */
 763:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 764:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     class deque : protected _Deque_base<_Tp, _Alloc>
 765:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     {
 766:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 767:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // concept requirements
 768:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc::value_type	_Alloc_value_type;
 769:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** # if __cplusplus < 201103L
 770:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 771:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** # endif
 772:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 773:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 774:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 775:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 776:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 777:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  "std::deque must have a non-const, non-volatile value_type");
 778:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 779:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 780:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  "std::deque must have the same value_type as its allocator");
 781:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** # endif
 782:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 783:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 784:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Deque_base<_Tp, _Alloc>			_Base;
 785:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 786:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Base::_Alloc_traits		_Alloc_traits;
 787:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Base::_Map_pointer		_Map_pointer;
 788:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 789:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     public:
 790:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Tp					value_type;
 791:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc_traits::pointer		pointer;
 792:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 793:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc_traits::reference		reference;
 794:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 795:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Base::iterator			iterator;
 796:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef typename _Base::const_iterator		const_iterator;
 797:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 798:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 799:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef size_t					size_type;
 800:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef ptrdiff_t					difference_type;
 801:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       typedef _Alloc					allocator_type;
 802:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 803:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     private:
 804:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 805:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return __deque_buf_size(sizeof(_Tp)); }
 806:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 807:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Functions controlling memory layout, and nothing else.
 808:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_initialize_map;
 809:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_create_nodes;
 810:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_destroy_nodes;
 811:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_allocate_node;
 812:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_deallocate_node;
 813:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_allocate_map;
 814:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_deallocate_map;
 815:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_get_Tp_allocator;
ARM GAS  /tmp/ccFECPfA.s 			page 209


 816:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 817:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 818:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  A total of four data members accumulated down the hierarchy.
 819:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  May be accessed via _M_impl.*
 820:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 821:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       using _Base::_M_impl;
 822:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 823:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     public:
 824:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // [23.2.1.1] construct/copy/destroy
 825:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // (assign() and get_allocator() are also listed in this section)
 826:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 827:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 828:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Creates a %deque with no elements.
 829:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 830:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 831:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque() = default;
 2162              		.loc 13 831 7 is_stmt 1 view .LVU451
 2163              	.LBB1462:
 2164              	.LBI1462:
 434:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_impl()
 2165              		.loc 13 434 7 view .LVU452
 2166              	.LBB1463:
 2167              	.LBB1464:
 2168              	.LBB1465:
 2169              	.LBI1465:
 521:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  is_nothrow_default_constructible<_Tp_alloc_type>::value)
 2170              		.loc 13 521 2 view .LVU453
 2171              	.LBB1466:
 2172              	.LBB1467:
 2173              	.LBI1467:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 2174              		.loc 9 164 7 view .LVU454
 2175              	.LBB1468:
 2176              	.LBI1468:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2177              		.loc 8 79 7 view .LVU455
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2178              		.loc 8 79 7 is_stmt 0 view .LVU456
 2179              	.LBE1468:
 2180              	.LBE1467:
 2181              	.LBB1469:
 2182              	.LBI1469:
 492:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 2183              		.loc 13 492 2 is_stmt 1 view .LVU457
 2184              	.LBB1470:
 2185              	.LBB1471:
 493:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ }
 2186              		.loc 13 493 51 is_stmt 0 view .LVU458
 2187 001c 0021     		movs	r1, #0
 2188 001e 2160     		str	r1, [r4]
 2189 0020 6160     		str	r1, [r4, #4]
 2190              	.LVL150:
 2191              	.LBB1472:
 2192              	.LBI1472:
 151:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_cur(), _M_first(), _M_last(), _M_node() { }
 2193              		.loc 13 151 7 is_stmt 1 view .LVU459
 2194              	.LBB1473:
ARM GAS  /tmp/ccFECPfA.s 			page 210


 2195              	.LBB1474:
 152:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2196              		.loc 13 152 50 is_stmt 0 view .LVU460
 2197 0022 A160     		str	r1, [r4, #8]
 2198 0024 E160     		str	r1, [r4, #12]
 2199 0026 2161     		str	r1, [r4, #16]
 2200 0028 6161     		str	r1, [r4, #20]
 2201              	.LVL151:
 152:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2202              		.loc 13 152 50 view .LVU461
 2203              	.LBE1474:
 2204              	.LBE1473:
 2205              	.LBE1472:
 2206              	.LBB1475:
 2207              	.LBI1475:
 151:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _M_cur(), _M_first(), _M_last(), _M_node() { }
 2208              		.loc 13 151 7 is_stmt 1 view .LVU462
 2209              	.LBB1476:
 2210              	.LBB1477:
 152:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2211              		.loc 13 152 50 is_stmt 0 view .LVU463
 2212 002a A161     		str	r1, [r4, #24]
 2213 002c E161     		str	r1, [r4, #28]
 2214 002e 2162     		str	r1, [r4, #32]
 2215 0030 6162     		str	r1, [r4, #36]
 2216              	.LVL152:
 152:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2217              		.loc 13 152 50 view .LVU464
 2218              	.LBE1477:
 2219              	.LBE1476:
 2220              	.LBE1475:
 2221              	.LBE1471:
 2222              	.LBE1470:
 2223              	.LBE1469:
 2224              	.LBE1466:
 2225              	.LBE1465:
 436:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2226              		.loc 13 436 26 view .LVU465
 2227 0032 2046     		mov	r0, r4
 2228 0034 FFF7FEFF 		bl	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_
 2229              	.LVL153:
 436:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2230              		.loc 13 436 26 view .LVU466
 2231              	.LBE1464:
 2232              	.LBE1463:
 2233              	.LBE1462:
 2234              	.LBE1461:
 2235              	.LBE1460:
 2236              	.LBE1459:
 2237              	.LBE1458:
  47:App/Src/WioE5.cpp **** bool atBusy = false;
 2238              		.loc 1 47 25 view .LVU467
 2239 0038 034A     		ldr	r2, .L91+4
 2240 003a 0449     		ldr	r1, .L91+8
 2241 003c 2046     		mov	r0, r4
 2242 003e FFF7FEFF 		bl	__aeabi_atexit
 2243              	.LVL154:
ARM GAS  /tmp/ccFECPfA.s 			page 211


 2244              		.loc 1 78 1 view .LVU468
 2245 0042 10BD     		pop	{r4, pc}
 2246              	.L92:
 2247              		.align	2
 2248              	.L91:
 2249 0044 00000000 		.word	.LANCHOR4
 2250 0048 00000000 		.word	__dso_handle
 2251 004c 00000000 		.word	_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1Ev
 2252              		.cfi_endproc
 2253              	.LFE2421:
 2254              		.cantunwind
 2255              		.fnend
 2257              		.section	.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destro
 2258              		.align	1
 2259              		.weak	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_au
 2260              		.syntax unified
 2261              		.thumb
 2262              		.thumb_func
 2263              		.fpu fpv4-sp-d16
 2265              	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_
 2266              		.fnstart
 2267              	.LVL155:
 2268              	.LFB2283:
 582:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 583:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 584:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template <typename _InputIterator>
 585:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 586:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 587:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_range_insert_aux(iterator __pos,
 588:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  _InputIterator __first, _InputIterator __last,
 589:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  std::input_iterator_tag)
 590:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       { std::copy(__first, __last, std::inserter(*this, __pos)); }
 591:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 592:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 593:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template <typename _ForwardIterator>
 594:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 595:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 596:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_range_insert_aux(iterator __pos,
 597:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  _ForwardIterator __first, _ForwardIterator __last,
 598:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			  std::forward_iterator_tag)
 599:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 600:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	const size_type __n = std::distance(__first, __last);
 601:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (__pos._M_cur == this->_M_impl._M_start._M_cur)
 602:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 603:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __new_start = _M_reserve_elements_at_front(__n);
 604:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __try
 605:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      {
 606:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		std::__uninitialized_copy_a(__first, __last, __new_start,
 607:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					    _M_get_Tp_allocator());
 608:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		this->_M_impl._M_start = __new_start;
 609:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      }
 610:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __catch(...)
 611:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      {
 612:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		_M_destroy_nodes(__new_start._M_node,
 613:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				 this->_M_impl._M_start._M_node);
 614:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		__throw_exception_again;
 615:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      }
ARM GAS  /tmp/ccFECPfA.s 			page 212


 616:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 617:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else if (__pos._M_cur == this->_M_impl._M_finish._M_cur)
 618:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 619:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __new_finish = _M_reserve_elements_at_back(__n);
 620:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __try
 621:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      {
 622:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		std::__uninitialized_copy_a(__first, __last,
 623:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					    this->_M_impl._M_finish,
 624:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					    _M_get_Tp_allocator());
 625:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		this->_M_impl._M_finish = __new_finish;
 626:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      }
 627:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __catch(...)
 628:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      {
 629:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		_M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 630:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				 __new_finish._M_node + 1);
 631:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		__throw_exception_again;
 632:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      }
 633:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 634:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else
 635:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  _M_insert_aux(__pos, __first, __last, __n);
 636:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 637:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 638:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template<typename _Tp, typename _Alloc>
 639:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus >= 201103L
 640:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template<typename... _Args>
 641:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       typename deque<_Tp, _Alloc>::iterator
 642:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 643:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_insert_aux(iterator __pos, _Args&&... __args)
 644:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 645:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	value_type __x_copy(std::forward<_Args>(__args)...); // XXX copy
 646:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #else
 647:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     typename deque<_Tp, _Alloc>::iterator
 648:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 649:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_insert_aux(iterator __pos, const value_type& __x)
 650:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 651:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	value_type __x_copy = __x; // XXX copy
 652:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 653:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	difference_type __index = __pos - this->_M_impl._M_start;
 654:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (static_cast<size_type>(__index) < size() / 2)
 655:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 656:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    push_front(_GLIBCXX_MOVE(front()));
 657:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __front1 = this->_M_impl._M_start;
 658:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    ++__front1;
 659:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __front2 = __front1;
 660:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    ++__front2;
 661:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __pos = this->_M_impl._M_start + __index;
 662:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __pos1 = __pos;
 663:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    ++__pos1;
 664:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _GLIBCXX_MOVE3(__front2, __pos1, __front1);
 665:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 666:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else
 667:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 668:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    push_back(_GLIBCXX_MOVE(back()));
 669:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __back1 = this->_M_impl._M_finish;
 670:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    --__back1;
 671:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __back2 = __back1;
 672:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    --__back2;
ARM GAS  /tmp/ccFECPfA.s 			page 213


 673:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __pos = this->_M_impl._M_start + __index;
 674:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _GLIBCXX_MOVE_BACKWARD3(__pos, __back2, __back1);
 675:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 676:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	*__pos = _GLIBCXX_MOVE(__x_copy);
 677:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	return __pos;
 678:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 679:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 680:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 681:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
 682:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 683:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_insert_aux(iterator __pos, size_type __n, const value_type& __x)
 684:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 685:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const difference_type __elems_before = __pos - this->_M_impl._M_start;
 686:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const size_type __length = this->size();
 687:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       value_type __x_copy = __x;
 688:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (__elems_before < difference_type(__length / 2))
 689:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 690:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __new_start = _M_reserve_elements_at_front(__n);
 691:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __old_start = this->_M_impl._M_start;
 692:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __pos = this->_M_impl._M_start + __elems_before;
 693:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __try
 694:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 695:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      if (__elems_before >= difference_type(__n))
 696:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		{
 697:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  iterator __start_n = (this->_M_impl._M_start
 698:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					+ difference_type(__n));
 699:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::__uninitialized_move_a(this->_M_impl._M_start,
 700:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      __start_n, __new_start,
 701:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      _M_get_Tp_allocator());
 702:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  this->_M_impl._M_start = __new_start;
 703:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 704:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::fill(__pos - difference_type(__n), __pos, __x_copy);
 705:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		}
 706:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      else
 707:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		{
 708:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::__uninitialized_move_fill(this->_M_impl._M_start,
 709:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 __pos, __new_start,
 710:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 this->_M_impl._M_start,
 711:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 __x_copy,
 712:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 _M_get_Tp_allocator());
 713:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  this->_M_impl._M_start = __new_start;
 714:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::fill(__old_start, __pos, __x_copy);
 715:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		}
 716:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 717:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __catch(...)
 718:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 719:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_destroy_nodes(__new_start._M_node,
 720:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       this->_M_impl._M_start._M_node);
 721:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __throw_exception_again;
 722:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 723:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 724:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else
 725:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 726:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 727:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __old_finish = this->_M_impl._M_finish;
 728:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  const difference_type __elems_after =
 729:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    difference_type(__length) - __elems_before;
ARM GAS  /tmp/ccFECPfA.s 			page 214


 730:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __pos = this->_M_impl._M_finish - __elems_after;
 731:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __try
 732:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 733:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      if (__elems_after > difference_type(__n))
 734:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		{
 735:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  iterator __finish_n = (this->_M_impl._M_finish
 736:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					 - difference_type(__n));
 737:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::__uninitialized_move_a(__finish_n,
 738:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      this->_M_impl._M_finish,
 739:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      this->_M_impl._M_finish,
 740:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      _M_get_Tp_allocator());
 741:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 742:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 743:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::fill(__pos, __pos + difference_type(__n), __x_copy);
 744:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		}
 745:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      else
 746:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		{
 747:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::__uninitialized_fill_move(this->_M_impl._M_finish,
 748:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 __pos + difference_type(__n),
 749:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 __x_copy, __pos,
 750:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 this->_M_impl._M_finish,
 751:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 _M_get_Tp_allocator());
 752:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 753:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::fill(__pos, __old_finish, __x_copy);
 754:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		}
 755:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 756:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __catch(...)
 757:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 758:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 759:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       __new_finish._M_node + 1);
 760:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __throw_exception_again;
 761:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 762:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 763:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 764:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 765:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 766:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     template <typename _ForwardIterator>
 767:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       void
 768:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       deque<_Tp, _Alloc>::
 769:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_insert_aux(iterator __pos,
 770:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    _ForwardIterator __first, _ForwardIterator __last,
 771:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    size_type __n)
 772:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       {
 773:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	const difference_type __elemsbefore = __pos - this->_M_impl._M_start;
 774:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	const size_type __length = size();
 775:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	if (static_cast<size_type>(__elemsbefore) < __length / 2)
 776:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 777:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __new_start = _M_reserve_elements_at_front(__n);
 778:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    iterator __old_start = this->_M_impl._M_start;
 779:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __pos = this->_M_impl._M_start + __elemsbefore;
 780:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __try
 781:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      {
 782:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		if (__elemsbefore >= difference_type(__n))
 783:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  {
 784:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    iterator __start_n = (this->_M_impl._M_start
 785:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					  + difference_type(__n));
 786:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    std::__uninitialized_move_a(this->_M_impl._M_start,
ARM GAS  /tmp/ccFECPfA.s 			page 215


 787:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						__start_n, __new_start,
 788:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						_M_get_Tp_allocator());
 789:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    this->_M_impl._M_start = __new_start;
 790:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    _GLIBCXX_MOVE3(__start_n, __pos, __old_start);
 791:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    std::copy(__first, __last, __pos - difference_type(__n));
 792:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  }
 793:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		else
 794:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  {
 795:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    _ForwardIterator __mid = __first;
 796:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    std::advance(__mid, difference_type(__n) - __elemsbefore);
 797:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    std::__uninitialized_move_copy(this->_M_impl._M_start,
 798:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						   __pos, __first, __mid,
 799:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						   __new_start,
 800:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						   _M_get_Tp_allocator());
 801:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    this->_M_impl._M_start = __new_start;
 802:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    std::copy(__mid, __last, __old_start);
 803:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  }
 804:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      }
 805:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __catch(...)
 806:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      {
 807:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		_M_destroy_nodes(__new_start._M_node,
 808:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				 this->_M_impl._M_start._M_node);
 809:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		__throw_exception_again;
 810:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      }
 811:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 812:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	else
 813:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 814:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __new_finish = _M_reserve_elements_at_back(__n);
 815:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  iterator __old_finish = this->_M_impl._M_finish;
 816:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  const difference_type __elemsafter =
 817:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    difference_type(__length) - __elemsbefore;
 818:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __pos = this->_M_impl._M_finish - __elemsafter;
 819:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __try
 820:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 821:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      if (__elemsafter > difference_type(__n))
 822:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		{
 823:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  iterator __finish_n = (this->_M_impl._M_finish
 824:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					 - difference_type(__n));
 825:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::__uninitialized_move_a(__finish_n,
 826:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      this->_M_impl._M_finish,
 827:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      this->_M_impl._M_finish,
 828:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					      _M_get_Tp_allocator());
 829:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 830:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  _GLIBCXX_MOVE_BACKWARD3(__pos, __finish_n, __old_finish);
 831:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::copy(__first, __last, __pos);
 832:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		}
 833:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      else
 834:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		{
 835:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  _ForwardIterator __mid = __first;
 836:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::advance(__mid, __elemsafter);
 837:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::__uninitialized_copy_move(__mid, __last, __pos,
 838:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 this->_M_impl._M_finish,
 839:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 this->_M_impl._M_finish,
 840:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						 _M_get_Tp_allocator());
 841:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  this->_M_impl._M_finish = __new_finish;
 842:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		  std::copy(__first, __mid, __pos);
 843:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		}
ARM GAS  /tmp/ccFECPfA.s 			page 216


 844:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 845:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __catch(...)
 846:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    {
 847:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      _M_destroy_nodes(this->_M_impl._M_finish._M_node + 1,
 848:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       __new_finish._M_node + 1);
 849:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __throw_exception_again;
 850:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    }
 851:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 852:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       }
 853:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 854:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****    template<typename _Tp, typename _Alloc>
 855:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****      void
 856:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****      deque<_Tp, _Alloc>::
 2269              		.loc 14 856 6 is_stmt 1 view -0
 2270              		.cfi_startproc
 2271              		@ args = 0, pretend = 0, frame = 0
 2272              		@ frame_needed = 0, uses_anonymous_args = 0
 2273              		.loc 14 856 6 is_stmt 0 view .LVU470
 2274 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2275              	.LCFI22:
 2276              		.cfi_def_cfa_offset 24
 2277              		.cfi_offset 4, -24
 2278              		.cfi_offset 5, -20
 2279              		.cfi_offset 6, -16
 2280              		.cfi_offset 7, -12
 2281              		.cfi_offset 8, -8
 2282              		.cfi_offset 14, -4
 2283 0004 8846     		mov	r8, r1
 2284 0006 1746     		mov	r7, r2
 2285              	.LBB1575:
 857:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****      _M_destroy_data_aux(iterator __first, iterator __last)
 858:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****      {
 859:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****        for (_Map_pointer __node = __first._M_node + 1;
 2286              		.loc 14 859 43 view .LVU471
 2287 0008 CE68     		ldr	r6, [r1, #12]
 2288              		.loc 14 859 26 view .LVU472
 2289 000a 0436     		adds	r6, r6, #4
 2290              	.LVL156:
 2291              		.loc 14 859 26 view .LVU473
 2292 000c 0DE0     		b	.L98
 2293              	.LVL157:
 2294              	.L96:
 2295              	.LBB1576:
 2296              	.LBB1577:
 2297              	.LBB1578:
 2298              	.LBB1579:
 2299              	.LBB1580:
 2300              	.LBB1581:
 2301              	.LBB1582:
 2302              	.LBB1583:
 2303              	.LBI1583:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2304              		.loc 4 158 14 is_stmt 1 view .LVU474
 2305              	.LBB1584:
 2306              	.LBI1584:
 2307              		.loc 9 182 7 view .LVU475
 2308              	.LBB1585:
ARM GAS  /tmp/ccFECPfA.s 			page 217


 2309              	.LBI1585:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2310              		.loc 8 89 7 view .LVU476
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2311              		.loc 8 89 7 is_stmt 0 view .LVU477
 2312              	.LBE1585:
 2313              	.LBE1584:
 2314              	.LBE1583:
 2315              	.LBE1582:
 2316              	.LBE1581:
 2317              		.file 16 "/usr/include/newlib/c++/10.3.1/bits/stl_construct.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
ARM GAS  /tmp/ccFECPfA.s 			page 218


  47:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #include <new>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #include <bits/stl_iterator_base_types.h> // for iterator_traits
  62:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #include <bits/stl_iterator_base_funcs.h> // for advance
  63:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  64:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** /* This file provides the C++17 functions std::destroy_at, std::destroy, and
  65:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * std::destroy_n, and the C++20 function std::construct_at.
  66:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * It also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions
  67:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * which are defined in all standard modes and so can be used in C++98-14 code.
  68:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * The _Destroy functions will dispatch to destroy_at during constant
  69:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * evaluation, because calls to that function are intercepted by the compiler
  70:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  * to allow use in constant expressions.
  71:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****  */
  72:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  73:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** {
  75:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #if __cplusplus >= 201703L
  78:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template <typename _Tp>
  79:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
  80:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     destroy_at(_Tp* __location)
  81:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
  82:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       if constexpr (__cplusplus > 201703L && is_array_v<_Tp>)
  83:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	{
  84:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	  for (auto& __x : *__location)
  85:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	    std::destroy_at(std::__addressof(__x));
  86:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	}
  87:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       else
  88:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	__location->~_Tp();
  89:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     }
  90:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #if __cplusplus > 201703L
  92:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
  93:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     constexpr auto
  94:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     construct_at(_Tp* __location, _Args&&... __args)
  95:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
  96:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
  97:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  98:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #endif // C++20
  99:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #endif// C++17
 100:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
 101:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   /**
 102:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
 103:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****    * object's constructor with an initializer.
ARM GAS  /tmp/ccFECPfA.s 			page 219


 104:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****    */
 105:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #if __cplusplus >= 201103L
 106:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template<typename _Tp, typename... _Args>
 107:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     inline void
 108:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _Construct(_Tp* __p, _Args&&... __args)
 109:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 110:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #else
 111:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template<typename _T1, typename _T2>
 112:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     inline void
 113:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
 114:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
 115:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 116:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
 117:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
 118:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     }
 119:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #endif
 120:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
 121:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template<typename _T1>
 122:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     inline void
 123:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _Construct_novalue(_T1* __p)
 124:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1; }
 125:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
 126:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template<typename _ForwardIterator>
 127:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _GLIBCXX20_CONSTEXPR void
 128:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last);
 129:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
 130:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   /**
 131:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
 132:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****    */
 133:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template<typename _Tp>
 134:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _GLIBCXX14_CONSTEXPR inline void
 135:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
 136:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
 137:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #if __cplusplus > 201703L
 138:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       std::destroy_at(__pointer);
 139:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #else
 140:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       __pointer->~_Tp();
 141:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** #endif
 142:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     }
 143:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 
 144:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****   template<bool>
 145:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     struct _Destroy_aux
 146:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
 147:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****       template<typename _ForwardIterator>
 148:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	static _GLIBCXX20_CONSTEXPR void
 149:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 150:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	{
 151:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 2318              		.loc 16 151 4 is_stmt 1 view .LVU478
 2319 000e 1834     		adds	r4, r4, #24
 2320              	.LVL158:
 2321              	.L97:
 2322              		.loc 16 151 19 view .LVU479
 2323 0010 A542     		cmp	r5, r4
 2324 0012 09D0     		beq	.L95
 2325              	.LVL159:
 2326              	.LBB1598:
ARM GAS  /tmp/ccFECPfA.s 			page 220


 2327              	.LBI1581:
 135:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
 2328              		.loc 16 135 5 view .LVU480
 2329              	.LBB1597:
 2330              	.LBI1582:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2331              		.loc 4 670 7 view .LVU481
 2332              	.LBB1586:
 2333              	.LBI1586:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2334              		.loc 4 237 7 view .LVU482
 2335              	.LBB1587:
 2336              	.LBB1588:
 2337              	.LBI1588:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2338              		.loc 4 229 7 view .LVU483
 2339              	.LBB1589:
 2340              	.LBI1589:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2341              		.loc 4 194 7 view .LVU484
 2342              	.LBB1590:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2343              		.loc 4 195 28 is_stmt 0 view .LVU485
 2344 0014 2346     		mov	r3, r4
 2345 0016 53F8080B 		ldr	r0, [r3], #8
 2346              	.LVL160:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2347              		.loc 4 195 28 view .LVU486
 2348              	.LBE1590:
 2349              	.LBE1589:
 2350              	.LBB1591:
 2351              	.LBI1591:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2352              		.loc 4 208 7 is_stmt 1 view .LVU487
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2353              		.loc 4 208 7 is_stmt 0 view .LVU488
 2354              	.LBE1591:
 2355              	.LBE1588:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2356              		.loc 4 239 2 view .LVU489
 2357 001a 9842     		cmp	r0, r3
 2358 001c F7D0     		beq	.L96
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2359              		.loc 4 240 14 view .LVU490
 2360 001e A168     		ldr	r1, [r4, #8]
 2361              	.LVL161:
 2362              	.LBB1592:
 2363              	.LBI1592:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2364              		.loc 4 244 7 is_stmt 1 view .LVU491
 2365              	.LBB1593:
 2366              	.LBB1594:
 2367              	.LBI1594:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2368              		.loc 7 491 7 view .LVU492
 2369              	.LBB1595:
 2370              	.LBI1595:
ARM GAS  /tmp/ccFECPfA.s 			page 221


 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 2371              		.loc 8 126 7 view .LVU493
 2372              	.LBB1596:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2373              		.loc 8 139 19 is_stmt 0 view .LVU494
 2374 0020 0131     		adds	r1, r1, #1
 2375              	.LVL162:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2376              		.loc 8 139 19 view .LVU495
 2377 0022 FFF7FEFF 		bl	_ZdlPvj
 2378              	.LVL163:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2379              		.loc 8 139 19 view .LVU496
 2380              	.LBE1596:
 2381              	.LBE1595:
 2382              	.LBE1594:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2383              		.loc 4 245 79 view .LVU497
 2384 0026 F2E7     		b	.L96
 2385              	.LVL164:
 2386              	.L95:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2387              		.loc 4 245 79 view .LVU498
 2388              	.LBE1593:
 2389              	.LBE1592:
 2390              	.LBE1587:
 2391              	.LBE1586:
 2392              	.LBE1597:
 2393              	.LBE1598:
 2394              	.LBE1580:
 2395              	.LBE1579:
 2396              	.LBE1578:
 2397              	.LBE1577:
 2398              	.LBE1576:
 2399              		.loc 14 859 8 is_stmt 1 view .LVU499
 2400 0028 0436     		adds	r6, r6, #4
 2401              	.LVL165:
 2402              	.L98:
 860:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    __node < __last._M_node; ++__node)
 2403              		.loc 14 860 13 view .LVU500
 2404              		.loc 14 860 22 is_stmt 0 view .LVU501
 2405 002a FB68     		ldr	r3, [r7, #12]
 2406              		.loc 14 860 13 view .LVU502
 2407 002c B342     		cmp	r3, r6
 2408 002e 03D9     		bls	.L94
 861:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	 std::_Destroy(*__node, *__node + _S_buffer_size(),
 2409              		.loc 14 861 16 view .LVU503
 2410 0030 3468     		ldr	r4, [r6]
 2411 0032 04F5FC75 		add	r5, r4, #504
 2412              	.LVL166:
 2413              	.LBB1599:
 2414              	.LBI1576:
 2415              		.loc 7 735 5 is_stmt 1 view .LVU504
 2416 0036 EBE7     		b	.L97
 2417              	.LVL167:
 2418              	.L94:
 2419              		.loc 7 735 5 is_stmt 0 view .LVU505
ARM GAS  /tmp/ccFECPfA.s 			page 222


 2420              	.LBE1599:
 2421              	.LBE1575:
 862:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		       _M_get_Tp_allocator());
 863:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 864:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****        if (__first._M_node != __last._M_node)
 2422              		.loc 14 864 20 view .LVU506
 2423 0038 D8F80C20 		ldr	r2, [r8, #12]
 2424              		.loc 14 864 8 view .LVU507
 2425 003c 9342     		cmp	r3, r2
 2426 003e 21D0     		beq	.L99
 865:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	 {
 866:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	   std::_Destroy(__first._M_cur, __first._M_last,
 2427              		.loc 14 866 18 view .LVU508
 2428 0040 D8F80040 		ldr	r4, [r8]
 2429 0044 D8F80850 		ldr	r5, [r8, #8]
 2430              	.LVL168:
 2431              	.LBB1600:
 2432              	.LBI1600:
 2433              		.loc 7 735 5 is_stmt 1 view .LVU509
 2434 0048 00E0     		b	.L102
 2435              	.LVL169:
 2436              	.L101:
 2437              	.LBB1601:
 2438              	.LBB1602:
 2439              	.LBB1603:
 2440              	.LBB1604:
 2441              	.LBB1605:
 2442              	.LBB1606:
 2443              	.LBB1607:
 2444              	.LBI1607:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2445              		.loc 4 158 14 view .LVU510
 2446              	.LBB1608:
 2447              	.LBI1608:
 2448              		.loc 9 182 7 view .LVU511
 2449              	.LBB1609:
 2450              	.LBI1609:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2451              		.loc 8 89 7 view .LVU512
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2452              		.loc 8 89 7 is_stmt 0 view .LVU513
 2453              	.LBE1609:
 2454              	.LBE1608:
 2455              	.LBE1607:
 2456              	.LBE1606:
 2457              	.LBE1605:
 2458              		.loc 16 151 4 is_stmt 1 view .LVU514
 2459 004a 1834     		adds	r4, r4, #24
 2460              	.LVL170:
 2461              	.L102:
 2462              		.loc 16 151 19 view .LVU515
 2463 004c A542     		cmp	r5, r4
 2464 004e 09D0     		beq	.L100
 2465              	.LVL171:
 2466              	.LBB1622:
 2467              	.LBI1605:
 135:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
ARM GAS  /tmp/ccFECPfA.s 			page 223


 2468              		.loc 16 135 5 view .LVU516
 2469              	.LBB1621:
 2470              	.LBI1606:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2471              		.loc 4 670 7 view .LVU517
 2472              	.LBB1610:
 2473              	.LBI1610:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2474              		.loc 4 237 7 view .LVU518
 2475              	.LBB1611:
 2476              	.LBB1612:
 2477              	.LBI1612:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2478              		.loc 4 229 7 view .LVU519
 2479              	.LBB1613:
 2480              	.LBI1613:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2481              		.loc 4 194 7 view .LVU520
 2482              	.LBB1614:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2483              		.loc 4 195 28 is_stmt 0 view .LVU521
 2484 0050 2346     		mov	r3, r4
 2485 0052 53F8080B 		ldr	r0, [r3], #8
 2486              	.LVL172:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2487              		.loc 4 195 28 view .LVU522
 2488              	.LBE1614:
 2489              	.LBE1613:
 2490              	.LBB1615:
 2491              	.LBI1615:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2492              		.loc 4 208 7 is_stmt 1 view .LVU523
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2493              		.loc 4 208 7 is_stmt 0 view .LVU524
 2494              	.LBE1615:
 2495              	.LBE1612:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2496              		.loc 4 239 2 view .LVU525
 2497 0056 9842     		cmp	r0, r3
 2498 0058 F7D0     		beq	.L101
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2499              		.loc 4 240 14 view .LVU526
 2500 005a A168     		ldr	r1, [r4, #8]
 2501              	.LVL173:
 2502              	.LBB1616:
 2503              	.LBI1616:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2504              		.loc 4 244 7 is_stmt 1 view .LVU527
 2505              	.LBB1617:
 2506              	.LBB1618:
 2507              	.LBI1618:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2508              		.loc 7 491 7 view .LVU528
 2509              	.LBB1619:
 2510              	.LBI1619:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 2511              		.loc 8 126 7 view .LVU529
ARM GAS  /tmp/ccFECPfA.s 			page 224


 2512              	.LBB1620:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2513              		.loc 8 139 19 is_stmt 0 view .LVU530
 2514 005c 0131     		adds	r1, r1, #1
 2515              	.LVL174:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2516              		.loc 8 139 19 view .LVU531
 2517 005e FFF7FEFF 		bl	_ZdlPvj
 2518              	.LVL175:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2519              		.loc 8 139 19 view .LVU532
 2520              	.LBE1620:
 2521              	.LBE1619:
 2522              	.LBE1618:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2523              		.loc 4 245 79 view .LVU533
 2524 0062 F2E7     		b	.L101
 2525              	.LVL176:
 2526              	.L100:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2527              		.loc 4 245 79 view .LVU534
 2528              	.LBE1617:
 2529              	.LBE1616:
 2530              	.LBE1611:
 2531              	.LBE1610:
 2532              	.LBE1621:
 2533              	.LBE1622:
 2534              	.LBE1604:
 2535              	.LBE1603:
 2536              	.LBE1602:
 2537              	.LBE1601:
 2538              	.LBE1600:
 867:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			 _M_get_Tp_allocator());
 868:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	   std::_Destroy(__last._M_first, __last._M_cur,
 2539              		.loc 14 868 18 view .LVU535
 2540 0064 7C68     		ldr	r4, [r7, #4]
 2541 0066 3D68     		ldr	r5, [r7]
 2542              	.LVL177:
 2543              	.LBB1623:
 2544              	.LBI1623:
 2545              		.loc 7 735 5 is_stmt 1 view .LVU536
 2546 0068 00E0     		b	.L105
 2547              	.LVL178:
 2548              	.L104:
 2549              	.LBB1624:
 2550              	.LBB1625:
 2551              	.LBB1626:
 2552              	.LBB1627:
 2553              	.LBB1628:
 2554              	.LBB1629:
 2555              	.LBB1630:
 2556              	.LBI1630:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2557              		.loc 4 158 14 view .LVU537
 2558              	.LBB1631:
 2559              	.LBI1631:
 2560              		.loc 9 182 7 view .LVU538
ARM GAS  /tmp/ccFECPfA.s 			page 225


 2561              	.LBB1632:
 2562              	.LBI1632:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2563              		.loc 8 89 7 view .LVU539
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2564              		.loc 8 89 7 is_stmt 0 view .LVU540
 2565              	.LBE1632:
 2566              	.LBE1631:
 2567              	.LBE1630:
 2568              	.LBE1629:
 2569              	.LBE1628:
 2570              		.loc 16 151 4 is_stmt 1 view .LVU541
 2571 006a 1834     		adds	r4, r4, #24
 2572              	.LVL179:
 2573              	.L105:
 2574              		.loc 16 151 19 view .LVU542
 2575 006c A542     		cmp	r5, r4
 2576 006e 1AD0     		beq	.L93
 2577              	.LVL180:
 2578              	.LBB1645:
 2579              	.LBI1628:
 135:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
 2580              		.loc 16 135 5 view .LVU543
 2581              	.LBB1644:
 2582              	.LBI1629:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2583              		.loc 4 670 7 view .LVU544
 2584              	.LBB1633:
 2585              	.LBI1633:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2586              		.loc 4 237 7 view .LVU545
 2587              	.LBB1634:
 2588              	.LBB1635:
 2589              	.LBI1635:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2590              		.loc 4 229 7 view .LVU546
 2591              	.LBB1636:
 2592              	.LBI1636:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2593              		.loc 4 194 7 view .LVU547
 2594              	.LBB1637:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2595              		.loc 4 195 28 is_stmt 0 view .LVU548
 2596 0070 2346     		mov	r3, r4
 2597 0072 53F8080B 		ldr	r0, [r3], #8
 2598              	.LVL181:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2599              		.loc 4 195 28 view .LVU549
 2600              	.LBE1637:
 2601              	.LBE1636:
 2602              	.LBB1638:
 2603              	.LBI1638:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2604              		.loc 4 208 7 is_stmt 1 view .LVU550
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2605              		.loc 4 208 7 is_stmt 0 view .LVU551
 2606              	.LBE1638:
ARM GAS  /tmp/ccFECPfA.s 			page 226


 2607              	.LBE1635:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2608              		.loc 4 239 2 view .LVU552
 2609 0076 9842     		cmp	r0, r3
 2610 0078 F7D0     		beq	.L104
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2611              		.loc 4 240 14 view .LVU553
 2612 007a A168     		ldr	r1, [r4, #8]
 2613              	.LVL182:
 2614              	.LBB1639:
 2615              	.LBI1639:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2616              		.loc 4 244 7 is_stmt 1 view .LVU554
 2617              	.LBB1640:
 2618              	.LBB1641:
 2619              	.LBI1641:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2620              		.loc 7 491 7 view .LVU555
 2621              	.LBB1642:
 2622              	.LBI1642:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 2623              		.loc 8 126 7 view .LVU556
 2624              	.LBB1643:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2625              		.loc 8 139 19 is_stmt 0 view .LVU557
 2626 007c 0131     		adds	r1, r1, #1
 2627              	.LVL183:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2628              		.loc 8 139 19 view .LVU558
 2629 007e FFF7FEFF 		bl	_ZdlPvj
 2630              	.LVL184:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2631              		.loc 8 139 19 view .LVU559
 2632              	.LBE1643:
 2633              	.LBE1642:
 2634              	.LBE1641:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2635              		.loc 4 245 79 view .LVU560
 2636 0082 F2E7     		b	.L104
 2637              	.LVL185:
 2638              	.L99:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2639              		.loc 4 245 79 view .LVU561
 2640              	.LBE1640:
 2641              	.LBE1639:
 2642              	.LBE1634:
 2643              	.LBE1633:
 2644              	.LBE1644:
 2645              	.LBE1645:
 2646              	.LBE1627:
 2647              	.LBE1626:
 2648              	.LBE1625:
 2649              	.LBE1624:
 2650              	.LBE1623:
 869:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			 _M_get_Tp_allocator());
 870:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	 }
 871:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****        else
ARM GAS  /tmp/ccFECPfA.s 			page 227


 872:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	 std::_Destroy(__first._M_cur, __last._M_cur,
 2651              		.loc 14 872 16 view .LVU562
 2652 0084 D8F80040 		ldr	r4, [r8]
 2653 0088 3D68     		ldr	r5, [r7]
 2654              	.LVL186:
 2655              	.LBB1646:
 2656              	.LBI1646:
 2657              		.loc 7 735 5 is_stmt 1 view .LVU563
 2658 008a 00E0     		b	.L107
 2659              	.LVL187:
 2660              	.L106:
 2661              	.LBB1647:
 2662              	.LBB1648:
 2663              	.LBB1649:
 2664              	.LBB1650:
 2665              	.LBB1651:
 2666              	.LBB1652:
 2667              	.LBB1653:
 2668              	.LBI1653:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2669              		.loc 4 158 14 view .LVU564
 2670              	.LBB1654:
 2671              	.LBI1654:
 2672              		.loc 9 182 7 view .LVU565
 2673              	.LBB1655:
 2674              	.LBI1655:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2675              		.loc 8 89 7 view .LVU566
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2676              		.loc 8 89 7 is_stmt 0 view .LVU567
 2677              	.LBE1655:
 2678              	.LBE1654:
 2679              	.LBE1653:
 2680              	.LBE1652:
 2681              	.LBE1651:
 2682              		.loc 16 151 4 is_stmt 1 view .LVU568
 2683 008c 1834     		adds	r4, r4, #24
 2684              	.LVL188:
 2685              	.L107:
 2686              		.loc 16 151 19 view .LVU569
 2687 008e A542     		cmp	r5, r4
 2688 0090 09D0     		beq	.L93
 2689              	.LVL189:
 2690              	.LBB1668:
 2691              	.LBI1651:
 135:/usr/include/newlib/c++/10.3.1/bits/stl_construct.h ****     {
 2692              		.loc 16 135 5 view .LVU570
 2693              	.LBB1667:
 2694              	.LBI1652:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2695              		.loc 4 670 7 view .LVU571
 2696              	.LBB1656:
 2697              	.LBI1656:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2698              		.loc 4 237 7 view .LVU572
 2699              	.LBB1657:
 2700              	.LBB1658:
ARM GAS  /tmp/ccFECPfA.s 			page 228


 2701              	.LBI1658:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2702              		.loc 4 229 7 view .LVU573
 2703              	.LBB1659:
 2704              	.LBI1659:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2705              		.loc 4 194 7 view .LVU574
 2706              	.LBB1660:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2707              		.loc 4 195 28 is_stmt 0 view .LVU575
 2708 0092 2346     		mov	r3, r4
 2709 0094 53F8080B 		ldr	r0, [r3], #8
 2710              	.LVL190:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2711              		.loc 4 195 28 view .LVU576
 2712              	.LBE1660:
 2713              	.LBE1659:
 2714              	.LBB1661:
 2715              	.LBI1661:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2716              		.loc 4 208 7 is_stmt 1 view .LVU577
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2717              		.loc 4 208 7 is_stmt 0 view .LVU578
 2718              	.LBE1661:
 2719              	.LBE1658:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2720              		.loc 4 239 2 view .LVU579
 2721 0098 9842     		cmp	r0, r3
 2722 009a F7D0     		beq	.L106
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2723              		.loc 4 240 14 view .LVU580
 2724 009c A168     		ldr	r1, [r4, #8]
 2725              	.LVL191:
 2726              	.LBB1662:
 2727              	.LBI1662:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2728              		.loc 4 244 7 is_stmt 1 view .LVU581
 2729              	.LBB1663:
 2730              	.LBB1664:
 2731              	.LBI1664:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2732              		.loc 7 491 7 view .LVU582
 2733              	.LBB1665:
 2734              	.LBI1665:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 2735              		.loc 8 126 7 view .LVU583
 2736              	.LBB1666:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2737              		.loc 8 139 19 is_stmt 0 view .LVU584
 2738 009e 0131     		adds	r1, r1, #1
 2739              	.LVL192:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2740              		.loc 8 139 19 view .LVU585
 2741 00a0 FFF7FEFF 		bl	_ZdlPvj
 2742              	.LVL193:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 2743              		.loc 8 139 19 view .LVU586
ARM GAS  /tmp/ccFECPfA.s 			page 229


 2744              	.LBE1666:
 2745              	.LBE1665:
 2746              	.LBE1664:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2747              		.loc 4 245 79 view .LVU587
 2748 00a4 F2E7     		b	.L106
 2749              	.LVL194:
 2750              	.L93:
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2751              		.loc 4 245 79 view .LVU588
 2752              	.LBE1663:
 2753              	.LBE1662:
 2754              	.LBE1657:
 2755              	.LBE1656:
 2756              	.LBE1667:
 2757              	.LBE1668:
 2758              	.LBE1650:
 2759              	.LBE1649:
 2760              	.LBE1648:
 2761              	.LBE1647:
 2762              	.LBE1646:
 873:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		       _M_get_Tp_allocator());
 874:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****      }
 2763              		.loc 14 874 6 view .LVU589
 2764 00a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2765              		.loc 14 874 6 view .LVU590
 2766              		.cfi_endproc
 2767              	.LFE2283:
 2768              		.cantunwind
 2769              		.fnend
 2771              		.section	.text._ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_E
 2772              		.align	1
 2773              		.weak	_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED2Ev
 2774              		.syntax unified
 2775              		.thumb
 2776              		.thumb_func
 2777              		.fpu fpv4-sp-d16
 2779              	_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED2Ev:
 2780              		.fnstart
 2781              	.LVL195:
 2782              	.LFB2423:
  96:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     {
 2783              		.loc 15 96 11 is_stmt 1 view -0
 2784              		.cfi_startproc
 2785              		@ args = 0, pretend = 0, frame = 64
 2786              		@ frame_needed = 0, uses_anonymous_args = 0
  96:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     {
 2787              		.loc 15 96 11 is_stmt 0 view .LVU592
 2788 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2789              	.LCFI23:
 2790              		.cfi_def_cfa_offset 20
 2791              		.cfi_offset 4, -20
 2792              		.cfi_offset 5, -16
 2793              		.cfi_offset 6, -12
 2794              		.cfi_offset 7, -8
 2795              		.cfi_offset 14, -4
 2796 0002 91B0     		sub	sp, sp, #68
ARM GAS  /tmp/ccFECPfA.s 			page 230


 2797              	.LCFI24:
 2798              		.cfi_def_cfa_offset 88
 2799 0004 0446     		mov	r4, r0
 2800              	.LVL196:
 2801              	.LBB1689:
 2802              	.LBB1690:
 2803              	.LBI1690:
 832:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
 833:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque() { }
 834:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 835:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 836:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 837:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Creates a %deque with no elements.
 838:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __a  An allocator object.
 839:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 840:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       explicit
 841:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(const allocator_type& __a)
 842:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(__a, 0) { }
 843:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 844:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 845:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 846:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Creates a %deque with default constructed elements.
 847:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 848:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __a  An allocator.
 849:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 850:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This constructor fills the %deque with @a n default
 851:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  constructed elements.
 852:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 853:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       explicit
 854:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(size_type __n, const allocator_type& __a = allocator_type())
 855:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(__a, _S_check_init_len(__n, __a))
 856:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_default_initialize(); }
 857:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 858:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 859:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Creates a %deque with copies of an exemplar element.
 860:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 861:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __value  An element to copy.
 862:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __a  An allocator.
 863:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 864:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This constructor fills the %deque with @a __n copies of @a __value.
 865:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 866:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(size_type __n, const value_type& __value,
 867:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 868:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(__a, _S_check_init_len(__n, __a))
 869:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_fill_initialize(__value); }
 870:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
 871:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 872:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Creates a %deque with copies of an exemplar element.
 873:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __n  The number of elements to initially create.
 874:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __value  An element to copy.
 875:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __a  An allocator.
 876:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 877:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This constructor fills the %deque with @a __n copies of @a __value.
 878:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 879:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       explicit
 880:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(size_type __n, const value_type& __value = value_type(),
 881:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    const allocator_type& __a = allocator_type())
ARM GAS  /tmp/ccFECPfA.s 			page 231


 882:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(__a, _S_check_init_len(__n, __a))
 883:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_fill_initialize(__value); }
 884:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 885:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 886:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 887:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  %Deque copy constructor.
 888:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
 889:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 890:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The newly-created %deque uses a copy of the allocator object used
 891:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 892:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 893:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(const deque& __x)
 894:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()),
 895:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      __x.size())
 896:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 897:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				    this->_M_impl._M_start,
 898:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				    _M_get_Tp_allocator()); }
 899:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 900:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 901:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 902:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  %Deque move constructor.
 903:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 904:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The newly-created %deque contains the exact contents of the
 905:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  moved instance.
 906:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The contents of the moved instance are a valid, but unspecified
 907:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque.
 908:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 909:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(deque&&) = default;
 910:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 911:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /// Copy constructor with alternative allocator
 912:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(const deque& __x, const allocator_type& __a)
 913:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(__a, __x.size())
 914:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { std::__uninitialized_copy_a(__x.begin(), __x.end(),
 915:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				    this->_M_impl._M_start,
 916:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				    _M_get_Tp_allocator()); }
 917:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 918:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /// Move constructor with alternative allocator
 919:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(deque&& __x, const allocator_type& __a)
 920:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : deque(std::move(__x), __a, typename _Alloc_traits::is_always_equal{})
 921:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { }
 922:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 923:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     private:
 924:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(deque&& __x, const allocator_type& __a, true_type)
 925:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(std::move(__x), __a)
 926:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { }
 927:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 928:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(deque&& __x, const allocator_type& __a, false_type)
 929:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(std::move(__x), __a, __x.size())
 930:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 931:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__x.get_allocator() != __a && !__x.empty())
 932:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 933:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    std::__uninitialized_move_a(__x.begin(), __x.end(),
 934:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					this->_M_impl._M_start,
 935:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					_M_get_Tp_allocator());
 936:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    __x.clear();
 937:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 938:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
ARM GAS  /tmp/ccFECPfA.s 			page 232


 939:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 940:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     public:
 941:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 942:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Builds a %deque from an initializer list.
 943:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __l  An initializer_list.
 944:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __a  An allocator object.
 945:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 946:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Create a %deque consisting of copies of the elements in the
 947:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  initializer_list @a __l.
 948:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 949:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This will call the element type's copy constructor N times
 950:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  (where N is __l.size()) and do no memory reallocation.
 951:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 952:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque(initializer_list<value_type> __l,
 953:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    const allocator_type& __a = allocator_type())
 954:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       : _Base(__a)
 955:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 956:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 957:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			    random_access_iterator_tag());
 958:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 959:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 960:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 961:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 962:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Builds a %deque from a range.
 963:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __first  An input iterator.
 964:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __last  An input iterator.
 965:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __a  An allocator object.
 966:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 967:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Create a %deque consisting of copies of the elements from [__first,
 968:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  __last).
 969:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
 970:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  If the iterators are forward, bidirectional, or random-access, then
 971:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  this will call the elements' copy constructor N times (where N is
 972:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  distance(__first,__last)) and do no memory reallocation.  But if only
 973:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  input iterators are used, then this will do at most 2N calls to the
 974:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  copy constructor, and logN memory reallocations.
 975:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
 976:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
 977:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator,
 978:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 979:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	deque(_InputIterator __first, _InputIterator __last,
 980:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      const allocator_type& __a = allocator_type())
 981:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _Base(__a)
 982:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 983:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_range_initialize(__first, __last,
 984:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			      std::__iterator_category(__first));
 985:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
 986:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
 987:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
 988:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	deque(_InputIterator __first, _InputIterator __last,
 989:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      const allocator_type& __a = allocator_type())
 990:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	: _Base(__a)
 991:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
 992:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 993:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 994:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 995:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
ARM GAS  /tmp/ccFECPfA.s 			page 233


 996:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
 997:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 998:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
 999:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The dtor only erases the elements, and note that if the elements
1000:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
1001:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  way.  Managing the pointer is the user's responsibility.
1002:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1003:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ~deque()
 2804              		.loc 13 1003 7 is_stmt 1 view .LVU593
 2805              	.LBB1691:
 2806              	.LBB1692:
 2807              	.LBI1692:
1004:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
1005:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1006:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1007:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  %Deque assignment operator.
1008:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
1009:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1010:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  All the elements of @a x are copied.
1011:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1012:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The newly-created %deque uses a copy of the allocator object used
1013:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  by @a __x (unless the allocator traits dictate a different object).
1014:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1015:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque&
1016:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator=(const deque& __x);
1017:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1018:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1019:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1020:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  %Deque move assignment operator.
1021:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  A %deque of identical element and allocator types.
1022:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1023:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The contents of @a __x are moved into this deque (without copying,
1024:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  if the allocators permit it).
1025:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @a __x is a valid, but unspecified %deque.
1026:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1027:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque&
1028:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator=(deque&& __x) noexcept(_Alloc_traits::_S_always_equal())
1029:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1030:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	using __always_equal = typename _Alloc_traits::is_always_equal;
1031:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_move_assign1(std::move(__x), __always_equal{});
1032:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *this;
1033:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1034:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1035:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1036:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Assigns an initializer list to a %deque.
1037:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __l  An initializer_list.
1038:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1039:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
1040:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  initializer_list @a __l.
1041:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1042:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
1043:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
1044:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  assigned.
1045:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1046:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       deque&
1047:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator=(initializer_list<value_type> __l)
1048:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
ARM GAS  /tmp/ccFECPfA.s 			page 234


1049:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_assign_aux(__l.begin(), __l.end(),
1050:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		      random_access_iterator_tag());
1051:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *this;
1052:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1053:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1054:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1055:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1056:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Assigns a given value to a %deque.
1057:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __n  Number of elements to be assigned.
1058:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __val  Value to be assigned.
1059:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1060:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function fills a %deque with @a n copies of the given
1061:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  value.  Note that the assignment completely changes the
1062:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque and that the resulting %deque's size is the same as
1063:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  the number of elements assigned.
1064:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1065:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1066:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       assign(size_type __n, const value_type& __val)
1067:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_fill_assign(__n, __val); }
1068:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1069:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1070:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Assigns a range to a %deque.
1071:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __first  An input iterator.
1072:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __last   An input iterator.
1073:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1074:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
1075:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  range [__first,__last).
1076:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1077:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
1078:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
1079:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  assigned.
1080:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1081:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1082:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator,
1083:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1084:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1085:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	assign(_InputIterator __first, _InputIterator __last)
1086:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1087:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1088:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1089:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1090:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	assign(_InputIterator __first, _InputIterator __last)
1091:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
1092:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1093:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
1094:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
1095:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1096:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1097:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1098:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1099:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Assigns an initializer list to a %deque.
1100:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __l  An initializer_list.
1101:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1102:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function fills a %deque with copies of the elements in the
1103:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  initializer_list @a __l.
1104:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1105:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that the assignment completely changes the %deque and that the
ARM GAS  /tmp/ccFECPfA.s 			page 235


1106:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  resulting %deque's size is the same as the number of elements
1107:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  assigned.
1108:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1109:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1110:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       assign(initializer_list<value_type> __l)
1111:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
1112:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1113:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1114:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /// Get a copy of the memory allocation object.
1115:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       allocator_type
1116:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
1117:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _Base::get_allocator(); }
1118:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1119:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // iterators
1120:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1121:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read/write iterator that points to the first element in the
1122:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque.  Iteration is done in ordinary element order.
1123:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1124:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1125:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       begin() _GLIBCXX_NOEXCEPT
 2808              		.loc 13 1125 7 view .LVU594
 2809              	.LBB1693:
 2810              	.LBI1693:
 168:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        : _M_cur(__x._M_cur), _M_first(__x._M_first),
 2811              		.loc 13 168 7 view .LVU595
 2812              	.LBB1694:
 169:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 2813              		.loc 13 169 21 is_stmt 0 view .LVU596
 2814 0006 D0F808E0 		ldr	lr, [r0, #8]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2815              		.loc 13 170 44 view .LVU597
 2816 000a CDF810E0 		str	lr, [sp, #16]
 169:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 2817              		.loc 13 169 43 view .LVU598
 2818 000e D0F80CC0 		ldr	ip, [r0, #12]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2819              		.loc 13 170 44 view .LVU599
 2820 0012 CDF814C0 		str	ip, [sp, #20]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2821              		.loc 13 170 15 view .LVU600
 2822 0016 0769     		ldr	r7, [r0, #16]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2823              		.loc 13 170 44 view .LVU601
 2824 0018 0697     		str	r7, [sp, #24]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2825              		.loc 13 170 37 view .LVU602
 2826 001a 4669     		ldr	r6, [r0, #20]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2827              		.loc 13 170 44 view .LVU603
 2828 001c 0796     		str	r6, [sp, #28]
 2829              	.LVL197:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2830              		.loc 13 170 44 view .LVU604
 2831              	.LBE1694:
 2832              	.LBE1693:
 2833              	.LBE1692:
 2834              	.LBB1695:
ARM GAS  /tmp/ccFECPfA.s 			page 236


 2835              	.LBI1695:
1126:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_start; }
1127:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1128:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1129:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) iterator that points to the first
1130:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary element order.
1131:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1132:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_iterator
1133:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       begin() const _GLIBCXX_NOEXCEPT
1134:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_start; }
1135:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1136:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1137:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read/write iterator that points one past the last
1138:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary
1139:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element order.
1140:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1141:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1142:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       end() _GLIBCXX_NOEXCEPT
 2836              		.loc 13 1142 7 is_stmt 1 view .LVU605
 2837              	.LBB1696:
 2838              	.LBI1696:
 168:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        : _M_cur(__x._M_cur), _M_first(__x._M_first),
 2839              		.loc 13 168 7 view .LVU606
 2840              	.LBB1697:
 169:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 2841              		.loc 13 169 21 is_stmt 0 view .LVU607
 2842 001e 8569     		ldr	r5, [r0, #24]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2843              		.loc 13 170 44 view .LVU608
 2844 0020 0095     		str	r5, [sp]
 169:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 2845              		.loc 13 169 43 view .LVU609
 2846 0022 C169     		ldr	r1, [r0, #28]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2847              		.loc 13 170 44 view .LVU610
 2848 0024 0191     		str	r1, [sp, #4]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2849              		.loc 13 170 15 view .LVU611
 2850 0026 026A     		ldr	r2, [r0, #32]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2851              		.loc 13 170 44 view .LVU612
 2852 0028 0292     		str	r2, [sp, #8]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2853              		.loc 13 170 37 view .LVU613
 2854 002a 436A     		ldr	r3, [r0, #36]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2855              		.loc 13 170 44 view .LVU614
 2856 002c 0393     		str	r3, [sp, #12]
 2857              	.LVL198:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2858              		.loc 13 170 44 view .LVU615
 2859              	.LBE1697:
 2860              	.LBE1696:
 2861              	.LBE1695:
 2862              	.LBB1698:
 2863              	.LBI1698:
 544:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl; }
ARM GAS  /tmp/ccFECPfA.s 			page 237


 2864              		.loc 13 544 7 is_stmt 1 view .LVU616
 544:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl; }
 2865              		.loc 13 544 7 is_stmt 0 view .LVU617
 2866              	.LBE1698:
 2867              	.LBB1699:
 2868              	.LBI1699:
1143:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_finish; }
1144:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1145:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1146:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) iterator that points one past
1147:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  the last element in the %deque.  Iteration is done in
1148:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  ordinary element order.
1149:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1150:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_iterator
1151:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       end() const _GLIBCXX_NOEXCEPT
1152:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_finish; }
1153:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1154:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1155:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read/write reverse iterator that points to the
1156:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  last element in the %deque.  Iteration is done in reverse
1157:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element order.
1158:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1159:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reverse_iterator
1160:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       rbegin() _GLIBCXX_NOEXCEPT
1161:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return reverse_iterator(this->_M_impl._M_finish); }
1162:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1163:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1164:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1165:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  to the last element in the %deque.  Iteration is done in
1166:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  reverse element order.
1167:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1168:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reverse_iterator
1169:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       rbegin() const _GLIBCXX_NOEXCEPT
1170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_finish); }
1171:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1172:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1173:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read/write reverse iterator that points to one
1174:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  before the first element in the %deque.  Iteration is done
1175:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  in reverse element order.
1176:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1177:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reverse_iterator
1178:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       rend() _GLIBCXX_NOEXCEPT
1179:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return reverse_iterator(this->_M_impl._M_start); }
1180:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1181:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1182:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1183:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  to one before the first element in the %deque.  Iteration is
1184:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  done in reverse element order.
1185:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1186:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reverse_iterator
1187:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       rend() const _GLIBCXX_NOEXCEPT
1188:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_start); }
1189:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1190:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1191:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1192:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) iterator that points to the first
1193:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element in the %deque.  Iteration is done in ordinary element order.
ARM GAS  /tmp/ccFECPfA.s 			page 238


1194:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1195:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_iterator
1196:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       cbegin() const noexcept
1197:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_start; }
1198:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1199:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1200:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) iterator that points one past
1201:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  the last element in the %deque.  Iteration is done in
1202:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  ordinary element order.
1203:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1204:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_iterator
1205:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       cend() const noexcept
1206:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_finish; }
1207:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1208:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1209:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1210:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  to the last element in the %deque.  Iteration is done in
1211:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  reverse element order.
1212:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1213:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reverse_iterator
1214:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       crbegin() const noexcept
1215:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_finish); }
1216:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1217:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1218:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) reverse iterator that points
1219:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  to one before the first element in the %deque.  Iteration is
1220:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  done in reverse element order.
1221:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1222:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reverse_iterator
1223:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       crend() const noexcept
1224:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return const_reverse_iterator(this->_M_impl._M_start); }
1225:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1226:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1227:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // [23.2.1.2] capacity
1228:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**  Returns the number of elements in the %deque.  */
1229:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       size_type
1230:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       size() const _GLIBCXX_NOEXCEPT
1231:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_finish - this->_M_impl._M_start; }
1232:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1233:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**  Returns the size() of the largest possible %deque.  */
1234:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       size_type
1235:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       max_size() const _GLIBCXX_NOEXCEPT
1236:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
1237:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1238:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1239:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1240:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1241:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1242:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1243:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will %resize the %deque to the specified
1244:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  number of elements.  If the number is smaller than the
1245:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise
1246:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  default constructed elements are appended.
1247:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1248:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1249:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       resize(size_type __new_size)
1250:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
ARM GAS  /tmp/ccFECPfA.s 			page 239


1251:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const size_type __len = size();
1252:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__new_size > __len)
1253:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_default_append(__new_size - __len);
1254:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else if (__new_size < __len)
1255:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1256:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			  + difference_type(__new_size));
1257:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1258:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1259:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1261:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data with which new elements should be populated.
1263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will %resize the %deque to the specified
1265:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  number of elements.  If the number is smaller than the
1266:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise the
1267:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque is extended and new elements are populated with given
1268:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  data.
1269:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1270:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1271:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       resize(size_type __new_size, const value_type& __x)
1272:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1273:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1274:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Resizes the %deque to the specified number of elements.
1275:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __new_size  Number of elements the %deque should contain.
1276:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data with which new elements should be populated.
1277:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1278:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will %resize the %deque to the specified
1279:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  number of elements.  If the number is smaller than the
1280:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque's current size the %deque is truncated, otherwise the
1281:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque is extended and new elements are populated with given
1282:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  data.
1283:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1284:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1285:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       resize(size_type __new_size, value_type __x = value_type())
1286:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1287:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1288:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const size_type __len = size();
1289:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__new_size > __len)
1290:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_fill_insert(this->_M_impl._M_finish, __new_size - __len, __x);
1291:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else if (__new_size < __len)
1292:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_erase_at_end(this->_M_impl._M_start
1293:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			  + difference_type(__new_size));
1294:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1295:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1296:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1297:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**  A non-binding request to reduce memory use.  */
1298:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1299:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       shrink_to_fit() noexcept
1300:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_shrink_to_fit(); }
1301:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1302:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1303:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1304:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns true if the %deque is empty.  (Thus begin() would
1305:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  equal end().)
1306:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1307:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _GLIBCXX_NODISCARD bool
ARM GAS  /tmp/ccFECPfA.s 			page 240


1308:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       empty() const _GLIBCXX_NOEXCEPT
1309:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_finish == this->_M_impl._M_start; }
1310:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1311:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // element access
1312:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1313:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief Subscript access to the data contained in the %deque.
1314:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param __n The index of the element for which data should be
1315:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  accessed.
1316:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  Read/write reference to data.
1317:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1318:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This operator allows for easy, array-style, data access.
1319:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that data access with this operator is unchecked and
1320:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  out_of_range lookups are not defined. (For checked lookups
1321:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  see at().)
1322:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1323:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reference
1324:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1325:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1326:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_subscript(__n);
1327:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return this->_M_impl._M_start[difference_type(__n)];
1328:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1329:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1330:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1331:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief Subscript access to the data contained in the %deque.
1332:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param __n The index of the element for which data should be
1333:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  accessed.
1334:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  Read-only (constant) reference to data.
1335:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1336:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This operator allows for easy, array-style, data access.
1337:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that data access with this operator is unchecked and
1338:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  out_of_range lookups are not defined. (For checked lookups
1339:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  see at().)
1340:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1341:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reference
1342:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1343:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1344:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_subscript(__n);
1345:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return this->_M_impl._M_start[difference_type(__n)];
1346:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1347:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1348:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     protected:
1349:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /// Safety check used only from at().
1350:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1351:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_range_check(size_type __n) const
1352:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1353:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__n >= this->size())
1354:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  __throw_out_of_range_fmt(__N("deque::_M_range_check: __n "
1355:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				       "(which is %zu)>= this->size() "
1356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				       "(which is %zu)"),
1357:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				   __n, this->size());
1358:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1359:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1360:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     public:
1361:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1362:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Provides access to the data contained in the %deque.
1363:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param __n The index of the element for which data should be
1364:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  accessed.
ARM GAS  /tmp/ccFECPfA.s 			page 241


1365:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  Read/write reference to data.
1366:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1367:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1368:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function provides for safer data access.  The parameter
1369:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  is first checked that it is in the range of the deque.  The
1370:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  function throws out_of_range if the check fails.
1371:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1372:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reference
1373:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       at(size_type __n)
1374:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1375:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_check(__n);
1376:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return (*this)[__n];
1377:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1378:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1379:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1380:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Provides access to the data contained in the %deque.
1381:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param __n The index of the element for which data should be
1382:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  accessed.
1383:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  Read-only (constant) reference to data.
1384:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1385:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1386:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function provides for safer data access.  The parameter is first
1387:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  checked that it is in the range of the deque.  The function throws
1388:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  out_of_range if the check fails.
1389:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1390:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reference
1391:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       at(size_type __n) const
1392:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1393:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_check(__n);
1394:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return (*this)[__n];
1395:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1396:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1397:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1398:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read/write reference to the data at the first
1399:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element of the %deque.
1400:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1401:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reference
1402:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       front() _GLIBCXX_NOEXCEPT
1403:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1404:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_nonempty();
1405:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *begin();
1406:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1407:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1408:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1409:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) reference to the data at the first
1410:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element of the %deque.
1411:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1412:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reference
1413:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       front() const _GLIBCXX_NOEXCEPT
1414:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1415:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_nonempty();
1416:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *begin();
1417:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1418:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1419:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1420:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read/write reference to the data at the last element of the
1421:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  %deque.
ARM GAS  /tmp/ccFECPfA.s 			page 242


1422:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1423:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       reference
1424:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       back() _GLIBCXX_NOEXCEPT
1425:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1426:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_nonempty();
1427:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	iterator __tmp = end();
1428:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	--__tmp;
1429:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *__tmp;
1430:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1431:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1432:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1433:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Returns a read-only (constant) reference to the data at the last
1434:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element of the %deque.
1435:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1436:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       const_reference
1437:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       back() const _GLIBCXX_NOEXCEPT
1438:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1439:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_nonempty();
1440:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const_iterator __tmp = end();
1441:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	--__tmp;
1442:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return *__tmp;
1443:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1444:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1445:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // [23.2.1.2] modifiers
1446:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1447:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Add data to the front of the %deque.
1448:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data to be added.
1449:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1450:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This is a typical stack operation.  The function creates an
1451:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element at the front of the %deque and assigns the given
1452:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  data to it.  Due to the nature of a %deque this operation
1453:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  can be done in constant time.
1454:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1455:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1456:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       push_front(const value_type& __x)
1457:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1458:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (this->_M_impl._M_start._M_cur != this->_M_impl._M_start._M_first)
1459:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
1460:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _Alloc_traits::construct(this->_M_impl,
1461:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				     this->_M_impl._M_start._M_cur - 1,
1462:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				     __x);
1463:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    --this->_M_impl._M_start._M_cur;
1464:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
1465:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else
1466:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_push_front_aux(__x);
1467:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1468:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1469:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1470:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1471:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       push_front(value_type&& __x)
1472:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { emplace_front(std::move(__x)); }
1473:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1474:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename... _Args>
1475:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus > 201402L
1476:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	reference
1477:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1478:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
ARM GAS  /tmp/ccFECPfA.s 			page 243


1479:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1480:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	emplace_front(_Args&&... __args);
1481:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1482:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1483:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1484:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Add data to the end of the %deque.
1485:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data to be added.
1486:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1487:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This is a typical stack operation.  The function creates an
1488:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  element at the end of the %deque and assigns the given data
1489:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  to it.  Due to the nature of a %deque this operation can be
1490:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  done in constant time.
1491:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1492:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1493:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       push_back(const value_type& __x)
1494:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1495:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (this->_M_impl._M_finish._M_cur
1496:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    != this->_M_impl._M_finish._M_last - 1)
1497:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
1498:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _Alloc_traits::construct(this->_M_impl,
1499:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				     this->_M_impl._M_finish._M_cur, __x);
1500:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    ++this->_M_impl._M_finish._M_cur;
1501:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
1502:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else
1503:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_push_back_aux(__x);
1504:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1505:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1506:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1507:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1508:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       push_back(value_type&& __x)
1509:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { emplace_back(std::move(__x)); }
1510:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1511:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename... _Args>
1512:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus > 201402L
1513:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	reference
1514:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1515:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1516:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1517:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	emplace_back(_Args&&... __args);
1518:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1519:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1520:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1521:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Removes first element.
1522:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1523:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This is a typical stack operation.  It shrinks the %deque by one.
1524:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1525:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that no data is returned, and if the first element's data is
1526:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  needed, it should be retrieved before pop_front() is called.
1527:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1528:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1529:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       pop_front() _GLIBCXX_NOEXCEPT
1530:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1531:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_nonempty();
1532:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (this->_M_impl._M_start._M_cur
1533:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
1534:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
1535:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
ARM GAS  /tmp/ccFECPfA.s 			page 244


1536:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				   this->_M_impl._M_start._M_cur);
1537:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    ++this->_M_impl._M_start._M_cur;
1538:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
1539:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else
1540:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_pop_front_aux();
1541:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1542:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1543:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1544:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Removes last element.
1545:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1546:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This is a typical stack operation.  It shrinks the %deque by one.
1547:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1548:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that no data is returned, and if the last element's data is
1549:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  needed, it should be retrieved before pop_back() is called.
1550:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1551:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1552:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       pop_back() _GLIBCXX_NOEXCEPT
1553:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1554:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_requires_nonempty();
1555:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (this->_M_impl._M_finish._M_cur
1556:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    != this->_M_impl._M_finish._M_first)
1557:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
1558:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    --this->_M_impl._M_finish._M_cur;
1559:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
1560:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				   this->_M_impl._M_finish._M_cur);
1561:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
1562:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else
1563:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_pop_back_aux();
1564:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1565:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1566:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1567:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1568:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts an object in %deque before specified iterator.
1569:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  A const_iterator into the %deque.
1570:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __args  Arguments.
1571:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1572:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1573:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert an object of type T constructed
1574:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1575:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1576:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename... _Args>
1577:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	iterator
1578:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	emplace(const_iterator __position, _Args&&... __args);
1579:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1580:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1581:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts given value into %deque before specified iterator.
1582:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  A const_iterator into the %deque.
1583:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data to be inserted.
1584:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1585:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1586:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert a copy of the given value before the
1587:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  specified location.
1588:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1589:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1590:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       insert(const_iterator __position, const value_type& __x);
1591:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1592:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
ARM GAS  /tmp/ccFECPfA.s 			page 245


1593:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts given value into %deque before specified iterator.
1594:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1595:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data to be inserted.
1596:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1597:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1598:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert a copy of the given value before the
1599:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  specified location.
1600:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1601:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1602:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       insert(iterator __position, const value_type& __x);
1603:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1604:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1605:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1606:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1607:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts given rvalue into %deque before specified iterator.
1608:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  A const_iterator into the %deque.
1609:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data to be inserted.
1610:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1611:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1612:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert a copy of the given rvalue before the
1613:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  specified location.
1614:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1615:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1616:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       insert(const_iterator __position, value_type&& __x)
1617:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return emplace(__position, std::move(__x)); }
1618:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1619:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1620:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts an initializer list into the %deque.
1621:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __p  An iterator into the %deque.
1622:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __l  An initializer_list.
1623:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1624:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1625:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert copies of the data in the
1626:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  initializer_list @a __l into the %deque before the location
1627:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  specified by @a __p.  This is known as <em>list insert</em>.
1628:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1629:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1630:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       insert(const_iterator __p, initializer_list<value_type> __l)
1631:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1632:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	auto __offset = __p - cbegin();
1633:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_insert_aux(__p._M_const_cast(), __l.begin(), __l.end(),
1634:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			    std::random_access_iterator_tag());
1635:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return begin() + __offset;
1636:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1637:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1638:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1639:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts a number of copies of given data into the %deque.
1640:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  A const_iterator into the %deque.
1641:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __n  Number of elements to be inserted.
1642:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data to be inserted.
1643:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1644:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1645:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert a specified number of copies of the given
1646:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  data before the location specified by @a __position.
1647:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1648:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1649:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
ARM GAS  /tmp/ccFECPfA.s 			page 246


1650:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1651:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	difference_type __offset = __position - cbegin();
1652:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_fill_insert(__position._M_const_cast(), __n, __x);
1653:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return begin() + __offset;
1654:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1655:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1656:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1657:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts a number of copies of given data into the %deque.
1658:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1659:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __n  Number of elements to be inserted.
1660:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  Data to be inserted.
1661:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1662:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert a specified number of copies of the given
1663:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  data before the location specified by @a __position.
1664:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1665:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1666:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1667:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_fill_insert(__position, __n, __x); }
1668:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1669:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1670:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1671:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1672:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts a range into the %deque.
1673:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  A const_iterator into the %deque.
1674:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __first  An input iterator.
1675:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __last   An input iterator.
1676:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator that points to the inserted data.
1677:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1678:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert copies of the data in the range
1679:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  [__first,__last) into the %deque before the location specified
1680:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  by @a __position.  This is known as <em>range insert</em>.
1681:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1682:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator,
1683:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1684:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	iterator
1685:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	insert(const_iterator __position, _InputIterator __first,
1686:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	       _InputIterator __last)
1687:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
1688:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  difference_type __offset = __position - cbegin();
1689:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_range_insert_aux(__position._M_const_cast(), __first, __last,
1690:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			      std::__iterator_category(__first));
1691:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  return begin() + __offset;
1692:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
1693:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1694:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1695:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Inserts a range into the %deque.
1696:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  An iterator into the %deque.
1697:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __first  An input iterator.
1698:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __last   An input iterator.
1699:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1700:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will insert copies of the data in the range
1701:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  [__first,__last) into the %deque before the location specified
1702:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  by @a __position.  This is known as <em>range insert</em>.
1703:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1704:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1705:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1706:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	insert(iterator __position, _InputIterator __first,
ARM GAS  /tmp/ccFECPfA.s 			page 247


1707:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	       _InputIterator __last)
1708:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
1709:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1710:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1711:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1712:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
1713:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1714:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1715:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1716:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Remove element at given position.
1717:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __position  Iterator pointing to element to be erased.
1718:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator pointing to the next element (or end()).
1719:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1720:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will erase the element at the given position and thus
1721:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  shorten the %deque by one.
1722:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1723:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The user is cautioned that
1724:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  this function only erases the element, and that if the element is
1725:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  itself a pointer, the pointed-to memory is not touched in any way.
1726:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Managing the pointer is the user's responsibility.
1727:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1728:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1729:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1730:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       erase(const_iterator __position)
1731:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1732:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       erase(iterator __position)
1733:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1734:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _M_erase(__position._M_const_cast()); }
1735:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1736:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1737:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Remove a range of elements.
1738:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1739:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1740:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *                erased.
1741:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return  An iterator pointing to the element pointed to by @a last
1742:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *           prior to erasing (or end()).
1743:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1744:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function will erase the elements in the range
1745:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  [__first,__last) and shorten the %deque accordingly.
1746:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1747:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  The user is cautioned that
1748:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  this function only erases the elements, and that if the elements
1749:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
1750:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  way.  Managing the pointer is the user's responsibility.
1751:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1752:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
1753:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1754:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       erase(const_iterator __first, const_iterator __last)
1755:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1756:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       erase(iterator __first, iterator __last)
1757:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1758:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }
1759:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1760:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1761:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief  Swaps data with another %deque.
1762:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __x  A %deque of the same element and allocator types.
1763:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
ARM GAS  /tmp/ccFECPfA.s 			page 248


1764:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This exchanges the elements between two deques in constant time.
1765:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  (Four pointers, so it should be quite fast.)
1766:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Note that the global std::swap() function is specialized such that
1767:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  std::swap(d1,d2) will feed to this function.
1768:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1769:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1770:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1771:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1772:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       swap(deque& __x) _GLIBCXX_NOEXCEPT
1773:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1774:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1775:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1776:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1777:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1778:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_impl._M_swap_data(__x._M_impl);
1779:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1780:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				  __x._M_get_Tp_allocator());
1781:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1782:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1783:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1784:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Erases all the elements.  Note that this function only erases the
1785:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  elements, and that if the elements themselves are pointers, the
1786:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1787:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  the user's responsibility.
1788:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1789:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1790:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       clear() _GLIBCXX_NOEXCEPT
1791:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { _M_erase_at_end(begin()); }
1792:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1793:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****     protected:
1794:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Internal constructor functions follow.
1795:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1796:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
1797:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the range constructor to implement [23.1.1]/9
1798:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1799:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1800:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1801:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _Integer>
1802:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1803:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
1804:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
1805:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_initialize_map(_S_check_init_len(static_cast<size_type>(__n),
1806:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 					      _M_get_Tp_allocator()));
1807:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_fill_initialize(__x);
1808:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
1809:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1810:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the range constructor to implement [23.1.1]/9
1811:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1812:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1813:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1814:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			       __false_type)
1815:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
1816:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_range_initialize(__first, __last,
1817:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			      std::__iterator_category(__first));
1818:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
1819:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1820:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 249


1821:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       static size_t
1822:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _S_check_init_len(size_t __n, const allocator_type& __a)
1823:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1824:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__n > _S_max_size(__a))
1825:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  __throw_length_error(
1826:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      __N("cannot create std::deque larger than max_size()"));
1827:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return __n;
1828:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1829:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1830:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       static size_type
1831:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
1832:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1833:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
1834:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const size_t __allocmax = _Alloc_traits::max_size(__a);
1835:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return (std::min)(__diffmax, __allocmax);
1836:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1837:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1838:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the second initialize_dispatch above
1839:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ///@{
1840:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1841:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief Fills the deque with whatever is in [first,last).
1842:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __first  An input iterator.
1843:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __last  An input iterator.
1844:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return   Nothing.
1845:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1846:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  If the iterators are actually forward iterators (or better), then the
1847:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  memory layout can be done all at once.  Else we move forward using
1848:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  push_back on each value from the iterator.
1849:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1850:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1851:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1852:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1853:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			    std::input_iterator_tag);
1854:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1855:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the second initialize_dispatch above
1856:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _ForwardIterator>
1857:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1858:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1859:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			    std::forward_iterator_tag);
1860:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ///@}
1861:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1862:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
1863:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief Fills the %deque with copies of value.
1864:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @param  __value  Initial value.
1865:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @return   Nothing.
1866:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @pre _M_start and _M_finish have already been initialized,
1867:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  but none of the %deque's elements have yet been constructed.
1868:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
1869:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  This function is called only when the user provides an explicit size
1870:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  (with or without an explicit exemplar value).
1871:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
1872:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1873:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_fill_initialize(const value_type& __value);
1874:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1875:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
1876:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by deque(n).
1877:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
ARM GAS  /tmp/ccFECPfA.s 			page 250


1878:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_default_initialize();
1879:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1880:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1881:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1882:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // assignment work for the range versions.
1883:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1884:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
1885:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the range assign to implement [23.1.1]/9
1886:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1887:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1888:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1889:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _Integer>
1890:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1891:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1892:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ _M_fill_assign(__n, __val); }
1893:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1894:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the range assign to implement [23.1.1]/9
1895:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1896:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1897:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1898:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			   __false_type)
1899:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1900:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1901:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1902:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the second assign_dispatch above
1903:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1904:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1905:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1906:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		      std::input_iterator_tag);
1907:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1908:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the second assign_dispatch above
1909:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _ForwardIterator>
1910:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1911:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1912:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		      std::forward_iterator_tag)
1913:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
1914:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  const size_type __len = std::distance(__first, __last);
1915:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  if (__len > size())
1916:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    {
1917:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      _ForwardIterator __mid = __first;
1918:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      std::advance(__mid, size());
1919:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      std::copy(__first, __mid, begin());
1920:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	      _M_range_insert_aux(end(), __mid, __last,
1921:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				  std::__iterator_category(__first));
1922:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    }
1923:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  else
1924:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_erase_at_end(std::copy(__first, __last, begin()));
1925:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
1926:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1927:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Called by assign(n,t), and the range assign when it turns out
1928:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // to be the same thing.
1929:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
1930:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_fill_assign(size_type __n, const value_type& __val)
1931:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
1932:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__n > size())
1933:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
1934:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    std::fill(begin(), end(), __val);
ARM GAS  /tmp/ccFECPfA.s 			page 251


1935:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_fill_insert(end(), __n - size(), __val);
1936:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
1937:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	else
1938:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
1939:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    _M_erase_at_end(begin() + difference_type(__n));
1940:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    std::fill(begin(), end(), __val);
1941:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
1942:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
1943:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1944:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ///@{
1945:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /// Helper functions for push_* and pop_*.
1946:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
1947:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void _M_push_back_aux(const value_type&);
1948:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1949:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void _M_push_front_aux(const value_type&);
1950:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
1951:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename... _Args>
1952:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void _M_push_back_aux(_Args&&... __args);
1953:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1954:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename... _Args>
1955:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void _M_push_front_aux(_Args&&... __args);
1956:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1957:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1958:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void _M_pop_back_aux();
1959:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1960:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void _M_pop_front_aux();
1961:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ///@}
1962:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1963:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Internal insert functions follow.  The *_aux functions do the actual
1964:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // insertion work when all shortcuts fail.
1965:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1966:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
1967:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the range insert to implement [23.1.1]/9
1968:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1969:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1970:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // 438. Ambiguity in the "do the right thing" clause
1971:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _Integer>
1972:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1973:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_insert_dispatch(iterator __pos,
1974:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			   _Integer __n, _Integer __x, __true_type)
1975:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ _M_fill_insert(__pos, __n, __x); }
1976:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1977:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the range insert to implement [23.1.1]/9
1978:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1979:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1980:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_insert_dispatch(iterator __pos,
1981:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			   _InputIterator __first, _InputIterator __last,
1982:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			   __false_type)
1983:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{
1984:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_range_insert_aux(__pos, __first, __last,
1985:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			      std::__iterator_category(__first));
1986:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	}
1987:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
1988:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1989:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the second insert_dispatch above
1990:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _InputIterator>
1991:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
ARM GAS  /tmp/ccFECPfA.s 			page 252


1992:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_insert_aux(iterator __pos, _InputIterator __first,
1993:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			    _InputIterator __last, std::input_iterator_tag);
1994:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
1995:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by the second insert_dispatch above
1996:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _ForwardIterator>
1997:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
1998:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_range_insert_aux(iterator __pos, _ForwardIterator __first,
1999:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			    _ForwardIterator __last, std::forward_iterator_tag);
2000:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2001:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
2002:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // the same thing.  Can use fill functions in optimal situations,
2003:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // otherwise passes off to insert_aux(p,n,x).
2004:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2005:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
2006:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2007:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by insert(p,x)
2008:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus < 201103L
2009:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
2010:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_insert_aux(iterator __pos, const value_type& __x);
2011:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #else
2012:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename... _Args>
2013:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	iterator
2014:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_insert_aux(iterator __pos, _Args&&... __args);
2015:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
2016:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2017:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by insert(p,n,x) via fill_insert
2018:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2019:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_insert_aux(iterator __pos, size_type __n, const value_type& __x);
2020:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2021:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // called by range_insert_aux for forward iterators
2022:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _ForwardIterator>
2023:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
2024:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_insert_aux(iterator __pos,
2025:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		      _ForwardIterator __first, _ForwardIterator __last,
2026:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		      size_type __n);
2027:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2028:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2029:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Internal erase functions follow.
2030:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2031:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2032:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_destroy_data_aux(iterator __first, iterator __last);
2033:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2034:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Called by ~deque().
2035:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // NB: Doesn't deallocate the nodes.
2036:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       template<typename _Alloc1>
2037:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	void
2038:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
2039:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	{ _M_destroy_data_aux(__first, __last); }
2040:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2041:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2042:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_destroy_data(iterator __first, iterator __last,
 2869              		.loc 13 2042 7 is_stmt 1 view .LVU618
 2870              	.LBB1700:
 2871              	.LBB1701:
 2872              	.LBI1701:
 168:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        : _M_cur(__x._M_cur), _M_first(__x._M_first),
 2873              		.loc 13 168 7 view .LVU619
ARM GAS  /tmp/ccFECPfA.s 			page 253


 2874              	.LBB1702:
 2875              	.LBB1703:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2876              		.loc 13 170 44 is_stmt 0 view .LVU620
 2877 002e CDF830E0 		str	lr, [sp, #48]
 2878 0032 CDF834C0 		str	ip, [sp, #52]
 2879 0036 0E97     		str	r7, [sp, #56]
 2880 0038 0F96     		str	r6, [sp, #60]
 2881              	.LVL199:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2882              		.loc 13 170 44 view .LVU621
 2883              	.LBE1703:
 2884              	.LBE1702:
 2885              	.LBE1701:
 2886              	.LBB1704:
 2887              	.LBI1704:
 168:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        : _M_cur(__x._M_cur), _M_first(__x._M_first),
 2888              		.loc 13 168 7 is_stmt 1 view .LVU622
 2889              	.LBB1705:
 2890              	.LBB1706:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2891              		.loc 13 170 44 is_stmt 0 view .LVU623
 2892 003a 0895     		str	r5, [sp, #32]
 2893 003c 0991     		str	r1, [sp, #36]
 2894 003e 0A92     		str	r2, [sp, #40]
 2895 0040 0B93     		str	r3, [sp, #44]
 2896              	.LVL200:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2897              		.loc 13 170 44 view .LVU624
 2898              	.LBE1706:
 2899              	.LBE1705:
 2900              	.LBE1704:
2043:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 		      const std::allocator<_Tp>&)
2044:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
2045:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (!__has_trivial_destructor(value_type))
2046:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_destroy_data_aux(__first, __last);
 2901              		.loc 13 2046 23 view .LVU625
 2902 0042 08AA     		add	r2, sp, #32
 2903 0044 0CA9     		add	r1, sp, #48
 2904 0046 FFF7FEFF 		bl	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxES
 2905              	.LVL201:
 2906              		.loc 13 2046 23 view .LVU626
 2907              	.LBE1700:
 2908              	.LBE1699:
1004:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2909              		.loc 13 1004 65 view .LVU627
 2910 004a 2046     		mov	r0, r4
 2911 004c FFF7FEFF 		bl	_ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
 2912              	.LVL202:
1004:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 2913              		.loc 13 1004 65 view .LVU628
 2914              	.LBE1691:
 2915              	.LBE1690:
 2916              	.LBE1689:
  96:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     {
 2917              		.loc 15 96 11 view .LVU629
 2918 0050 2046     		mov	r0, r4
ARM GAS  /tmp/ccFECPfA.s 			page 254


 2919 0052 11B0     		add	sp, sp, #68
 2920              	.LCFI25:
 2921              		.cfi_def_cfa_offset 20
 2922              		@ sp needed
 2923 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
  96:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****     {
 2924              		.loc 15 96 11 view .LVU630
 2925              		.cfi_endproc
 2926              	.LFE2423:
 2927              		.cantunwind
 2928              		.fnend
 2930              		.weak	_ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1Ev
 2931              		.thumb_set _ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1
 2932              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20f
 2933              		.align	1
 2934              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_it
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2938              		.fpu fpv4-sp-d16
 2940              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_
 2941              		.fnstart
 2942              	.LVL203:
 2943              	.LFB2284:
 206:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 2944              		.loc 2 206 7 is_stmt 1 view -0
 2945              		.cfi_startproc
 2946              		@ args = 0, pretend = 0, frame = 8
 2947              		@ frame_needed = 0, uses_anonymous_args = 0
 206:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 2948              		.loc 2 206 7 is_stmt 0 view .LVU632
 2949 0000 70B5     		push	{r4, r5, r6, lr}
 2950              		.save {r4, r5, r6, lr}
 2951              	.LCFI26:
 2952              		.cfi_def_cfa_offset 16
 2953              		.cfi_offset 4, -16
 2954              		.cfi_offset 5, -12
 2955              		.cfi_offset 6, -8
 2956              		.cfi_offset 14, -4
 2957              		.pad #8
 2958 0002 82B0     		sub	sp, sp, #8
 2959              	.LCFI27:
 2960              		.cfi_def_cfa_offset 24
 2961 0004 0546     		mov	r5, r0
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 2962              		.loc 2 211 42 view .LVU633
 2963 0006 0E46     		mov	r6, r1
 2964 0008 61B1     		cbz	r1, .L117
 2965              	.L112:
 2966              	.LVL204:
 2967              	.LBB1733:
 2968              	.LBI1733:
 2969              		.loc 3 138 5 is_stmt 1 view .LVU634
 2970              	.LBB1734:
 2971              	.LBB1735:
 2972              	.LBI1735:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
ARM GAS  /tmp/ccFECPfA.s 			page 255


 2973              		.loc 3 98 5 view .LVU635
 2974              	.LBB1736:
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 2975              		.loc 3 104 23 is_stmt 0 view .LVU636
 2976 000a 941B     		subs	r4, r2, r6
 2977              	.LVL205:
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 2978              		.loc 3 104 23 view .LVU637
 2979              	.LBE1736:
 2980              	.LBE1735:
 2981              	.LBE1734:
 2982              	.LBE1733:
 215:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 2983              		.loc 2 215 12 view .LVU638
 2984 000c 0194     		str	r4, [sp, #4]
 217:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 2985              		.loc 2 217 2 view .LVU639
 2986 000e 0F2C     		cmp	r4, #15
 2987 0010 0DD8     		bhi	.L118
 2988              	.LVL206:
 2989              	.L113:
 2990              	.LBB1737:
 2991              	.LBI1737:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2992              		.loc 4 194 7 is_stmt 1 view .LVU640
 2993              	.LBB1738:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2994              		.loc 4 195 28 is_stmt 0 view .LVU641
 2995 0012 2868     		ldr	r0, [r5]
 2996              	.LVL207:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2997              		.loc 4 195 28 view .LVU642
 2998              	.LBE1738:
 2999              	.LBE1737:
 3000              	.LBB1739:
 3001              	.LBI1739:
 400:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 3002              		.loc 4 400 7 is_stmt 1 view .LVU643
 3003              	.LBB1740:
 3004              	.LBI1740:
 354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3005              		.loc 4 354 7 view .LVU644
 3006              	.LBB1741:
 356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 3007              		.loc 4 356 2 is_stmt 0 view .LVU645
 3008 0014 012C     		cmp	r4, #1
 3009 0016 13D0     		beq	.L119
 3010              	.LVL208:
 3011              	.LBB1742:
 3012              	.LBI1742:
 401:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 3013              		.loc 5 401 7 is_stmt 1 view .LVU646
 3014              	.LBB1743:
 403:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 3015              		.loc 5 403 2 view .LVU647
 3016 0018 A4B1     		cbz	r4, .L115
 3017              		.loc 5 409 2 view .LVU648
ARM GAS  /tmp/ccFECPfA.s 			page 256


 3018              		.loc 5 409 49 is_stmt 0 view .LVU649
 3019 001a 2246     		mov	r2, r4
 3020 001c 3146     		mov	r1, r6
 3021 001e FFF7FEFF 		bl	memcpy
 3022              	.LVL209:
 3023              		.loc 5 409 66 view .LVU650
 3024 0022 0FE0     		b	.L115
 3025              	.LVL210:
 3026              	.L117:
 3027              		.loc 5 409 66 view .LVU651
 3028              	.LBE1743:
 3029              	.LBE1742:
 3030              	.LBE1741:
 3031              	.LBE1740:
 3032              	.LBE1739:
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 3033              		.loc 2 211 42 discriminator 1 view .LVU652
 3034 0024 9142     		cmp	r1, r2
 3035 0026 F0D0     		beq	.L112
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 3036              		.loc 2 212 28 view .LVU653
 3037 0028 0A48     		ldr	r0, .L120
 3038              	.LVL211:
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 3039              		.loc 2 212 28 view .LVU654
 3040 002a FFF7FEFF 		bl	_ZSt19__throw_logic_errorPKc
 3041              	.LVL212:
 3042              	.L118:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 3043              		.loc 2 219 13 view .LVU655
 3044 002e 0022     		movs	r2, #0
 3045              	.LVL213:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 3046              		.loc 2 219 13 view .LVU656
 3047 0030 01A9     		add	r1, sp, #4
 3048              	.LVL214:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 3049              		.loc 2 219 13 view .LVU657
 3050 0032 2846     		mov	r0, r5
 3051              	.LVL215:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 3052              		.loc 2 219 13 view .LVU658
 3053 0034 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
 3054              	.LVL216:
 3055              	.LBB1748:
 3056              	.LBI1748:
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 3057              		.loc 4 186 7 is_stmt 1 view .LVU659
 3058              	.LBB1749:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3059              		.loc 4 187 26 is_stmt 0 view .LVU660
 3060 0038 2860     		str	r0, [r5]
 3061              	.LVL217:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3062              		.loc 4 187 26 view .LVU661
 3063              	.LBE1749:
 3064              	.LBE1748:
ARM GAS  /tmp/ccFECPfA.s 			page 257


 220:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 3065              		.loc 2 220 17 view .LVU662
 3066 003a 019B     		ldr	r3, [sp, #4]
 3067              	.LVL218:
 3068              	.LBB1750:
 3069              	.LBI1750:
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 3070              		.loc 4 218 7 is_stmt 1 view .LVU663
 3071              	.LBB1751:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3072              		.loc 4 219 31 is_stmt 0 view .LVU664
 3073 003c AB60     		str	r3, [r5, #8]
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3074              		.loc 4 219 45 view .LVU665
 3075 003e E8E7     		b	.L113
 3076              	.LVL219:
 3077              	.L119:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3078              		.loc 4 219 45 view .LVU666
 3079              	.LBE1751:
 3080              	.LBE1750:
 3081              	.LBB1752:
 3082              	.LBB1747:
 3083              	.LBB1746:
 3084              	.LBB1744:
 3085              	.LBI1744:
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 3086              		.loc 5 328 7 is_stmt 1 view .LVU667
 3087              	.LBB1745:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 3088              		.loc 5 329 9 view .LVU668
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 3089              		.loc 5 329 16 is_stmt 0 view .LVU669
 3090 0040 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 3091              		.loc 5 329 14 view .LVU670
 3092 0042 0370     		strb	r3, [r0]
 3093              	.LVL220:
 3094              	.L115:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 3095              		.loc 5 329 14 view .LVU671
 3096              	.LBE1745:
 3097              	.LBE1744:
 3098              	.LBE1746:
 3099              	.LBE1747:
 3100              	.LBE1752:
 232:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       }
 3101              		.loc 2 232 15 view .LVU672
 3102 0044 019B     		ldr	r3, [sp, #4]
 3103              	.LVL221:
 3104              	.LBB1753:
 3105              	.LBI1753:
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3106              		.loc 4 222 7 is_stmt 1 view .LVU673
 3107              	.LBB1754:
 3108              	.LBB1755:
 3109              	.LBI1755:
ARM GAS  /tmp/ccFECPfA.s 			page 258


 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 3110              		.loc 4 190 7 view .LVU674
 3111              	.LBB1756:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3112              		.loc 4 191 26 is_stmt 0 view .LVU675
 3113 0046 6B60     		str	r3, [r5, #4]
 3114              	.LVL222:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3115              		.loc 4 191 26 view .LVU676
 3116              	.LBE1756:
 3117              	.LBE1755:
 3118              	.LBB1757:
 3119              	.LBI1757:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3120              		.loc 4 194 7 is_stmt 1 view .LVU677
 3121              	.LBB1758:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3122              		.loc 4 195 28 is_stmt 0 view .LVU678
 3123 0048 2A68     		ldr	r2, [r5]
 3124              	.LVL223:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3125              		.loc 4 195 28 view .LVU679
 3126              	.LBE1758:
 3127              	.LBE1757:
 3128              	.LBB1759:
 3129              	.LBI1759:
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 3130              		.loc 5 328 7 is_stmt 1 view .LVU680
 3131              	.LBB1760:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 3132              		.loc 5 329 9 view .LVU681
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 3133              		.loc 5 329 14 is_stmt 0 view .LVU682
 3134 004a 0021     		movs	r1, #0
 3135 004c D154     		strb	r1, [r2, r3]
 3136              	.LVL224:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 3137              		.loc 5 329 14 view .LVU683
 3138              	.LBE1760:
 3139              	.LBE1759:
 3140              	.LBE1754:
 3141              	.LBE1753:
 3142              		.loc 2 233 7 view .LVU684
 3143 004e 02B0     		add	sp, sp, #8
 3144              	.LCFI28:
 3145              		.cfi_def_cfa_offset 16
 3146              		@ sp needed
 3147 0050 70BD     		pop	{r4, r5, r6, pc}
 3148              	.LVL225:
 3149              	.L121:
 3150              		.loc 2 233 7 view .LVU685
 3151 0052 00BF     		.align	2
 3152              	.L120:
 3153 0054 00000000 		.word	.LC0
 3154              		.cfi_endproc
 3155              	.LFE2284:
 3156              		.fnend
ARM GAS  /tmp/ccFECPfA.s 			page 259


 3158              		.section	.rodata._ZN5WioE54loopEv.str1.4,"aMS",%progbits,1
 3159              		.align	2
 3160              	.LC3:
 3161 0000 57696F45 		.ascii	"WioE5: %s\015\012\000"
 3161      353A2025 
 3161      730D0A00 
 3162              		.align	2
 3163              	.LC4:
 3164 000c 25730D0A 		.ascii	"%s\015\012\000"
 3164      00
 3165              		.section	.text._ZN5WioE54loopEv,"ax",%progbits
 3166              		.align	1
 3167              		.global	_ZN5WioE54loopEv
 3168              		.syntax unified
 3169              		.thumb
 3170              		.thumb_func
 3171              		.fpu fpv4-sp-d16
 3173              	_ZN5WioE54loopEv:
 3174              		.fnstart
 3175              	.LVL226:
 3176              	.LFB1762:
  51:App/Src/WioE5.cpp ****     // 応答受信後、次のコマンドを送信
 3177              		.loc 1 51 1 is_stmt 1 view -0
 3178              		.cfi_startproc
 3179              		@ args = 0, pretend = 0, frame = 168
 3180              		@ frame_needed = 0, uses_anonymous_args = 0
  51:App/Src/WioE5.cpp ****     // 応答受信後、次のコマンドを送信
 3181              		.loc 1 51 1 is_stmt 0 view .LVU687
 3182 0000 10B5     		push	{r4, lr}
 3183              		.save {r4, lr}
 3184              	.LCFI29:
 3185              		.cfi_def_cfa_offset 8
 3186              		.cfi_offset 4, -8
 3187              		.cfi_offset 14, -4
 3188              		.pad #168
 3189 0002 AAB0     		sub	sp, sp, #168
 3190              	.LCFI30:
 3191              		.cfi_def_cfa_offset 176
  53:App/Src/WioE5.cpp ****     {
 3192              		.loc 1 53 5 is_stmt 1 view .LVU688
 3193              	.LBB1856:
  53:App/Src/WioE5.cpp ****     {
 3194              		.loc 1 53 9 is_stmt 0 view .LVU689
 3195 0004 3B4B     		ldr	r3, .L135
 3196 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  53:App/Src/WioE5.cpp ****     {
 3197              		.loc 1 53 5 view .LVU690
 3198 0008 4BB9     		cbnz	r3, .L132
 3199              	.LVL227:
 3200              	.L123:
  53:App/Src/WioE5.cpp ****     {
 3201              		.loc 1 53 5 view .LVU691
 3202              	.LBE1856:
  63:App/Src/WioE5.cpp ****     {
 3203              		.loc 1 63 5 is_stmt 1 view .LVU692
 3204              	.LBB1858:
 3205              	.LBB1859:
ARM GAS  /tmp/ccFECPfA.s 			page 260


 3206              	.LBI1859:
 168:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 169:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       explicit
 170:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       queue(const _Sequence& __c)
 171:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       : c(__c) { }
 172:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 173:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       explicit
 174:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       queue(_Sequence&& __c)
 175:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       : c(std::move(__c)) { }
 176:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 177:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 178:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	explicit
 179:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	queue(const _Alloc& __a)
 180:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	: c(__a) { }
 181:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 182:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 183:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	queue(const _Sequence& __c, const _Alloc& __a)
 184:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	: c(__c, __a) { }
 185:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 186:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 187:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	queue(_Sequence&& __c, const _Alloc& __a)
 188:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	: c(std::move(__c), __a) { }
 189:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 190:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 191:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	queue(const queue& __q, const _Alloc& __a)
 192:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	: c(__q.c, __a) { }
 193:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 194:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename _Alloc, typename _Requires = _Uses<_Alloc>>
 195:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	queue(queue&& __q, const _Alloc& __a)
 196:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	: c(std::move(__q.c), __a) { }
 197:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif
 198:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 200:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  Returns true if the %queue is empty.
 201:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 202:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       _GLIBCXX_NODISCARD bool
 203:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       empty() const
 3207              		.loc 15 203 7 view .LVU693
 3208              	.LBB1860:
 3209              	.LBI1860:
1308:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 3210              		.loc 13 1308 7 view .LVU694
 3211              	.LBB1861:
 3212              	.LBI1861:
 268:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return __x._M_cur == __y._M_cur; }
 3213              		.loc 13 268 7 view .LVU695
 3214              	.LBB1862:
 269:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3215              		.loc 13 269 20 is_stmt 0 view .LVU696
 3216 000a 3B4B     		ldr	r3, .L135+4
 3217 000c 9A69     		ldr	r2, [r3, #24]
 269:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3218              		.loc 13 269 34 view .LVU697
 3219 000e 9B68     		ldr	r3, [r3, #8]
 3220              	.LVL228:
 269:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3221              		.loc 13 269 34 view .LVU698
ARM GAS  /tmp/ccFECPfA.s 			page 261


 3222              	.LBE1862:
 3223              	.LBE1861:
 3224              	.LBE1860:
 3225              	.LBE1859:
  63:App/Src/WioE5.cpp ****     {
 3226              		.loc 1 63 29 view .LVU699
 3227 0010 9342     		cmp	r3, r2
 3228 0012 02D0     		beq	.L122
  63:App/Src/WioE5.cpp ****     {
 3229              		.loc 1 63 32 discriminator 1 view .LVU700
 3230 0014 394A     		ldr	r2, .L135+8
 3231 0016 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  63:App/Src/WioE5.cpp ****     {
 3232              		.loc 1 63 29 discriminator 1 view .LVU701
 3233 0018 E2B1     		cbz	r2, .L133
 3234              	.L122:
 3235              	.LBE1858:
  72:App/Src/WioE5.cpp **** 
 3236              		.loc 1 72 1 view .LVU702
 3237 001a 2AB0     		add	sp, sp, #168
 3238              	.LCFI31:
 3239              		.cfi_remember_state
 3240              		.cfi_def_cfa_offset 8
 3241              		@ sp needed
 3242 001c 10BD     		pop	{r4, pc}
 3243              	.LVL229:
 3244              	.L132:
 3245              	.LCFI32:
 3246              		.cfi_restore_state
 3247              	.LBB1945:
 3248              	.LBB1857:
  55:App/Src/WioE5.cpp ****         snprintf(rx2buffer, sizeof(rx2buffer), "WioE5: %s\r\n", rxBuffer);
 3249              		.loc 1 55 9 is_stmt 1 view .LVU703
  56:App/Src/WioE5.cpp ****         HAL_UART_Transmit(&huart1, (uint8_t *)rx2buffer, strlen(rx2buffer), 1000);
 3250              		.loc 1 56 9 view .LVU704
  56:App/Src/WioE5.cpp ****         HAL_UART_Transmit(&huart1, (uint8_t *)rx2buffer, strlen(rx2buffer), 1000);
 3251              		.loc 1 56 17 is_stmt 0 view .LVU705
 3252 001e 384B     		ldr	r3, .L135+12
 3253 0020 384A     		ldr	r2, .L135+16
 3254 0022 8021     		movs	r1, #128
 3255 0024 06A8     		add	r0, sp, #24
 3256              	.LVL230:
  56:App/Src/WioE5.cpp ****         HAL_UART_Transmit(&huart1, (uint8_t *)rx2buffer, strlen(rx2buffer), 1000);
 3257              		.loc 1 56 17 view .LVU706
 3258 0026 FFF7FEFF 		bl	snprintf
 3259              	.LVL231:
  57:App/Src/WioE5.cpp ****         rxReady = false;
 3260              		.loc 1 57 9 is_stmt 1 view .LVU707
  57:App/Src/WioE5.cpp ****         rxReady = false;
 3261              		.loc 1 57 64 is_stmt 0 view .LVU708
 3262 002a 06A8     		add	r0, sp, #24
 3263 002c FFF7FEFF 		bl	strlen
 3264              	.LVL232:
  57:App/Src/WioE5.cpp ****         rxReady = false;
 3265              		.loc 1 57 26 view .LVU709
 3266 0030 4FF47A73 		mov	r3, #1000
 3267 0034 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccFECPfA.s 			page 262


 3268 0036 06A9     		add	r1, sp, #24
 3269 0038 3348     		ldr	r0, .L135+20
 3270              	.LEHB14:
 3271 003a FFF7FEFF 		bl	HAL_UART_Transmit
 3272              	.LVL233:
  58:App/Src/WioE5.cpp ****         atBusy = false;
 3273              		.loc 1 58 9 is_stmt 1 view .LVU710
  58:App/Src/WioE5.cpp ****         atBusy = false;
 3274              		.loc 1 58 17 is_stmt 0 view .LVU711
 3275 003e 0023     		movs	r3, #0
 3276 0040 2C4A     		ldr	r2, .L135
 3277 0042 1370     		strb	r3, [r2]
  59:App/Src/WioE5.cpp ****         HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 3278              		.loc 1 59 9 is_stmt 1 view .LVU712
  59:App/Src/WioE5.cpp ****         HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 3279              		.loc 1 59 16 is_stmt 0 view .LVU713
 3280 0044 2D4A     		ldr	r2, .L135+8
 3281 0046 1370     		strb	r3, [r2]
  60:App/Src/WioE5.cpp ****     }
 3282              		.loc 1 60 9 is_stmt 1 view .LVU714
  60:App/Src/WioE5.cpp ****     }
 3283              		.loc 1 60 28 is_stmt 0 view .LVU715
 3284 0048 0122     		movs	r2, #1
 3285 004a 3049     		ldr	r1, .L135+24
 3286 004c 3048     		ldr	r0, .L135+28
 3287 004e FFF7FEFF 		bl	HAL_UART_Receive_IT
 3288              	.LVL234:
 3289              	.LBE1857:
 3290 0052 DAE7     		b	.L123
 3291              	.L133:
 3292              	.LBE1945:
 3293              	.LBB1946:
 3294              	.LBB1863:
  65:App/Src/WioE5.cpp ****         atCmdQueue.pop();
 3295              		.loc 1 65 9 is_stmt 1 view .LVU716
 3296              	.LVL235:
 3297              	.LBB1864:
 3298              	.LBI1864:
 204:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       { return c.empty(); }
 205:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 206:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**  Returns the number of elements in the %queue.  */
 207:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       size_type
 208:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       size() const
 209:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       { return c.size(); }
 210:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 211:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 212:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  Returns a read/write reference to the data at the first
 213:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  element of the %queue.
 214:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 215:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       reference
 216:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       front()
 3299              		.loc 15 216 7 view .LVU717
 3300              	.LBB1865:
 3301              	.LBI1865:
1402:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 3302              		.loc 13 1402 7 view .LVU718
 3303              	.LBB1866:
ARM GAS  /tmp/ccFECPfA.s 			page 263


 3304              	.LBB1867:
 3305              	.LBI1867:
1125:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_start; }
 3306              		.loc 13 1125 7 view .LVU719
 3307              	.LBB1868:
 3308              	.LBI1868:
 168:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        : _M_cur(__x._M_cur), _M_first(__x._M_first),
 3309              		.loc 13 168 7 view .LVU720
 3310              	.LBB1869:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3311              		.loc 13 170 44 is_stmt 0 view .LVU721
 3312 0054 2693     		str	r3, [sp, #152]
 169:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 3313              		.loc 13 169 43 view .LVU722
 3314 0056 284C     		ldr	r4, .L135+4
 3315 0058 E268     		ldr	r2, [r4, #12]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3316              		.loc 13 170 44 view .LVU723
 3317 005a 2792     		str	r2, [sp, #156]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3318              		.loc 13 170 15 view .LVU724
 3319 005c 2269     		ldr	r2, [r4, #16]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3320              		.loc 13 170 44 view .LVU725
 3321 005e 2892     		str	r2, [sp, #160]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3322              		.loc 13 170 37 view .LVU726
 3323 0060 6269     		ldr	r2, [r4, #20]
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3324              		.loc 13 170 44 view .LVU727
 3325 0062 2992     		str	r2, [sp, #164]
 3326              	.LVL236:
 170:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 3327              		.loc 13 170 44 view .LVU728
 3328              	.LBE1869:
 3329              	.LBE1868:
 3330              	.LBE1867:
 3331              	.LBE1866:
 3332              	.LBE1865:
 3333              	.LBE1864:
 3334              	.LBB1870:
 3335              	.LBI1870:
 456:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
 3336              		.loc 4 456 7 is_stmt 1 view .LVU729
 3337              	.LBB1871:
 3338              	.LBB1872:
 3339              	.LBB1873:
 3340              	.LBI1873:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3341              		.loc 4 198 7 view .LVU730
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3342              		.loc 4 198 7 is_stmt 0 view .LVU731
 3343              	.LBE1873:
 3344              	.LBB1874:
 3345              	.LBI1874:
 298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 3346              		.loc 4 298 7 is_stmt 1 view .LVU732
ARM GAS  /tmp/ccFECPfA.s 			page 264


 298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 3347              		.loc 4 298 7 is_stmt 0 view .LVU733
 3348              	.LBE1874:
 3349              	.LBB1875:
 3350              	.LBI1875:
 3351              		.file 17 "/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h"
   1:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
   3:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** //
   5:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  11:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  16:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  20:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  25:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****  */
  28:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  29:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  32:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  34:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  35:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #if __cplusplus < 201103L
  36:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  37:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #endif
  38:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  39:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  40:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** {
  41:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  42:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  43:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** /**
  44:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++11 allocators.
  45:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****  * @ingroup allocators
  46:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** */
  47:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** template<typename _Alloc, typename = typename _Alloc::value_type>
  48:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****   struct __alloc_traits
  49:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  50:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
  51:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #endif
ARM GAS  /tmp/ccFECPfA.s 			page 265


  52:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****   {
  53:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
  54:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  55:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
  56:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
  57:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
  58:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
  59:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
  60:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
  61:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     // C++11 allocators do not define reference or const_reference
  62:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef value_type&                             reference;
  63:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
  64:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     using _Base_type::allocate;
  65:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     using _Base_type::deallocate;
  66:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     using _Base_type::construct;
  67:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     using _Base_type::destroy;
  68:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     using _Base_type::max_size;
  69:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  70:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****   private:
  71:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     template<typename _Ptr>
  72:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       using __is_custom_pointer
  73:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 	= std::__and_<std::is_same<pointer, _Ptr>,
  74:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 		      std::__not_<std::is_pointer<_Ptr>>>;
  75:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  76:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****   public:
  77:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
  78:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
  79:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  80:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  81:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
  82:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p),
  83:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 					      std::forward<_Args>(__args)...)))
  84:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       {
  85:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::__to_address(__p),
  86:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
  87:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       }
  88:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  89:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
  90:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     template<typename _Ptr>
  91:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       static _GLIBCXX14_CONSTEXPR
  92:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
  93:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
  94:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
  95:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::__to_address(__p)); }
  96:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h **** 
  97:/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h ****     static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 3352              		.loc 17 97 29 is_stmt 1 view .LVU734
 3353              	.LBB1876:
 3354              	.LBI1876:
 558:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __rhs; }
 3355              		.loc 7 558 7 view .LVU735
 3356              	.LBB1877:
 3357              	.LBI1877:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3358              		.loc 9 167 7 view .LVU736
 3359              	.LBB1878:
 3360              	.LBI1878:
ARM GAS  /tmp/ccFECPfA.s 			page 266


  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3361              		.loc 8 82 7 view .LVU737
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3362              		.loc 8 82 7 is_stmt 0 view .LVU738
 3363              	.LBE1878:
 3364              	.LBE1877:
 3365              	.LBE1876:
 3366              	.LBE1875:
 3367              	.LBB1879:
 3368              	.LBI1879:
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 3369              		.loc 4 167 2 is_stmt 1 view .LVU739
 3370              	.LBB1880:
 3371              	.LBB1881:
 3372              	.LBB1882:
 3373              	.LBI1882:
 3374              		.file 18 "/usr/include/newlib/c++/10.3.1/bits/move.h"
   1:/usr/include/newlib/c++/10.3.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/move.h **** // Copyright (C) 2007-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/move.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/move.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/move.h **** /** @file bits/move.h
  26:/usr/include/newlib/c++/10.3.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/newlib/c++/10.3.1/bits/move.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/newlib/c++/10.3.1/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  33:/usr/include/newlib/c++/10.3.1/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/newlib/c++/10.3.1/bits/move.h **** #if __cplusplus < 201103L
  35:/usr/include/newlib/c++/10.3.1/bits/move.h **** # include <bits/concept_check.h>
  36:/usr/include/newlib/c++/10.3.1/bits/move.h **** #endif
  37:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  38:/usr/include/newlib/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  39:/usr/include/newlib/c++/10.3.1/bits/move.h **** {
  40:/usr/include/newlib/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
ARM GAS  /tmp/ccFECPfA.s 			page 267


  41:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  42:/usr/include/newlib/c++/10.3.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  43:/usr/include/newlib/c++/10.3.1/bits/move.h ****   /**
  44:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  45:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @ingroup utilities
  46:/usr/include/newlib/c++/10.3.1/bits/move.h ****    */
  47:/usr/include/newlib/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  48:/usr/include/newlib/c++/10.3.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  49:/usr/include/newlib/c++/10.3.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  50:/usr/include/newlib/c++/10.3.1/bits/move.h ****     { return __builtin_addressof(__r); }
  51:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  52:/usr/include/newlib/c++/10.3.1/bits/move.h **** #if __cplusplus >= 201103L
  53:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  54:/usr/include/newlib/c++/10.3.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  55:/usr/include/newlib/c++/10.3.1/bits/move.h **** } // namespace
  56:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  57:/usr/include/newlib/c++/10.3.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  58:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/newlib/c++/10.3.1/bits/move.h **** {
  61:/usr/include/newlib/c++/10.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  63:/usr/include/newlib/c++/10.3.1/bits/move.h ****   /**
  64:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @addtogroup utilities
  65:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @{
  66:/usr/include/newlib/c++/10.3.1/bits/move.h ****    */
  67:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  68:/usr/include/newlib/c++/10.3.1/bits/move.h ****   /**
  69:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @brief  Forward an lvalue.
  70:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  71:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *
  72:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  73:/usr/include/newlib/c++/10.3.1/bits/move.h ****    */
  74:/usr/include/newlib/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  75:/usr/include/newlib/c++/10.3.1/bits/move.h ****     constexpr _Tp&&
  76:/usr/include/newlib/c++/10.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
  77:/usr/include/newlib/c++/10.3.1/bits/move.h ****     { return static_cast<_Tp&&>(__t); }
  78:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/move.h ****   /**
  80:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @brief  Forward an rvalue.
  81:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  82:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *
  83:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  84:/usr/include/newlib/c++/10.3.1/bits/move.h ****    */
  85:/usr/include/newlib/c++/10.3.1/bits/move.h ****   template<typename _Tp>
  86:/usr/include/newlib/c++/10.3.1/bits/move.h ****     constexpr _Tp&&
  87:/usr/include/newlib/c++/10.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
  88:/usr/include/newlib/c++/10.3.1/bits/move.h ****     {
  89:/usr/include/newlib/c++/10.3.1/bits/move.h ****       static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
  90:/usr/include/newlib/c++/10.3.1/bits/move.h **** 		    " substituting _Tp is an lvalue reference type");
  91:/usr/include/newlib/c++/10.3.1/bits/move.h ****       return static_cast<_Tp&&>(__t);
  92:/usr/include/newlib/c++/10.3.1/bits/move.h ****     }
  93:/usr/include/newlib/c++/10.3.1/bits/move.h **** 
  94:/usr/include/newlib/c++/10.3.1/bits/move.h ****   /**
  95:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @brief  Convert a value to an rvalue.
  96:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @param  __t  A thing of arbitrary type.
  97:/usr/include/newlib/c++/10.3.1/bits/move.h ****    *  @return The parameter cast to an rvalue-reference to allow moving it.
ARM GAS  /tmp/ccFECPfA.s 			page 268


  98:/usr/include/newlib/c++/10.3.1/bits/move.h ****   */
  99:/usr/include/newlib/c++/10.3.1/bits/move.h ****   template<typename _Tp>
 100:/usr/include/newlib/c++/10.3.1/bits/move.h ****     constexpr typename std::remove_reference<_Tp>::type&&
 101:/usr/include/newlib/c++/10.3.1/bits/move.h ****     move(_Tp&& __t) noexcept
 3375              		.loc 18 101 5 view .LVU740
 3376              		.loc 18 101 5 is_stmt 0 view .LVU741
 3377              	.LBE1882:
 3378              	.LBB1883:
 3379              	.LBI1883:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 3380              		.loc 9 167 7 is_stmt 1 view .LVU742
 3381              	.LBB1884:
 3382              	.LBI1884:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3383              		.loc 8 82 7 view .LVU743
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3384              		.loc 8 82 7 is_stmt 0 view .LVU744
 3385              	.LBE1884:
 3386              	.LBE1883:
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 3387              		.loc 4 168 46 view .LVU745
 3388 0064 02AA     		add	r2, sp, #8
 3389              	.LVL237:
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 3390              		.loc 4 168 46 view .LVU746
 3391 0066 0092     		str	r2, [sp]
 3392              	.LVL238:
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 3393              		.loc 4 168 46 view .LVU747
 3394              	.LBE1881:
 3395              	.LBE1880:
 3396              	.LBE1879:
 3397              	.LBB1885:
 3398              	.LBI1885:
 3399              		.loc 9 182 7 is_stmt 1 view .LVU748
 3400              	.LBB1886:
 3401              	.LBI1886:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3402              		.loc 8 89 7 view .LVU749
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3403              		.loc 8 89 7 is_stmt 0 view .LVU750
 3404              	.LBE1886:
 3405              	.LBE1885:
 3406              	.LBB1887:
 3407              	.LBI1887:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3408              		.loc 4 194 7 is_stmt 1 view .LVU751
 3409              	.LBB1888:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3410              		.loc 4 195 28 is_stmt 0 view .LVU752
 3411 0068 1968     		ldr	r1, [r3]
 3412              	.LVL239:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3413              		.loc 4 195 28 view .LVU753
 3414              	.LBE1888:
 3415              	.LBE1887:
 3416              	.LBB1889:
ARM GAS  /tmp/ccFECPfA.s 			page 269


 3417              	.LBI1889:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3418              		.loc 4 194 7 is_stmt 1 view .LVU754
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3419              		.loc 4 194 7 is_stmt 0 view .LVU755
 3420              	.LBE1889:
 3421              	.LBB1890:
 3422              	.LBI1890:
 920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 3423              		.loc 4 920 7 is_stmt 1 view .LVU756
 3424              	.LBB1891:
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3425              		.loc 4 921 16 is_stmt 0 view .LVU757
 3426 006a 5A68     		ldr	r2, [r3, #4]
 3427              	.LVL240:
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3428              		.loc 4 921 16 view .LVU758
 3429              	.LBE1891:
 3430              	.LBE1890:
 3431              	.LBB1892:
 3432              	.LBI1892:
 271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
 3433              		.loc 4 271 9 is_stmt 1 view .LVU759
 3434              	.LBB1893:
 3435              	.LBB1894:
 3436              	.LBI1894:
 251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 std::__false_type)
 3437              		.loc 4 251 9 view .LVU760
 3438              	.LBB1895:
 255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 3439              		.loc 4 255 23 is_stmt 0 view .LVU761
 3440 006c 4FF00003 		mov	r3, #0
 3441 0070 0A44     		add	r2, r2, r1
 3442              	.LVL241:
 255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 3443              		.loc 4 255 23 view .LVU762
 3444 0072 6846     		mov	r0, sp
 3445 0074 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_itera
 3446              	.LVL242:
 3447              	.LEHE14:
 255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 3448              		.loc 4 255 23 view .LVU763
 3449              	.LBE1895:
 3450              	.LBE1894:
 3451              	.LBE1893:
 3452              	.LBE1892:
 3453              	.LBE1872:
 3454              	.LBE1871:
 3455              	.LBE1870:
  66:App/Src/WioE5.cpp ****         char buffer[64] = {0};
 3456              		.loc 1 66 9 is_stmt 1 view .LVU764
 3457              	.LBB1896:
 3458              	.LBI1896:
 217:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       {
 218:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	__glibcxx_requires_nonempty();
 219:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	return c.front();
 220:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       }
ARM GAS  /tmp/ccFECPfA.s 			page 270


 221:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 222:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 223:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  Returns a read-only (constant) reference to the data at the first
 224:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  element of the %queue.
 225:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 226:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       const_reference
 227:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       front() const
 228:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       {
 229:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	__glibcxx_requires_nonempty();
 230:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	return c.front();
 231:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       }
 232:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 233:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 234:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  Returns a read/write reference to the data at the last
 235:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  element of the %queue.
 236:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 237:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       reference
 238:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       back()
 239:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       {
 240:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	__glibcxx_requires_nonempty();
 241:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	return c.back();
 242:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       }
 243:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 244:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 245:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  Returns a read-only (constant) reference to the data at the last
 246:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  element of the %queue.
 247:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 248:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       const_reference
 249:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       back() const
 250:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       {
 251:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	__glibcxx_requires_nonempty();
 252:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	return c.back();
 253:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       }
 254:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 255:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 256:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  @brief  Add data to the end of the %queue.
 257:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  @param  __x  Data to be added.
 258:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *
 259:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  This is a typical %queue operation.  The function creates an
 260:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  element at the end of the %queue and assigns the given data
 261:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  to it.  The time complexity of the operation depends on the
 262:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  underlying sequence.
 263:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 264:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       void
 265:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       push(const value_type& __x)
 266:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       { c.push_back(__x); }
 267:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 268:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #if __cplusplus >= 201103L
 269:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       void
 270:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       push(value_type&& __x)
 271:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       { c.push_back(std::move(__x)); }
 272:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 273:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #if __cplusplus > 201402L
 274:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename... _Args>
 275:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	decltype(auto)
 276:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	emplace(_Args&&... __args)
 277:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	{ return c.emplace_back(std::forward<_Args>(__args)...); }
ARM GAS  /tmp/ccFECPfA.s 			page 271


 278:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #else
 279:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       template<typename... _Args>
 280:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	void
 281:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	emplace(_Args&&... __args)
 282:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 	{ c.emplace_back(std::forward<_Args>(__args)...); }
 283:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif
 284:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** #endif
 285:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 286:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       /**
 287:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  @brief  Removes first element.
 288:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *
 289:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  This is a typical %queue operation.  It shrinks the %queue by one.
 290:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  The time complexity of the operation depends on the underlying
 291:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  sequence.
 292:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *
 293:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  Note that no data is returned, and if the first element's
 294:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  data is needed, it should be retrieved before pop() is
 295:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        *  called.
 296:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****        */
 297:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       void
 298:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       pop()
 3459              		.loc 15 298 7 view .LVU765
 3460              	.LBB1897:
 3461              	.LBI1897:
1529:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 3462              		.loc 13 1529 7 view .LVU766
 3463              	.LBB1898:
1532:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
 3464              		.loc 13 1532 29 is_stmt 0 view .LVU767
 3465 0078 A268     		ldr	r2, [r4, #8]
1533:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 3466              		.loc 13 1533 32 view .LVU768
 3467 007a 2369     		ldr	r3, [r4, #16]
1533:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  {
 3468              		.loc 13 1533 40 view .LVU769
 3469 007c 183B     		subs	r3, r3, #24
1532:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    != this->_M_impl._M_start._M_last - 1)
 3470              		.loc 13 1532 2 view .LVU770
 3471 007e 9A42     		cmp	r2, r3
 3472 0080 23D0     		beq	.L125
 3473              	.LVL243:
 3474              	.LBB1899:
 3475              	.LBI1899:
 527:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 3476              		.loc 7 527 2 is_stmt 1 view .LVU771
 3477              	.LBB1900:
 3478              	.LBI1900:
 3479              		.loc 8 160 2 view .LVU772
 3480              	.LBB1901:
 3481              	.LBI1901:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 3482              		.loc 4 670 7 view .LVU773
 3483              	.LBB1902:
 3484              	.LBI1902:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3485              		.loc 4 237 7 view .LVU774
 3486              	.LBB1903:
ARM GAS  /tmp/ccFECPfA.s 			page 272


 3487              	.LBB1904:
 3488              	.LBI1904:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 3489              		.loc 4 229 7 view .LVU775
 3490              	.LBB1905:
 3491              	.LBI1905:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3492              		.loc 4 194 7 view .LVU776
 3493              	.LBB1906:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3494              		.loc 4 195 28 is_stmt 0 view .LVU777
 3495 0082 1346     		mov	r3, r2
 3496 0084 53F8080B 		ldr	r0, [r3], #8
 3497              	.LVL244:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3498              		.loc 4 195 28 view .LVU778
 3499              	.LBE1906:
 3500              	.LBE1905:
 3501              	.LBB1907:
 3502              	.LBI1907:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3503              		.loc 4 208 7 is_stmt 1 view .LVU779
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3504              		.loc 4 208 7 is_stmt 0 view .LVU780
 3505              	.LBE1907:
 3506              	.LBE1904:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3507              		.loc 4 239 2 view .LVU781
 3508 0088 9842     		cmp	r0, r3
 3509 008a 03D0     		beq	.L126
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 3510              		.loc 4 240 14 view .LVU782
 3511 008c 9168     		ldr	r1, [r2, #8]
 3512              	.LVL245:
 3513              	.LBB1908:
 3514              	.LBI1908:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 3515              		.loc 4 244 7 is_stmt 1 view .LVU783
 3516              	.LBB1909:
 3517              	.LBB1910:
 3518              	.LBI1910:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 3519              		.loc 7 491 7 view .LVU784
 3520              	.LBB1911:
 3521              	.LBI1911:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 3522              		.loc 8 126 7 view .LVU785
 3523              	.LBB1912:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3524              		.loc 8 139 19 is_stmt 0 view .LVU786
 3525 008e 0131     		adds	r1, r1, #1
 3526              	.LVL246:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3527              		.loc 8 139 19 view .LVU787
 3528 0090 FFF7FEFF 		bl	_ZdlPvj
 3529              	.LVL247:
 3530              	.L126:
ARM GAS  /tmp/ccFECPfA.s 			page 273


 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3531              		.loc 8 139 19 view .LVU788
 3532              	.LBE1912:
 3533              	.LBE1911:
 3534              	.LBE1910:
 3535              	.LBE1909:
 3536              	.LBE1908:
 3537              	.LBE1903:
 3538              	.LBE1902:
 3539              	.LBB1913:
 3540              	.LBI1913:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3541              		.loc 4 158 14 is_stmt 1 view .LVU789
 3542              	.LBB1914:
 3543              	.LBI1914:
 3544              		.loc 9 182 7 view .LVU790
 3545              	.LBB1915:
 3546              	.LBI1915:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3547              		.loc 8 89 7 view .LVU791
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3548              		.loc 8 89 7 is_stmt 0 view .LVU792
 3549              	.LBE1915:
 3550              	.LBE1914:
 3551              	.LBE1913:
 3552              	.LBE1901:
 3553              	.LBE1900:
 3554              	.LBE1899:
1537:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 3555              		.loc 13 1537 31 view .LVU793
 3556 0094 184A     		ldr	r2, .L135+4
 3557 0096 9368     		ldr	r3, [r2, #8]
1537:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 3558              		.loc 13 1537 6 view .LVU794
 3559 0098 1833     		adds	r3, r3, #24
 3560 009a 9360     		str	r3, [r2, #8]
 3561              	.L127:
 3562              	.LVL248:
1537:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  }
 3563              		.loc 13 1537 6 view .LVU795
 3564              	.LBE1898:
 3565              	.LBE1897:
 3566              	.LBE1896:
  67:App/Src/WioE5.cpp ****         snprintf(buffer, sizeof(buffer), "%s\r\n", cmd.c_str());
 3567              		.loc 1 67 9 is_stmt 1 view .LVU796
  67:App/Src/WioE5.cpp ****         snprintf(buffer, sizeof(buffer), "%s\r\n", cmd.c_str());
 3568              		.loc 1 67 14 is_stmt 0 view .LVU797
 3569 009c 0021     		movs	r1, #0
 3570 009e 0691     		str	r1, [sp, #24]
 3571 00a0 3C22     		movs	r2, #60
 3572 00a2 07A8     		add	r0, sp, #28
 3573 00a4 FFF7FEFF 		bl	memset
 3574              	.LVL249:
  68:App/Src/WioE5.cpp ****         HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 1000);
 3575              		.loc 1 68 9 is_stmt 1 view .LVU798
 3576              	.LBB1918:
 3577              	.LBI1918:
ARM GAS  /tmp/ccFECPfA.s 			page 274


 3578              		.loc 4 2312 7 view .LVU799
 3579              	.LBB1919:
 3580              	.LBI1919:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3581              		.loc 4 194 7 view .LVU800
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3582              		.loc 4 194 7 is_stmt 0 view .LVU801
 3583              	.LBE1919:
 3584              	.LBE1918:
  68:App/Src/WioE5.cpp ****         HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 1000);
 3585              		.loc 1 68 17 view .LVU802
 3586 00a8 009B     		ldr	r3, [sp]
 3587 00aa 1A4A     		ldr	r2, .L135+32
 3588 00ac 4021     		movs	r1, #64
 3589 00ae 06A8     		add	r0, sp, #24
 3590 00b0 FFF7FEFF 		bl	snprintf
 3591              	.LVL250:
  69:App/Src/WioE5.cpp ****         atBusy = true;
 3592              		.loc 1 69 9 is_stmt 1 view .LVU803
  69:App/Src/WioE5.cpp ****         atBusy = true;
 3593              		.loc 1 69 61 is_stmt 0 view .LVU804
 3594 00b4 06A8     		add	r0, sp, #24
 3595 00b6 FFF7FEFF 		bl	strlen
 3596              	.LVL251:
  69:App/Src/WioE5.cpp ****         atBusy = true;
 3597              		.loc 1 69 26 view .LVU805
 3598 00ba 4FF47A73 		mov	r3, #1000
 3599 00be 82B2     		uxth	r2, r0
 3600 00c0 06A9     		add	r1, sp, #24
 3601 00c2 1348     		ldr	r0, .L135+28
 3602              	.LEHB15:
 3603 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 3604              	.LVL252:
 3605              	.LEHE15:
 3606 00c8 03E0     		b	.L134
 3607              	.LVL253:
 3608              	.L125:
 3609              	.LBB1920:
 3610              	.LBB1917:
 3611              	.LBB1916:
1540:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 3612              		.loc 13 1540 20 view .LVU806
 3613 00ca 0B48     		ldr	r0, .L135+4
 3614 00cc FFF7FEFF 		bl	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv
 3615              	.LVL254:
 3616 00d0 E4E7     		b	.L127
 3617              	.LVL255:
 3618              	.L134:
1540:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 3619              		.loc 13 1540 20 view .LVU807
 3620              	.LBE1916:
 3621              	.LBE1917:
 3622              	.LBE1920:
  70:App/Src/WioE5.cpp ****     }
 3623              		.loc 1 70 9 is_stmt 1 view .LVU808
  70:App/Src/WioE5.cpp ****     }
 3624              		.loc 1 70 16 is_stmt 0 view .LVU809
ARM GAS  /tmp/ccFECPfA.s 			page 275


 3625 00d2 0A4B     		ldr	r3, .L135+8
 3626 00d4 0122     		movs	r2, #1
 3627 00d6 1A70     		strb	r2, [r3]
 3628              	.LVL256:
 3629              	.LBB1921:
 3630              	.LBI1921:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 3631              		.loc 4 670 7 is_stmt 1 view .LVU810
 3632              	.LBB1922:
 3633              	.LBB1923:
 3634              	.LBI1923:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3635              		.loc 4 237 7 view .LVU811
 3636              	.LBB1924:
 3637              	.LBB1925:
 3638              	.LBI1925:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 3639              		.loc 4 229 7 view .LVU812
 3640              	.LBB1926:
 3641              	.LBI1926:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 3642              		.loc 4 194 7 view .LVU813
 3643              	.LBB1927:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3644              		.loc 4 195 28 is_stmt 0 view .LVU814
 3645 00d8 0098     		ldr	r0, [sp]
 3646              	.LVL257:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3647              		.loc 4 195 28 view .LVU815
 3648              	.LBE1927:
 3649              	.LBE1926:
 3650              	.LBB1928:
 3651              	.LBI1928:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3652              		.loc 4 208 7 is_stmt 1 view .LVU816
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3653              		.loc 4 208 7 is_stmt 0 view .LVU817
 3654              	.LBE1928:
 3655              	.LBE1925:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 3656              		.loc 4 239 2 view .LVU818
 3657 00da 02AB     		add	r3, sp, #8
 3658 00dc 9842     		cmp	r0, r3
 3659 00de 9CD0     		beq	.L122
 3660              	.LVL258:
 3661              	.LBB1929:
 3662              	.LBI1929:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 3663              		.loc 4 244 7 is_stmt 1 view .LVU819
 3664              	.LBB1930:
 3665              	.LBB1931:
 3666              	.LBI1931:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 3667              		.loc 7 491 7 view .LVU820
 3668              	.LBB1932:
 3669              	.LBI1932:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
ARM GAS  /tmp/ccFECPfA.s 			page 276


 3670              		.loc 8 126 7 view .LVU821
 3671              	.LBB1933:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3672              		.loc 8 139 19 is_stmt 0 view .LVU822
 3673 00e0 0299     		ldr	r1, [sp, #8]
 3674 00e2 1144     		add	r1, r1, r2
 3675              	.LVL259:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3676              		.loc 8 139 19 view .LVU823
 3677 00e4 FFF7FEFF 		bl	_ZdlPvj
 3678              	.LVL260:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 3679              		.loc 8 139 19 view .LVU824
 3680              	.LBE1933:
 3681              	.LBE1932:
 3682              	.LBE1931:
 3683              	.LBE1930:
 3684              	.LBE1929:
 3685              	.LBE1924:
 3686              	.LBE1923:
 3687              	.LBB1934:
 3688              	.LBI1934:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3689              		.loc 4 158 14 is_stmt 1 view .LVU825
 3690              	.LBB1935:
 3691              	.LBB1936:
 3692              	.LBI1936:
 3693              		.loc 9 182 7 view .LVU826
 3694              	.LBB1937:
 3695              	.LBI1937:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3696              		.loc 8 89 7 view .LVU827
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3697              		.loc 8 89 7 is_stmt 0 view .LVU828
 3698              	.LBE1937:
 3699              	.LBE1936:
 3700              	.LBE1935:
 3701              	.LBE1934:
 3702              	.LBE1922:
 3703              	.LBE1921:
 3704              	.LBE1863:
 3705              	.LBE1946:
  72:App/Src/WioE5.cpp **** 
 3706              		.loc 1 72 1 view .LVU829
 3707 00e8 97E7     		b	.L122
 3708              	.L130:
 3709              	.LVL261:
 3710              	.LBB1947:
 3711              	.LBB1944:
 3712              	.LBB1938:
 3713              	.LBI1938:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 3714              		.loc 4 670 7 is_stmt 1 view .LVU830
 3715              	.LBB1939:
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 3716              		.loc 4 671 19 is_stmt 0 view .LVU831
 3717 00ea 6846     		mov	r0, sp
ARM GAS  /tmp/ccFECPfA.s 			page 277


 3718 00ec FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 3719              	.LVL262:
 3720              	.LBB1940:
 3721              	.LBI1940:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 3722              		.loc 4 158 14 is_stmt 1 view .LVU832
 3723              	.LBB1941:
 3724              	.LBB1942:
 3725              	.LBI1942:
 3726              		.loc 9 182 7 view .LVU833
 3727              	.LBB1943:
 3728              	.LBI1943:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3729              		.loc 8 89 7 view .LVU834
 3730              	.LEHB16:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3731              		.loc 8 89 7 is_stmt 0 view .LVU835
 3732 00f0 FFF7FEFF 		bl	__cxa_end_cleanup
 3733              	.LVL263:
 3734              	.LEHE16:
 3735              	.L136:
 3736              		.align	2
 3737              	.L135:
 3738 00f4 00000000 		.word	.LANCHOR3
 3739 00f8 00000000 		.word	.LANCHOR4
 3740 00fc 00000000 		.word	.LANCHOR5
 3741 0100 00000000 		.word	.LANCHOR2
 3742 0104 00000000 		.word	.LC3
 3743 0108 00000000 		.word	huart1
 3744 010c 00000000 		.word	.LANCHOR0
 3745 0110 00000000 		.word	huart2
 3746 0114 0C000000 		.word	.LC4
 3747              	.LBE1943:
 3748              	.LBE1942:
 3749              	.LBE1941:
 3750              	.LBE1940:
 3751              	.LBE1939:
 3752              	.LBE1938:
 3753              	.LBE1944:
 3754              	.LBE1947:
 3755              		.cfi_endproc
 3756              	.LFE1762:
 3757              		.personality	__gxx_personality_v0
 3758              		.handlerdata
 3759              	.LLSDA1762:
 3760 0008 FF       		.byte	0xff
 3761 0009 FF       		.byte	0xff
 3762 000a 01       		.byte	0x1
 3763 000b 0F       		.uleb128 .LLSDACSE1762-.LLSDACSB1762
 3764              	.LLSDACSB1762:
 3765 000c 3A       		.uleb128 .LEHB14-.LFB1762
 3766 000d 3E       		.uleb128 .LEHE14-.LEHB14
 3767 000e 00       		.uleb128 0
 3768 000f 00       		.uleb128 0
 3769 0010 C401     		.uleb128 .LEHB15-.LFB1762
 3770 0012 04       		.uleb128 .LEHE15-.LEHB15
 3771 0013 EA01     		.uleb128 .L130-.LFB1762
ARM GAS  /tmp/ccFECPfA.s 			page 278


 3772 0015 00       		.uleb128 0
 3773 0016 F001     		.uleb128 .LEHB16-.LFB1762
 3774 0018 04       		.uleb128 .LEHE16-.LEHB16
 3775 0019 00       		.uleb128 0
 3776 001a 00       		.uleb128 0
 3777              	.LLSDACSE1762:
 3778              		.section	.text._ZN5WioE54loopEv
 3779              		.fnend
 3781              		.section	.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallo
 3782              		.align	1
 3783              		.weak	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapE
 3784              		.syntax unified
 3785              		.thumb
 3786              		.thumb_func
 3787              		.fpu fpv4-sp-d16
 3789              	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb:
 3790              		.fnstart
 3791              	.LVL264:
 3792              	.LFB2383:
 875:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 876:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 877:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
 878:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 879:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_new_elements_at_front(size_type __new_elems)
 880:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 881:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (this->max_size() - this->size() < __new_elems)
 882:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__throw_length_error(__N("deque::_M_new_elements_at_front"));
 883:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 884:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 885:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     / _S_buffer_size());
 886:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_reserve_map_at_front(__new_nodes);
 887:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       size_type __i;
 888:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __try
 889:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 890:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  for (__i = 1; __i <= __new_nodes; ++__i)
 891:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    *(this->_M_impl._M_start._M_node - __i) = this->_M_allocate_node();
 892:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 893:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __catch(...)
 894:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 895:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  for (size_type __j = 1; __j < __i; ++__j)
 896:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_start._M_node - __j));
 897:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __throw_exception_again;
 898:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 899:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 900:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 901:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 902:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
 903:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 904:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_new_elements_at_back(size_type __new_elems)
 905:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 906:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (this->max_size() - this->size() < __new_elems)
 907:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__throw_length_error(__N("deque::_M_new_elements_at_back"));
 908:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 909:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const size_type __new_nodes = ((__new_elems + _S_buffer_size() - 1)
 910:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     / _S_buffer_size());
 911:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_reserve_map_at_back(__new_nodes);
 912:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       size_type __i;
ARM GAS  /tmp/ccFECPfA.s 			page 279


 913:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __try
 914:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 915:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  for (__i = 1; __i <= __new_nodes; ++__i)
 916:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    *(this->_M_impl._M_finish._M_node + __i) = this->_M_allocate_node();
 917:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 918:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       __catch(...)
 919:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 920:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  for (size_type __j = 1; __j < __i; ++__j)
 921:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + __j));
 922:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __throw_exception_again;
 923:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 924:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 925:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 926:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****   template <typename _Tp, typename _Alloc>
 927:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     void
 928:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     deque<_Tp, _Alloc>::
 3793              		.loc 14 928 5 is_stmt 1 view -0
 3794              		.cfi_startproc
 3795              		@ args = 0, pretend = 0, frame = 8
 3796              		@ frame_needed = 0, uses_anonymous_args = 0
 3797              		.loc 14 928 5 is_stmt 0 view .LVU837
 3798 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 3799              		.save {r4, r5, r6, r7, r8, r9, r10, lr}
 3800              	.LCFI33:
 3801              		.cfi_def_cfa_offset 32
 3802              		.cfi_offset 4, -32
 3803              		.cfi_offset 5, -28
 3804              		.cfi_offset 6, -24
 3805              		.cfi_offset 7, -20
 3806              		.cfi_offset 8, -16
 3807              		.cfi_offset 9, -12
 3808              		.cfi_offset 10, -8
 3809              		.cfi_offset 14, -4
 3810              		.pad #8
 3811 0004 82B0     		sub	sp, sp, #8
 3812              	.LCFI34:
 3813              		.cfi_def_cfa_offset 40
 3814 0006 0646     		mov	r6, r0
 3815 0008 0191     		str	r1, [sp, #4]
 3816 000a 9046     		mov	r8, r2
 929:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
 930:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     {
 931:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const size_type __old_num_nodes
 932:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 3817              		.loc 14 932 28 view .LVU838
 3818 000c 426A     		ldr	r2, [r0, #36]
 3819              	.LVL265:
 3820              		.loc 14 932 61 view .LVU839
 3821 000e 4069     		ldr	r0, [r0, #20]
 3822              	.LVL266:
 3823              		.loc 14 932 36 view .LVU840
 3824 0010 171A     		subs	r7, r2, r0
 3825 0012 BD10     		asrs	r5, r7, #2
 3826              		.loc 14 932 69 view .LVU841
 3827 0014 0135     		adds	r5, r5, #1
 3828              	.LVL267:
 933:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
ARM GAS  /tmp/ccFECPfA.s 			page 280


 3829              		.loc 14 933 23 view .LVU842
 3830 0016 0D44     		add	r5, r5, r1
 3831              	.LVL268:
 3832              	.LBB2003:
 934:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 935:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _Map_pointer __new_nstart;
 936:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 3833              		.loc 14 936 25 view .LVU843
 3834 0018 7368     		ldr	r3, [r6, #4]
 3835              		.loc 14 936 7 view .LVU844
 3836 001a B3EB450F 		cmp	r3, r5, lsl #1
 3837 001e 22D9     		bls	.L138
 937:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 938:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 3838              		.loc 14 938 33 view .LVU845
 3839 0020 D6F800C0 		ldr	ip, [r6]
 939:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					 - __new_num_nodes) / 2
 3840              		.loc 14 939 7 view .LVU846
 3841 0024 5C1B     		subs	r4, r3, r5
 3842              		.loc 14 939 26 view .LVU847
 3843 0026 6408     		lsrs	r4, r4, #1
 938:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					 - __new_num_nodes) / 2
 3844              		.loc 14 938 40 view .LVU848
 3845 0028 A400     		lsls	r4, r4, #2
 940:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			 + (__add_at_front ? __nodes_to_add : 0);
 3846              		.loc 14 940 5 view .LVU849
 3847 002a B8F1000F 		cmp	r8, #0
 3848 002e 01D0     		beq	.L148
 3849              		.loc 14 940 5 discriminator 1 view .LVU850
 3850 0030 8900     		lsls	r1, r1, #2
 3851              	.LVL269:
 3852              		.loc 14 940 5 discriminator 1 view .LVU851
 3853 0032 00E0     		b	.L139
 3854              	.LVL270:
 3855              	.L148:
 3856              		.loc 14 940 5 view .LVU852
 3857 0034 0021     		movs	r1, #0
 3858              	.LVL271:
 3859              	.L139:
 3860              		.loc 14 940 5 discriminator 4 view .LVU853
 3861 0036 0C44     		add	r4, r4, r1
 938:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 					 - __new_num_nodes) / 2
 3862              		.loc 14 938 17 discriminator 4 view .LVU854
 3863 0038 6444     		add	r4, r4, ip
 3864              	.LVL272:
 941:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  if (__new_nstart < this->_M_impl._M_start._M_node)
 3865              		.loc 14 941 4 discriminator 4 view .LVU855
 3866 003a A042     		cmp	r0, r4
 3867 003c 08D9     		bls	.L140
 942:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    std::copy(this->_M_impl._M_start._M_node,
 3868              		.loc 14 942 15 view .LVU856
 3869 003e 131D     		adds	r3, r2, #4
 3870              	.LVL273:
 3871              	.LBB2004:
 3872              	.LBI2004:
 560:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 3873              		.loc 12 560 5 is_stmt 1 view .LVU857
ARM GAS  /tmp/ccFECPfA.s 			page 281


 3874              	.LBB2005:
 3875              	.LBB2006:
 3876              	.LBI2006:
 511:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 3877              		.loc 12 511 5 view .LVU858
 3878              	.LBB2007:
 3879              	.LBI2007:
 505:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 3880              		.loc 12 505 5 view .LVU859
 3881              	.LBB2008:
 3882              	.LBI2008:
 463:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 3883              		.loc 12 463 5 view .LVU860
 3884              	.LBB2009:
 3885              	.LBB2010:
 3886              	.LBI2010:
 415:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 3887              		.loc 12 415 2 view .LVU861
 3888              	.LBB2011:
 424:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 3889              		.loc 12 424 34 is_stmt 0 view .LVU862
 3890 0040 1A1A     		subs	r2, r3, r0
 3891              	.LVL274:
 425:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 3892              		.loc 12 425 4 view .LVU863
 3893 0042 9842     		cmp	r0, r3
 3894 0044 3BD0     		beq	.L142
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 3895              		.loc 12 426 23 view .LVU864
 3896 0046 0146     		mov	r1, r0
 3897 0048 2046     		mov	r0, r4
 3898              	.LVL275:
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 3899              		.loc 12 426 23 view .LVU865
 3900 004a FFF7FEFF 		bl	memmove
 3901              	.LVL276:
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 3902              		.loc 12 426 23 view .LVU866
 3903              	.LBE2011:
 3904              	.LBE2010:
 3905              	.LBE2009:
 3906              	.LBE2008:
 3907              	.LBE2007:
 3908              	.LBE2006:
 569:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 3909              		.loc 12 569 71 view .LVU867
 3910 004e 36E0     		b	.L142
 3911              	.LVL277:
 3912              	.L140:
 569:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 3913              		.loc 12 569 71 view .LVU868
 3914              	.LBE2005:
 3915              	.LBE2004:
 943:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		      this->_M_impl._M_finish._M_node + 1,
 944:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		      __new_nstart);
 945:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  else
 946:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    std::copy_backward(this->_M_impl._M_start._M_node,
ARM GAS  /tmp/ccFECPfA.s 			page 282


 3916              		.loc 14 946 24 view .LVU869
 3917 0050 131D     		adds	r3, r2, #4
 3918 0052 3A1D     		adds	r2, r7, #4
 3919 0054 A518     		adds	r5, r4, r2
 3920              	.LVL278:
 3921              	.LBB2012:
 3922              	.LBI2012:
 797:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 3923              		.loc 12 797 5 is_stmt 1 view .LVU870
 3924              	.LBB2013:
 3925              	.LBI2013:
 745:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 3926              		.loc 12 745 5 view .LVU871
 3927              	.LBB2014:
 3928              	.LBI2014:
 717:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 3929              		.loc 12 717 5 view .LVU872
 3930              	.LBB2015:
 3931              	.LBI2015:
 699:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 3932              		.loc 12 699 5 view .LVU873
 3933              	.LBB2016:
 3934              	.LBB2017:
 3935              	.LBI2017:
 680:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 3936              		.loc 12 680 2 view .LVU874
 3937              	.LBB2018:
 689:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 3938              		.loc 12 689 34 is_stmt 0 view .LVU875
 3939 0056 1A1A     		subs	r2, r3, r0
 3940              	.LVL279:
 690:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 3941              		.loc 12 690 4 view .LVU876
 3942 0058 9842     		cmp	r0, r3
 3943 005a 30D0     		beq	.L142
 691:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result - _Num;
 3944              		.loc 12 691 23 view .LVU877
 3945 005c 0146     		mov	r1, r0
 3946 005e A81A     		subs	r0, r5, r2
 3947              	.LVL280:
 691:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result - _Num;
 3948              		.loc 12 691 23 view .LVU878
 3949 0060 FFF7FEFF 		bl	memmove
 3950              	.LVL281:
 692:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 3951              		.loc 12 692 22 view .LVU879
 3952 0064 2BE0     		b	.L142
 3953              	.LVL282:
 3954              	.L138:
 692:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 3955              		.loc 12 692 22 view .LVU880
 3956              	.LBE2018:
 3957              	.LBE2017:
 3958              	.LBE2016:
 3959              	.LBE2015:
 3960              	.LBE2014:
 3961              	.LBE2013:
ARM GAS  /tmp/ccFECPfA.s 			page 283


 3962              	.LBE2012:
 3963              	.LBB2019:
 947:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       this->_M_impl._M_finish._M_node + 1,
 948:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			       __new_nstart + __old_num_nodes);
 949:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 950:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       else
 951:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	{
 952:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  size_type __new_map_size = this->_M_impl._M_map_size
 953:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     + std::max(this->_M_impl._M_map_size,
 3964              		.loc 14 953 35 view .LVU881
 3965 0066 321D     		adds	r2, r6, #4
 3966              	.LVL283:
 3967              	.LBB2020:
 3968              	.LBI2020:
 254:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 3969              		.loc 12 254 5 is_stmt 1 view .LVU882
 3970              	.LBB2021:
 259:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3971              		.loc 12 259 7 is_stmt 0 view .LVU883
 3972 0068 9942     		cmp	r1, r3
 3973 006a 38D8     		bhi	.L152
 3974              	.LVL284:
 3975              	.L144:
 259:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 3976              		.loc 12 259 7 view .LVU884
 3977              	.LBE2021:
 3978              	.LBE2020:
 3979              		.loc 14 953 10 view .LVU885
 3980 006c 1268     		ldr	r2, [r2]
 3981 006e 1344     		add	r3, r3, r2
 952:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     + std::max(this->_M_impl._M_map_size,
 3982              		.loc 14 952 14 view .LVU886
 3983 0070 03F10209 		add	r9, r3, #2
 3984              	.LVL285:
 3985              	.LBB2023:
 3986              	.LBI2023:
 570:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 3987              		.loc 13 570 7 is_stmt 1 view .LVU887
 3988              	.LBB2024:
 3989              	.LBB2025:
 3990              	.LBI2025:
 552:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 3991              		.loc 13 552 7 view .LVU888
 3992              	.LBB2026:
 3993              	.LBI2026:
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 3994              		.loc 9 177 2 view .LVU889
 3995              	.LBB2027:
 3996              	.LBI2027:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3997              		.loc 8 79 7 view .LVU890
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 3998              		.loc 8 79 7 is_stmt 0 view .LVU891
 3999              	.LBE2027:
 4000              	.LBE2026:
 4001              	.LBE2025:
 4002              	.LBB2028:
ARM GAS  /tmp/ccFECPfA.s 			page 284


 4003              	.LBI2028:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 4004              		.loc 7 459 7 is_stmt 1 view .LVU892
 4005              	.LBB2029:
 4006              	.LBI2029:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 4007              		.loc 8 103 7 view .LVU893
 4008              	.LBB2030:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 4009              		.loc 8 111 2 is_stmt 0 view .LVU894
 4010 0074 B9F1005F 		cmp	r9, #536870912
 4011 0078 33D2     		bcs	.L153
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 4012              		.loc 8 121 41 view .LVU895
 4013 007a 4FEA8900 		lsl	r0, r9, #2
 4014 007e FFF7FEFF 		bl	_Znwj
 4015              	.LVL286:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 4016              		.loc 8 121 41 view .LVU896
 4017 0082 8246     		mov	r10, r0
 4018              	.LVL287:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 4019              		.loc 8 121 41 view .LVU897
 4020              	.LBE2030:
 4021              	.LBE2029:
 4022              	.LBE2028:
 4023              	.LBB2033:
 4024              	.LBI2033:
 4025              		.loc 9 182 7 is_stmt 1 view .LVU898
 4026              	.LBB2034:
 4027              	.LBI2034:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4028              		.loc 8 89 7 view .LVU899
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4029              		.loc 8 89 7 is_stmt 0 view .LVU900
 4030              	.LBE2034:
 4031              	.LBE2033:
 4032              	.LBE2024:
 4033              	.LBE2023:
 954:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						__nodes_to_add) + 2;
 955:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 956:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 957:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 4034              		.loc 14 957 47 view .LVU901
 4035 0084 A9EB0504 		sub	r4, r9, r5
 4036              		.loc 14 957 66 view .LVU902
 4037 0088 6408     		lsrs	r4, r4, #1
 4038              		.loc 14 957 29 view .LVU903
 4039 008a A400     		lsls	r4, r4, #2
 958:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			 + (__add_at_front ? __nodes_to_add : 0);
 4040              		.loc 14 958 5 view .LVU904
 4041 008c B8F1000F 		cmp	r8, #0
 4042 0090 29D0     		beq	.L150
 4043              		.loc 14 958 5 discriminator 1 view .LVU905
 4044 0092 019D     		ldr	r5, [sp, #4]
 4045              	.LVL288:
 4046              		.loc 14 958 5 discriminator 1 view .LVU906
ARM GAS  /tmp/ccFECPfA.s 			page 285


 4047 0094 AD00     		lsls	r5, r5, #2
 4048              	.L146:
 4049              		.loc 14 958 5 discriminator 4 view .LVU907
 4050 0096 2C44     		add	r4, r4, r5
 957:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 			 + (__add_at_front ? __nodes_to_add : 0);
 4051              		.loc 14 957 17 discriminator 4 view .LVU908
 4052 0098 5444     		add	r4, r4, r10
 4053              	.LVL289:
 959:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 4054              		.loc 14 959 13 discriminator 4 view .LVU909
 4055 009a 7169     		ldr	r1, [r6, #20]
 960:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    this->_M_impl._M_finish._M_node + 1,
 4056              		.loc 14 960 31 discriminator 4 view .LVU910
 4057 009c 736A     		ldr	r3, [r6, #36]
 959:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 4058              		.loc 14 959 13 discriminator 4 view .LVU911
 4059 009e 0433     		adds	r3, r3, #4
 4060              	.LVL290:
 4061              	.LBB2037:
 4062              	.LBI2037:
 560:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 4063              		.loc 12 560 5 is_stmt 1 discriminator 4 view .LVU912
 4064              	.LBB2038:
 4065              	.LBI2038:
 511:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 4066              		.loc 12 511 5 discriminator 4 view .LVU913
 4067              	.LBB2039:
 4068              	.LBI2039:
 505:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 4069              		.loc 12 505 5 discriminator 4 view .LVU914
 4070              	.LBB2040:
 4071              	.LBI2040:
 463:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 4072              		.loc 12 463 5 discriminator 4 view .LVU915
 4073              	.LBB2041:
 4074              	.LBB2042:
 4075              	.LBI2042:
 415:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 4076              		.loc 12 415 2 discriminator 4 view .LVU916
 4077              	.LBB2043:
 424:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 4078              		.loc 12 424 34 is_stmt 0 discriminator 4 view .LVU917
 4079 00a0 5A1A     		subs	r2, r3, r1
 4080              	.LVL291:
 425:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 4081              		.loc 12 425 4 discriminator 4 view .LVU918
 4082 00a2 9942     		cmp	r1, r3
 4083 00a4 02D0     		beq	.L147
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 4084              		.loc 12 426 23 view .LVU919
 4085 00a6 2046     		mov	r0, r4
 4086              	.LVL292:
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 4087              		.loc 12 426 23 view .LVU920
 4088 00a8 FFF7FEFF 		bl	memmove
 4089              	.LVL293:
 4090              	.L147:
ARM GAS  /tmp/ccFECPfA.s 			page 286


 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 4091              		.loc 12 426 23 view .LVU921
 4092              	.LBE2043:
 4093              	.LBE2042:
 4094              	.LBE2041:
 4095              	.LBE2040:
 4096              	.LBE2039:
 4097              	.LBE2038:
 4098              	.LBE2037:
 961:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 		    __new_nstart);
 962:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 4099              		.loc 14 962 21 view .LVU922
 4100 00ac 7168     		ldr	r1, [r6, #4]
 4101              	.LVL294:
 4102              	.LBB2044:
 4103              	.LBI2044:
 577:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 4104              		.loc 13 577 7 is_stmt 1 view .LVU923
 4105              	.LBB2045:
 4106              	.LBB2046:
 4107              	.LBI2046:
 552:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return _Map_alloc_type(_M_get_Tp_allocator()); }
 4108              		.loc 13 552 7 view .LVU924
 4109              	.LBB2047:
 4110              	.LBI2047:
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 4111              		.loc 9 177 2 view .LVU925
 4112              	.LBB2048:
 4113              	.LBI2048:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4114              		.loc 8 79 7 view .LVU926
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4115              		.loc 8 79 7 is_stmt 0 view .LVU927
 4116              	.LBE2048:
 4117              	.LBE2047:
 4118              	.LBE2046:
 4119              	.LBB2049:
 4120              	.LBI2049:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 4121              		.loc 7 491 7 is_stmt 1 view .LVU928
 4122              	.LBB2050:
 4123              	.LBI2050:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 4124              		.loc 8 126 7 view .LVU929
 4125              	.LBB2051:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 4126              		.loc 8 139 19 is_stmt 0 view .LVU930
 4127 00ae 8900     		lsls	r1, r1, #2
 4128              	.LVL295:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 4129              		.loc 8 139 19 view .LVU931
 4130 00b0 3068     		ldr	r0, [r6]
 4131 00b2 FFF7FEFF 		bl	_ZdlPvj
 4132              	.LVL296:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 4133              		.loc 8 139 19 view .LVU932
 4134              	.LBE2051:
ARM GAS  /tmp/ccFECPfA.s 			page 287


 4135              	.LBE2050:
 4136              	.LBE2049:
 4137              	.LBB2052:
 4138              	.LBI2052:
 4139              		.loc 9 182 7 is_stmt 1 view .LVU933
 4140              	.LBB2053:
 4141              	.LBI2053:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4142              		.loc 8 89 7 view .LVU934
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4143              		.loc 8 89 7 is_stmt 0 view .LVU935
 4144              	.LBE2053:
 4145              	.LBE2052:
 4146              	.LBE2045:
 4147              	.LBE2044:
 963:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 964:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  this->_M_impl._M_map = __new_map;
 4148              		.loc 14 964 25 view .LVU936
 4149 00b6 C6F800A0 		str	r10, [r6]
 965:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  this->_M_impl._M_map_size = __new_map_size;
 4150              		.loc 14 965 30 view .LVU937
 4151 00ba C6F80490 		str	r9, [r6, #4]
 4152              	.LVL297:
 4153              	.L142:
 4154              		.loc 14 965 30 view .LVU938
 4155              	.LBE2019:
 4156              	.LBE2003:
 4157              	.LBB2057:
 4158              	.LBI2057:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 4159              		.loc 13 260 7 is_stmt 1 view .LVU939
 4160              	.LBB2058:
 262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_first = *__new_node;
 4161              		.loc 13 262 10 is_stmt 0 view .LVU940
 4162 00be 7461     		str	r4, [r6, #20]
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 4163              		.loc 13 263 11 view .LVU941
 4164 00c0 2368     		ldr	r3, [r4]
 4165 00c2 F360     		str	r3, [r6, #12]
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4166              		.loc 13 264 21 view .LVU942
 4167 00c4 03F5FC73 		add	r3, r3, #504
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4168              		.loc 13 264 10 view .LVU943
 4169 00c8 3361     		str	r3, [r6, #16]
 4170              	.LVL298:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4171              		.loc 13 264 10 view .LVU944
 4172              	.LBE2058:
 4173              	.LBE2057:
 966:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	}
 967:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 968:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       this->_M_impl._M_start._M_set_node(__new_nstart);
 969:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 4174              		.loc 14 969 42 view .LVU945
 4175 00ca E319     		adds	r3, r4, r7
 4176              	.LVL299:
ARM GAS  /tmp/ccFECPfA.s 			page 288


 4177              	.LBB2059:
 4178              	.LBI2059:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 4179              		.loc 13 260 7 is_stmt 1 view .LVU946
 4180              	.LBB2060:
 262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_first = *__new_node;
 4181              		.loc 13 262 10 is_stmt 0 view .LVU947
 4182 00cc 7362     		str	r3, [r6, #36]
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 4183              		.loc 13 263 11 view .LVU948
 4184 00ce E359     		ldr	r3, [r4, r7]
 4185              	.LVL300:
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 4186              		.loc 13 263 11 view .LVU949
 4187 00d0 F361     		str	r3, [r6, #28]
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4188              		.loc 13 264 21 view .LVU950
 4189 00d2 03F5FC73 		add	r3, r3, #504
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4190              		.loc 13 264 10 view .LVU951
 4191 00d6 3362     		str	r3, [r6, #32]
 4192              	.LVL301:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4193              		.loc 13 264 10 view .LVU952
 4194              	.LBE2060:
 4195              	.LBE2059:
 970:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****     }
 4196              		.loc 14 970 5 view .LVU953
 4197 00d8 02B0     		add	sp, sp, #8
 4198              	.LCFI35:
 4199              		.cfi_remember_state
 4200              		.cfi_def_cfa_offset 32
 4201              		@ sp needed
 4202 00da BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4203              	.LVL302:
 4204              	.L152:
 4205              	.LCFI36:
 4206              		.cfi_restore_state
 4207              	.LBB2061:
 4208              	.LBB2056:
 4209              	.LBB2054:
 4210              	.LBB2022:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 4211              		.loc 12 260 9 view .LVU954
 4212 00de 01AA     		add	r2, sp, #4
 4213              	.LVL303:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 4214              		.loc 12 260 9 view .LVU955
 4215 00e0 C4E7     		b	.L144
 4216              	.LVL304:
 4217              	.L153:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 4218              		.loc 12 260 9 view .LVU956
 4219              	.LBE2022:
 4220              	.LBE2054:
 4221              	.LBB2055:
 4222              	.LBB2036:
ARM GAS  /tmp/ccFECPfA.s 			page 289


 4223              	.LBB2035:
 4224              	.LBB2032:
 4225              	.LBB2031:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4226              		.loc 8 112 26 view .LVU957
 4227 00e2 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 4228              	.LVL305:
 4229              	.L150:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4230              		.loc 8 112 26 view .LVU958
 4231              	.LBE2031:
 4232              	.LBE2032:
 4233              	.LBE2035:
 4234              	.LBE2036:
 4235              	.LBE2055:
 958:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 4236              		.loc 14 958 5 view .LVU959
 4237 00e6 0025     		movs	r5, #0
 4238              	.LVL306:
 958:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  std::copy(this->_M_impl._M_start._M_node,
 4239              		.loc 14 958 5 view .LVU960
 4240 00e8 D5E7     		b	.L146
 4241              	.LBE2056:
 4242              	.LBE2061:
 4243              		.cfi_endproc
 4244              	.LFE2383:
 4245              		.fnend
 4247              		.section	.rodata._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push
 4248              		.align	2
 4249              	.LC5:
 4250 0000 63616E6E 		.ascii	"cannot create std::deque larger than max_size()\000"
 4250      6F742063 
 4250      72656174 
 4250      65207374 
 4250      643A3A64 
 4251              		.section	.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_b
 4252              		.align	1
 4253              		.weak	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJ
 4254              		.syntax unified
 4255              		.thumb
 4256              		.thumb_func
 4257              		.fpu fpv4-sp-d16
 4259              	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEv
 4260              		.fnstart
 4261              	.LVL307:
 4262              	.LFB2287:
 481:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_push_back_aux(_Args&&... __args)
 4263              		.loc 14 481 7 is_stmt 1 view -0
 4264              		.cfi_startproc
 4265              		@ args = 0, pretend = 0, frame = 0
 4266              		@ frame_needed = 0, uses_anonymous_args = 0
 481:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       _M_push_back_aux(_Args&&... __args)
 4267              		.loc 14 481 7 is_stmt 0 view .LVU962
 4268 0000 70B5     		push	{r4, r5, r6, lr}
 4269              		.save {r4, r5, r6, lr}
 4270              	.LCFI37:
 4271              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccFECPfA.s 			page 290


 4272              		.cfi_offset 4, -16
 4273              		.cfi_offset 5, -12
 4274              		.cfi_offset 6, -8
 4275              		.cfi_offset 14, -4
 4276 0002 0446     		mov	r4, r0
 4277 0004 0D46     		mov	r5, r1
 4278              	.LVL308:
 4279              	.LBB2115:
 4280              	.LBI2115:
1230:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 4281              		.loc 13 1230 7 is_stmt 1 view .LVU963
 4282              	.LBB2116:
 4283              	.LBB2117:
 4284              	.LBI2117:
 353:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 4285              		.loc 13 353 7 view .LVU964
 4286              	.LBB2118:
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4287              		.loc 13 356 11 is_stmt 0 view .LVU965
 4288 0006 436A     		ldr	r3, [r0, #36]
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4289              		.loc 13 356 25 view .LVU966
 4290 0008 4269     		ldr	r2, [r0, #20]
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4291              		.loc 13 356 19 view .LVU967
 4292 000a 9B1A     		subs	r3, r3, r2
 4293 000c 9B10     		asrs	r3, r3, #2
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4294              		.loc 13 356 33 view .LVU968
 4295 000e 013B     		subs	r3, r3, #1
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4296              		.loc 13 356 4 view .LVU969
 4297 0010 03EB4303 		add	r3, r3, r3, lsl #1
 4298 0014 C3EBC303 		rsb	r3, r3, r3, lsl #3
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4299              		.loc 13 356 45 view .LVU970
 4300 0018 8269     		ldr	r2, [r0, #24]
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4301              		.loc 13 356 58 view .LVU971
 4302 001a C169     		ldr	r1, [r0, #28]
 4303              	.LVL309:
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4304              		.loc 13 356 52 view .LVU972
 4305 001c 521A     		subs	r2, r2, r1
 4306 001e D210     		asrs	r2, r2, #3
 4307 0020 2549     		ldr	r1, .L163
 356:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  + (__y._M_last - __y._M_cur);
 4308              		.loc 13 356 38 view .LVU973
 4309 0022 01FB0233 		mla	r3, r1, r2, r3
 357:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4310              		.loc 13 357 11 view .LVU974
 4311 0026 0269     		ldr	r2, [r0, #16]
 357:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4312              		.loc 13 357 25 view .LVU975
 4313 0028 8068     		ldr	r0, [r0, #8]
 4314              	.LVL310:
 357:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
ARM GAS  /tmp/ccFECPfA.s 			page 291


 4315              		.loc 13 357 19 view .LVU976
 4316 002a 121A     		subs	r2, r2, r0
 4317 002c D210     		asrs	r2, r2, #3
 357:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4318              		.loc 13 357 31 view .LVU977
 4319 002e 01FB0233 		mla	r3, r1, r2, r3
 4320              	.LVL311:
 357:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4321              		.loc 13 357 31 view .LVU978
 4322              	.LBE2118:
 4323              	.LBE2117:
 4324              	.LBE2116:
 4325              	.LBE2115:
 489:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  __throw_length_error(
 4326              		.loc 14 489 2 view .LVU979
 4327 0032 224A     		ldr	r2, .L163+4
 4328 0034 9342     		cmp	r3, r2
 4329 0036 29D0     		beq	.L160
 4330              	.LVL312:
 4331              	.LBB2119:
 4332              	.LBI2119:
2047:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
2048:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2049:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Called by erase(q1, q2).
2050:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2051:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_erase_at_begin(iterator __pos)
2052:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
2053:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_destroy_data(begin(), __pos, _M_get_Tp_allocator());
2054:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_destroy_nodes(this->_M_impl._M_start._M_node, __pos._M_node);
2055:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	this->_M_impl._M_start = __pos;
2056:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
2057:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2058:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
2059:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // _M_fill_assign, operator=.
2060:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2061:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_erase_at_end(iterator __pos)
2062:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
2063:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_destroy_data(__pos, end(), _M_get_Tp_allocator());
2064:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_destroy_nodes(__pos._M_node + 1,
2065:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 			 this->_M_impl._M_finish._M_node + 1);
2066:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	this->_M_impl._M_finish = __pos;
2067:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
2068:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2069:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
2070:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_erase(iterator __pos);
2071:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2072:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
2073:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_erase(iterator __first, iterator __last);
2074:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2075:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #if __cplusplus >= 201103L
2076:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       // Called by resize(sz).
2077:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2078:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_default_append(size_type __n);
2079:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2080:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       bool
2081:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_shrink_to_fit();
2082:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** #endif
ARM GAS  /tmp/ccFECPfA.s 			page 292


2083:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2084:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ///@{
2085:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /// Memory-handling helpers for the previous internal insert functions.
2086:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
2087:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_reserve_elements_at_front(size_type __n)
2088:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
2089:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const size_type __vacancies = this->_M_impl._M_start._M_cur
2090:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				      - this->_M_impl._M_start._M_first;
2091:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__n > __vacancies)
2092:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_new_elements_at_front(__n - __vacancies);
2093:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return this->_M_impl._M_start - difference_type(__n);
2094:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
2095:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2096:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       iterator
2097:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_reserve_elements_at_back(size_type __n)
2098:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
2099:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	const size_type __vacancies = (this->_M_impl._M_finish._M_last
2100:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 				       - this->_M_impl._M_finish._M_cur) - 1;
2101:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__n > __vacancies)
2102:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_new_elements_at_back(__n - __vacancies);
2103:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	return this->_M_impl._M_finish + difference_type(__n);
2104:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
2105:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2106:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2107:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_new_elements_at_front(size_type __new_elements);
2108:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2109:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2110:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_new_elements_at_back(size_type __new_elements);
2111:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ///@}
2112:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2113:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
2114:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       ///@{
2115:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       /**
2116:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  @brief Memory-handling helpers for the major %map.
2117:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *
2118:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  Makes sure the _M_map has space for new nodes.  Does not
2119:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  actually add the nodes.  Can invalidate _M_map pointers.
2120:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        *  (And consequently, %deque iterators.)
2121:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****        */
2122:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       void
2123:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 4333              		.loc 13 2123 7 is_stmt 1 view .LVU980
 4334              	.LBB2120:
2124:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
2125:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 4335              		.loc 13 2125 41 is_stmt 0 view .LVU981
 4336 0038 6368     		ldr	r3, [r4, #4]
2126:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 4337              		.loc 13 2126 33 view .LVU982
 4338 003a 626A     		ldr	r2, [r4, #36]
 4339              		.loc 13 2126 57 view .LVU983
 4340 003c 2168     		ldr	r1, [r4]
 4341              		.loc 13 2126 41 view .LVU984
 4342 003e 521A     		subs	r2, r2, r1
 4343              		.loc 13 2126 6 view .LVU985
 4344 0040 A3EBA203 		sub	r3, r3, r2, asr #2
2125:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
ARM GAS  /tmp/ccFECPfA.s 			page 293


 4345              		.loc 13 2125 2 view .LVU986
 4346 0044 012B     		cmp	r3, #1
 4347 0046 24D9     		bls	.L161
 4348              	.L156:
 4349              	.LVL313:
2125:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 4350              		.loc 13 2125 2 view .LVU987
 4351              	.LBE2120:
 4352              	.LBE2119:
 494:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__try
 4353              		.loc 14 494 28 view .LVU988
 4354 0048 666A     		ldr	r6, [r4, #36]
 4355              	.LVL314:
 4356              	.LBB2122:
 4357              	.LBI2122:
 556:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 4358              		.loc 13 556 7 is_stmt 1 view .LVU989
 4359              	.LBB2123:
 4360              	.LBB2124:
 4361              	.LBI2124:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 4362              		.loc 7 459 7 view .LVU990
 4363              	.LBB2125:
 4364              	.LBI2125:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 4365              		.loc 8 103 7 view .LVU991
 4366              	.LBB2126:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 4367              		.loc 8 121 41 is_stmt 0 view .LVU992
 4368 004a 4FF4FC70 		mov	r0, #504
 4369 004e FFF7FEFF 		bl	_Znwj
 4370              	.LVL315:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 4371              		.loc 8 121 41 view .LVU993
 4372              	.LBE2126:
 4373              	.LBE2125:
 4374              	.LBE2124:
 4375              	.LBE2123:
 4376              	.LBE2122:
 494:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	__try
 4377              		.loc 14 494 41 view .LVU994
 4378 0052 7060     		str	r0, [r6, #4]
 498:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 				     this->_M_impl._M_finish._M_cur,
 4379              		.loc 14 498 30 view .LVU995
 4380 0054 A369     		ldr	r3, [r4, #24]
 4381              	.LVL316:
 4382              	.LBB2127:
 4383              	.LBI2127:
 507:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  _Args&&... __args)
 4384              		.loc 7 507 2 is_stmt 1 view .LVU996
 4385              	.LBB2128:
 4386              	.LBI2128:
 154:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 4387              		.loc 8 154 2 view .LVU997
 154:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 4388              		.loc 8 154 2 is_stmt 0 view .LVU998
 4389              	.LBE2128:
ARM GAS  /tmp/ccFECPfA.s 			page 294


 4390              	.LBE2127:
 4391              		.file 19 "/usr/include/newlib/c++/10.3.1/new"
   1:/usr/include/newlib/c++/10.3.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/newlib/c++/10.3.1/new **** 
   3:/usr/include/newlib/c++/10.3.1/new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/new **** 
   5:/usr/include/newlib/c++/10.3.1/new **** // This file is part of GCC.
   6:/usr/include/newlib/c++/10.3.1/new **** //
   7:/usr/include/newlib/c++/10.3.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/newlib/c++/10.3.1/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/newlib/c++/10.3.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/newlib/c++/10.3.1/new **** // any later version.
  11:/usr/include/newlib/c++/10.3.1/new **** // 
  12:/usr/include/newlib/c++/10.3.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/newlib/c++/10.3.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/newlib/c++/10.3.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/newlib/c++/10.3.1/new **** // GNU General Public License for more details.
  16:/usr/include/newlib/c++/10.3.1/new **** // 
  17:/usr/include/newlib/c++/10.3.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/newlib/c++/10.3.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/newlib/c++/10.3.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/newlib/c++/10.3.1/new **** 
  21:/usr/include/newlib/c++/10.3.1/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/newlib/c++/10.3.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/newlib/c++/10.3.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/newlib/c++/10.3.1/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/newlib/c++/10.3.1/new **** 
  26:/usr/include/newlib/c++/10.3.1/new **** /** @file new
  27:/usr/include/newlib/c++/10.3.1/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/newlib/c++/10.3.1/new ****  *
  29:/usr/include/newlib/c++/10.3.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/newlib/c++/10.3.1/new ****  *  handling memory allocation errors; see
  31:/usr/include/newlib/c++/10.3.1/new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:/usr/include/newlib/c++/10.3.1/new ****  *  for more.
  33:/usr/include/newlib/c++/10.3.1/new ****  */
  34:/usr/include/newlib/c++/10.3.1/new **** 
  35:/usr/include/newlib/c++/10.3.1/new **** #ifndef _NEW
  36:/usr/include/newlib/c++/10.3.1/new **** #define _NEW
  37:/usr/include/newlib/c++/10.3.1/new **** 
  38:/usr/include/newlib/c++/10.3.1/new **** #pragma GCC system_header
  39:/usr/include/newlib/c++/10.3.1/new **** 
  40:/usr/include/newlib/c++/10.3.1/new **** #include <bits/c++config.h>
  41:/usr/include/newlib/c++/10.3.1/new **** #include <exception>
  42:/usr/include/newlib/c++/10.3.1/new **** 
  43:/usr/include/newlib/c++/10.3.1/new **** #pragma GCC visibility push(default)
  44:/usr/include/newlib/c++/10.3.1/new **** 
  45:/usr/include/newlib/c++/10.3.1/new **** extern "C++" {
  46:/usr/include/newlib/c++/10.3.1/new **** 
  47:/usr/include/newlib/c++/10.3.1/new **** namespace std 
  48:/usr/include/newlib/c++/10.3.1/new **** {
  49:/usr/include/newlib/c++/10.3.1/new ****   /**
  50:/usr/include/newlib/c++/10.3.1/new ****    *  @brief  Exception possibly thrown by @c new.
  51:/usr/include/newlib/c++/10.3.1/new ****    *  @ingroup exceptions
  52:/usr/include/newlib/c++/10.3.1/new ****    *
  53:/usr/include/newlib/c++/10.3.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:/usr/include/newlib/c++/10.3.1/new ****    *  errors from the throwing forms of @c new.  */
  55:/usr/include/newlib/c++/10.3.1/new ****   class bad_alloc : public exception 
ARM GAS  /tmp/ccFECPfA.s 			page 295


  56:/usr/include/newlib/c++/10.3.1/new ****   {
  57:/usr/include/newlib/c++/10.3.1/new ****   public:
  58:/usr/include/newlib/c++/10.3.1/new ****     bad_alloc() throw() { }
  59:/usr/include/newlib/c++/10.3.1/new **** 
  60:/usr/include/newlib/c++/10.3.1/new **** #if __cplusplus >= 201103L
  61:/usr/include/newlib/c++/10.3.1/new ****     bad_alloc(const bad_alloc&) = default;
  62:/usr/include/newlib/c++/10.3.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:/usr/include/newlib/c++/10.3.1/new **** #endif
  64:/usr/include/newlib/c++/10.3.1/new **** 
  65:/usr/include/newlib/c++/10.3.1/new ****     // This declaration is not useless:
  66:/usr/include/newlib/c++/10.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:/usr/include/newlib/c++/10.3.1/new ****     virtual ~bad_alloc() throw();
  68:/usr/include/newlib/c++/10.3.1/new **** 
  69:/usr/include/newlib/c++/10.3.1/new ****     // See comment in eh_exception.cc.
  70:/usr/include/newlib/c++/10.3.1/new ****     virtual const char* what() const throw();
  71:/usr/include/newlib/c++/10.3.1/new ****   };
  72:/usr/include/newlib/c++/10.3.1/new **** 
  73:/usr/include/newlib/c++/10.3.1/new **** #if __cplusplus >= 201103L
  74:/usr/include/newlib/c++/10.3.1/new ****   class bad_array_new_length : public bad_alloc
  75:/usr/include/newlib/c++/10.3.1/new ****   {
  76:/usr/include/newlib/c++/10.3.1/new ****   public:
  77:/usr/include/newlib/c++/10.3.1/new ****     bad_array_new_length() throw() { }
  78:/usr/include/newlib/c++/10.3.1/new **** 
  79:/usr/include/newlib/c++/10.3.1/new ****     // This declaration is not useless:
  80:/usr/include/newlib/c++/10.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:/usr/include/newlib/c++/10.3.1/new ****     virtual ~bad_array_new_length() throw();
  82:/usr/include/newlib/c++/10.3.1/new **** 
  83:/usr/include/newlib/c++/10.3.1/new ****     // See comment in eh_exception.cc.
  84:/usr/include/newlib/c++/10.3.1/new ****     virtual const char* what() const throw();
  85:/usr/include/newlib/c++/10.3.1/new ****   };
  86:/usr/include/newlib/c++/10.3.1/new **** #endif
  87:/usr/include/newlib/c++/10.3.1/new **** 
  88:/usr/include/newlib/c++/10.3.1/new **** #if __cpp_aligned_new
  89:/usr/include/newlib/c++/10.3.1/new ****   enum class align_val_t: size_t {};
  90:/usr/include/newlib/c++/10.3.1/new **** #endif
  91:/usr/include/newlib/c++/10.3.1/new **** 
  92:/usr/include/newlib/c++/10.3.1/new ****   struct nothrow_t
  93:/usr/include/newlib/c++/10.3.1/new ****   {
  94:/usr/include/newlib/c++/10.3.1/new **** #if __cplusplus >= 201103L
  95:/usr/include/newlib/c++/10.3.1/new ****     explicit nothrow_t() = default;
  96:/usr/include/newlib/c++/10.3.1/new **** #endif
  97:/usr/include/newlib/c++/10.3.1/new ****   };
  98:/usr/include/newlib/c++/10.3.1/new **** 
  99:/usr/include/newlib/c++/10.3.1/new ****   extern const nothrow_t nothrow;
 100:/usr/include/newlib/c++/10.3.1/new **** 
 101:/usr/include/newlib/c++/10.3.1/new ****   /** If you write your own error handler to be called by @c new, it must
 102:/usr/include/newlib/c++/10.3.1/new ****    *  be of this type.  */
 103:/usr/include/newlib/c++/10.3.1/new ****   typedef void (*new_handler)();
 104:/usr/include/newlib/c++/10.3.1/new **** 
 105:/usr/include/newlib/c++/10.3.1/new ****   /// Takes a replacement handler as the argument, returns the
 106:/usr/include/newlib/c++/10.3.1/new ****   /// previous handler.
 107:/usr/include/newlib/c++/10.3.1/new ****   new_handler set_new_handler(new_handler) throw();
 108:/usr/include/newlib/c++/10.3.1/new **** 
 109:/usr/include/newlib/c++/10.3.1/new **** #if __cplusplus >= 201103L
 110:/usr/include/newlib/c++/10.3.1/new ****   /// Return the current new handler.
 111:/usr/include/newlib/c++/10.3.1/new ****   new_handler get_new_handler() noexcept;
 112:/usr/include/newlib/c++/10.3.1/new **** #endif
ARM GAS  /tmp/ccFECPfA.s 			page 296


 113:/usr/include/newlib/c++/10.3.1/new **** } // namespace std
 114:/usr/include/newlib/c++/10.3.1/new **** 
 115:/usr/include/newlib/c++/10.3.1/new **** //@{
 116:/usr/include/newlib/c++/10.3.1/new **** /** These are replaceable signatures:
 117:/usr/include/newlib/c++/10.3.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:/usr/include/newlib/c++/10.3.1/new ****  *  - normal array new and delete (same)
 119:/usr/include/newlib/c++/10.3.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:/usr/include/newlib/c++/10.3.1/new ****  *    @c NULL on error)
 121:/usr/include/newlib/c++/10.3.1/new ****  *  - @c nothrow array new and delete (same)
 122:/usr/include/newlib/c++/10.3.1/new ****  *
 123:/usr/include/newlib/c++/10.3.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 124:/usr/include/newlib/c++/10.3.1/new ****  *  does nothing) may not be replaced by a user's program.
 125:/usr/include/newlib/c++/10.3.1/new **** */
 126:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 128:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 130:/usr/include/newlib/c++/10.3.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 132:/usr/include/newlib/c++/10.3.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 134:/usr/include/newlib/c++/10.3.1/new **** #if __cpp_sized_deallocation
 135:/usr/include/newlib/c++/10.3.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 137:/usr/include/newlib/c++/10.3.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 139:/usr/include/newlib/c++/10.3.1/new **** #endif
 140:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 142:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 144:/usr/include/newlib/c++/10.3.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 146:/usr/include/newlib/c++/10.3.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 148:/usr/include/newlib/c++/10.3.1/new **** #if __cpp_aligned_new
 149:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 151:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:/usr/include/newlib/c++/10.3.1/new **** void operator delete(void*, std::align_val_t)
 154:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:/usr/include/newlib/c++/10.3.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:/usr/include/newlib/c++/10.3.1/new ****   __attribute__((__externally_visible__));
 159:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:/usr/include/newlib/c++/10.3.1/new **** void operator delete[](void*, std::align_val_t)
 162:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:/usr/include/newlib/c++/10.3.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:/usr/include/newlib/c++/10.3.1/new **** #if __cpp_sized_deallocation
 166:/usr/include/newlib/c++/10.3.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:/usr/include/newlib/c++/10.3.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:/usr/include/newlib/c++/10.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
ARM GAS  /tmp/ccFECPfA.s 			page 297


 170:/usr/include/newlib/c++/10.3.1/new **** #endif // __cpp_sized_deallocation
 171:/usr/include/newlib/c++/10.3.1/new **** #endif // __cpp_aligned_new
 172:/usr/include/newlib/c++/10.3.1/new **** 
 173:/usr/include/newlib/c++/10.3.1/new **** // Default placement versions of operator new.
 174:/usr/include/newlib/c++/10.3.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:/usr/include/newlib/c++/10.3.1/new **** { return __p; }
 4392              		.loc 19 175 3 is_stmt 1 view .LVU999
 4393              	.LBB2167:
 4394              	.LBB2165:
 4395              	.LBB2129:
 4396              	.LBI2129:
 565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 4397              		.loc 4 565 7 view .LVU1000
 4398              	.LBB2130:
 4399              	.LBB2131:
 4400              	.LBI2131:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4401              		.loc 4 198 7 view .LVU1001
 4402              	.LBB2132:
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 4403              		.loc 4 201 51 is_stmt 0 view .LVU1002
 4404 0056 03F10800 		add	r0, r3, #8
 4405              	.LVL317:
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 4406              		.loc 4 201 51 view .LVU1003
 4407              	.LBE2132:
 4408              	.LBE2131:
 4409              	.LBB2133:
 4410              	.LBI2133:
 294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 4411              		.loc 4 294 7 is_stmt 1 view .LVU1004
 294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 4412              		.loc 4 294 7 is_stmt 0 view .LVU1005
 4413              	.LBE2133:
 4414              	.LBB2134:
 4415              	.LBI2134:
 4416              		.loc 18 101 5 is_stmt 1 view .LVU1006
 4417              		.loc 18 101 5 is_stmt 0 view .LVU1007
 4418              	.LBE2134:
 4419              	.LBB2135:
 4420              	.LBI2135:
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 4421              		.loc 4 167 2 is_stmt 1 view .LVU1008
 4422              	.LBB2136:
 4423              	.LBB2137:
 4424              	.LBI2137:
 4425              		.loc 18 101 5 view .LVU1009
 4426              		.loc 18 101 5 is_stmt 0 view .LVU1010
 4427              	.LBE2137:
 4428              	.LBB2138:
 4429              	.LBI2138:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 4430              		.loc 9 167 7 is_stmt 1 view .LVU1011
 4431              	.LBB2139:
 4432              	.LBI2139:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4433              		.loc 8 82 7 view .LVU1012
ARM GAS  /tmp/ccFECPfA.s 			page 298


  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4434              		.loc 8 82 7 is_stmt 0 view .LVU1013
 4435              	.LBE2139:
 4436              	.LBE2138:
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 4437              		.loc 4 168 46 view .LVU1014
 4438 005a 1860     		str	r0, [r3]
 4439              	.LVL318:
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 4440              		.loc 4 168 46 view .LVU1015
 4441              	.LBE2136:
 4442              	.LBE2135:
 4443              	.LBB2140:
 4444              	.LBI2140:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4445              		.loc 4 229 7 is_stmt 1 view .LVU1016
 4446              	.LBB2141:
 4447              	.LBI2141:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4448              		.loc 4 194 7 view .LVU1017
 4449              	.LBB2142:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4450              		.loc 4 195 28 is_stmt 0 view .LVU1018
 4451 005c 2A46     		mov	r2, r5
 4452 005e 52F8081B 		ldr	r1, [r2], #8
 4453              	.LVL319:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4454              		.loc 4 195 28 view .LVU1019
 4455              	.LBE2142:
 4456              	.LBE2141:
 4457              	.LBB2143:
 4458              	.LBI2143:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4459              		.loc 4 208 7 is_stmt 1 view .LVU1020
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4460              		.loc 4 208 7 is_stmt 0 view .LVU1021
 4461              	.LBE2143:
 4462              	.LBE2140:
 568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 4463              		.loc 4 568 2 view .LVU1022
 4464 0062 9142     		cmp	r1, r2
 4465 0064 1BD0     		beq	.L162
 4466              	.LVL320:
 4467              	.LBB2144:
 4468              	.LBI2144:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4469              		.loc 4 194 7 is_stmt 1 view .LVU1023
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4470              		.loc 4 194 7 is_stmt 0 view .LVU1024
 4471              	.LBE2144:
 4472              	.LBB2145:
 4473              	.LBI2145:
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4474              		.loc 4 186 7 is_stmt 1 view .LVU1025
 4475              	.LBB2146:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4476              		.loc 4 187 26 is_stmt 0 view .LVU1026
ARM GAS  /tmp/ccFECPfA.s 			page 299


 4477 0066 1960     		str	r1, [r3]
 4478              	.LVL321:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4479              		.loc 4 187 26 view .LVU1027
 4480              	.LBE2146:
 4481              	.LBE2145:
 576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 4482              		.loc 4 576 17 view .LVU1028
 4483 0068 A968     		ldr	r1, [r5, #8]
 4484              	.LVL322:
 4485              	.LBB2147:
 4486              	.LBI2147:
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4487              		.loc 4 218 7 is_stmt 1 view .LVU1029
 4488              	.LBB2148:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4489              		.loc 4 219 31 is_stmt 0 view .LVU1030
 4490 006a 9960     		str	r1, [r3, #8]
 4491              	.LVL323:
 4492              	.L158:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4493              		.loc 4 219 31 view .LVU1031
 4494              	.LBE2148:
 4495              	.LBE2147:
 4496              	.LBB2149:
 4497              	.LBI2149:
 920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4498              		.loc 4 920 7 is_stmt 1 view .LVU1032
 4499              	.LBB2150:
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4500              		.loc 4 921 16 is_stmt 0 view .LVU1033
 4501 006c 6968     		ldr	r1, [r5, #4]
 4502              	.LVL324:
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4503              		.loc 4 921 16 view .LVU1034
 4504              	.LBE2150:
 4505              	.LBE2149:
 4506              	.LBB2151:
 4507              	.LBI2151:
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4508              		.loc 4 190 7 is_stmt 1 view .LVU1035
 4509              	.LBB2152:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4510              		.loc 4 191 26 is_stmt 0 view .LVU1036
 4511 006e 5960     		str	r1, [r3, #4]
 4512              	.LVL325:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4513              		.loc 4 191 26 view .LVU1037
 4514              	.LBE2152:
 4515              	.LBE2151:
 4516              	.LBB2153:
 4517              	.LBI2153:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4518              		.loc 4 198 7 is_stmt 1 view .LVU1038
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4519              		.loc 4 198 7 is_stmt 0 view .LVU1039
 4520              	.LBE2153:
ARM GAS  /tmp/ccFECPfA.s 			page 300


 4521              	.LBB2154:
 4522              	.LBI2154:
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4523              		.loc 4 186 7 is_stmt 1 view .LVU1040
 4524              	.LBB2155:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4525              		.loc 4 187 26 is_stmt 0 view .LVU1041
 4526 0070 2A60     		str	r2, [r5]
 4527              	.LVL326:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4528              		.loc 4 187 26 view .LVU1042
 4529              	.LBE2155:
 4530              	.LBE2154:
 4531              	.LBB2156:
 4532              	.LBI2156:
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4533              		.loc 4 222 7 is_stmt 1 view .LVU1043
 4534              	.LBB2157:
 4535              	.LBI2157:
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4536              		.loc 4 190 7 view .LVU1044
 4537              	.LBB2158:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4538              		.loc 4 191 26 is_stmt 0 view .LVU1045
 4539 0072 0023     		movs	r3, #0
 4540              	.LVL327:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4541              		.loc 4 191 26 view .LVU1046
 4542 0074 6B60     		str	r3, [r5, #4]
 4543              	.LVL328:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4544              		.loc 4 191 26 view .LVU1047
 4545              	.LBE2158:
 4546              	.LBE2157:
 4547              	.LBB2159:
 4548              	.LBI2159:
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4549              		.loc 5 328 7 is_stmt 1 view .LVU1048
 4550              	.LBB2160:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 4551              		.loc 5 329 9 view .LVU1049
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 4552              		.loc 5 329 14 is_stmt 0 view .LVU1050
 4553 0076 2B72     		strb	r3, [r5, #8]
 4554              	.LVL329:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 4555              		.loc 5 329 14 view .LVU1051
 4556              	.LBE2160:
 4557              	.LBE2159:
 4558              	.LBE2156:
 4559              	.LBE2130:
 4560              	.LBE2129:
 4561              	.LBE2165:
 4562              	.LBE2167:
 504:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						+ 1);
 4563              		.loc 14 504 66 view .LVU1052
 4564 0078 636A     		ldr	r3, [r4, #36]
ARM GAS  /tmp/ccFECPfA.s 			page 301


 504:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 						+ 1);
 4565              		.loc 14 504 41 view .LVU1053
 4566 007a 1A1D     		adds	r2, r3, #4
 4567              	.LVL330:
 4568              	.LBB2168:
 4569              	.LBI2168:
 260:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       {
 4570              		.loc 13 260 7 is_stmt 1 view .LVU1054
 4571              	.LBB2169:
 262:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_first = *__new_node;
 4572              		.loc 13 262 10 is_stmt 0 view .LVU1055
 4573 007c 6262     		str	r2, [r4, #36]
 263:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	_M_last = _M_first + difference_type(_S_buffer_size());
 4574              		.loc 13 263 11 view .LVU1056
 4575 007e 5B68     		ldr	r3, [r3, #4]
 4576 0080 E361     		str	r3, [r4, #28]
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4577              		.loc 13 264 21 view .LVU1057
 4578 0082 03F5FC72 		add	r2, r3, #504
 4579              	.LVL331:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4580              		.loc 13 264 10 view .LVU1058
 4581 0086 2262     		str	r2, [r4, #32]
 4582              	.LVL332:
 264:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       }
 4583              		.loc 13 264 10 view .LVU1059
 4584              	.LBE2169:
 4585              	.LBE2168:
 506:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 4586              		.loc 14 506 37 view .LVU1060
 4587 0088 A361     		str	r3, [r4, #24]
 513:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 
 4588              		.loc 14 513 7 view .LVU1061
 4589 008a 70BD     		pop	{r4, r5, r6, pc}
 4590              	.LVL333:
 4591              	.L160:
 490:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	      __N("cannot create std::deque larger than max_size()"));
 4592              		.loc 14 490 24 view .LVU1062
 4593 008c 0C48     		ldr	r0, .L163+8
 4594 008e FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 4595              	.LVL334:
 4596              	.L161:
 4597              	.LBB2170:
 4598              	.LBB2121:
2127:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 	  _M_reallocate_map(__nodes_to_add, false);
 4599              		.loc 13 2127 21 view .LVU1063
 4600 0092 0022     		movs	r2, #0
 4601 0094 0121     		movs	r1, #1
 4602 0096 2046     		mov	r0, r4
 4603 0098 FFF7FEFF 		bl	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb
 4604              	.LVL335:
 4605 009c D4E7     		b	.L156
 4606              	.LVL336:
 4607              	.L162:
 4608              		.loc 13 2127 21 view .LVU1064
 4609              	.LBE2121:
 4610              	.LBE2170:
ARM GAS  /tmp/ccFECPfA.s 			page 302


 4611              	.LBB2171:
 4612              	.LBB2166:
 4613              	.LBB2164:
 4614              	.LBB2163:
 4615              	.LBB2161:
 4616              	.LBI2161:
 401:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 4617              		.loc 5 401 7 is_stmt 1 view .LVU1065
 4618              	.LBB2162:
 403:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 4619              		.loc 5 403 2 view .LVU1066
 4620              		.loc 5 409 2 view .LVU1067
 4621              		.loc 5 409 49 is_stmt 0 view .LVU1068
 4622 009e D5F808E0 		ldr	lr, [r5, #8]	@ unaligned
 4623 00a2 D2F804C0 		ldr	ip, [r2, #4]	@ unaligned
 4624 00a6 9668     		ldr	r6, [r2, #8]	@ unaligned
 4625 00a8 D168     		ldr	r1, [r2, #12]	@ unaligned
 4626 00aa C3F808E0 		str	lr, [r3, #8]	@ unaligned
 4627 00ae C3F80CC0 		str	ip, [r3, #12]	@ unaligned
 4628 00b2 1E61     		str	r6, [r3, #16]	@ unaligned
 4629 00b4 5961     		str	r1, [r3, #20]	@ unaligned
 4630 00b6 D9E7     		b	.L158
 4631              	.L164:
 4632              		.align	2
 4633              	.L163:
 4634 00b8 ABAAAAAA 		.word	-1431655765
 4635 00bc 55555505 		.word	89478485
 4636 00c0 00000000 		.word	.LC5
 4637              	.LBE2162:
 4638              	.LBE2161:
 4639              	.LBE2163:
 4640              	.LBE2164:
 4641              	.LBE2166:
 4642              	.LBE2171:
 4643              		.cfi_endproc
 4644              	.LFE2287:
 4645              		.fnend
 4647              		.section	.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_b
 4648              		.align	1
 4649              		.weak	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_E
 4650              		.syntax unified
 4651              		.thumb
 4652              		.thumb_func
 4653              		.fpu fpv4-sp-d16
 4655              	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT
 4656              		.fnstart
 4657              	.LVL337:
 4658              	.LFB2216:
 164:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       emplace_back(_Args&&... __args)
 4659              		.loc 14 164 7 is_stmt 1 view -0
 4660              		.cfi_startproc
 4661              		@ args = 0, pretend = 0, frame = 0
 4662              		@ frame_needed = 0, uses_anonymous_args = 0
 164:/usr/include/newlib/c++/10.3.1/bits/deque.tcc ****       emplace_back(_Args&&... __args)
 4663              		.loc 14 164 7 is_stmt 0 view .LVU1070
 4664 0000 70B5     		push	{r4, r5, r6, lr}
 4665              		.save {r4, r5, r6, lr}
ARM GAS  /tmp/ccFECPfA.s 			page 303


 4666              	.LCFI38:
 4667              		.cfi_def_cfa_offset 16
 4668              		.cfi_offset 4, -16
 4669              		.cfi_offset 5, -12
 4670              		.cfi_offset 6, -8
 4671              		.cfi_offset 14, -4
 167:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    != this->_M_impl._M_finish._M_last - 1)
 4672              		.loc 14 167 30 view .LVU1071
 4673 0002 8369     		ldr	r3, [r0, #24]
 168:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 4674              		.loc 14 168 33 view .LVU1072
 4675 0004 026A     		ldr	r2, [r0, #32]
 168:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  {
 4676              		.loc 14 168 41 view .LVU1073
 4677 0006 183A     		subs	r2, r2, #24
 167:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	    != this->_M_impl._M_finish._M_last - 1)
 4678              		.loc 14 167 2 view .LVU1074
 4679 0008 9342     		cmp	r3, r2
 4680 000a 21D0     		beq	.L166
 4681              	.LVL338:
 4682              	.LBB2212:
 4683              	.LBI2212:
 507:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  _Args&&... __args)
 4684              		.loc 7 507 2 is_stmt 1 view .LVU1075
 4685              	.LBB2213:
 4686              	.LBI2213:
 154:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 4687              		.loc 8 154 2 view .LVU1076
 154:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 4688              		.loc 8 154 2 is_stmt 0 view .LVU1077
 4689              	.LBE2213:
 4690              	.LBE2212:
 4691              		.loc 19 175 3 is_stmt 1 view .LVU1078
 4692              	.LBB2252:
 4693              	.LBB2250:
 4694              	.LBB2214:
 4695              	.LBI2214:
 565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 4696              		.loc 4 565 7 view .LVU1079
 4697              	.LBB2215:
 4698              	.LBB2216:
 4699              	.LBI2216:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4700              		.loc 4 198 7 view .LVU1080
 4701              	.LBB2217:
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 4702              		.loc 4 201 51 is_stmt 0 view .LVU1081
 4703 000c 03F10805 		add	r5, r3, #8
 4704              	.LVL339:
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 4705              		.loc 4 201 51 view .LVU1082
 4706              	.LBE2217:
 4707              	.LBE2216:
 4708              	.LBB2218:
 4709              	.LBI2218:
 294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 4710              		.loc 4 294 7 is_stmt 1 view .LVU1083
ARM GAS  /tmp/ccFECPfA.s 			page 304


 294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 4711              		.loc 4 294 7 is_stmt 0 view .LVU1084
 4712              	.LBE2218:
 4713              	.LBB2219:
 4714              	.LBI2219:
 4715              		.loc 18 101 5 is_stmt 1 view .LVU1085
 4716              		.loc 18 101 5 is_stmt 0 view .LVU1086
 4717              	.LBE2219:
 4718              	.LBB2220:
 4719              	.LBI2220:
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 4720              		.loc 4 167 2 is_stmt 1 view .LVU1087
 4721              	.LBB2221:
 4722              	.LBB2222:
 4723              	.LBI2222:
 4724              		.loc 18 101 5 view .LVU1088
 4725              		.loc 18 101 5 is_stmt 0 view .LVU1089
 4726              	.LBE2222:
 4727              	.LBB2223:
 4728              	.LBI2223:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 4729              		.loc 9 167 7 is_stmt 1 view .LVU1090
 4730              	.LBB2224:
 4731              	.LBI2224:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4732              		.loc 8 82 7 view .LVU1091
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4733              		.loc 8 82 7 is_stmt 0 view .LVU1092
 4734              	.LBE2224:
 4735              	.LBE2223:
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 4736              		.loc 4 168 46 view .LVU1093
 4737 0010 1D60     		str	r5, [r3]
 4738              	.LVL340:
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 4739              		.loc 4 168 46 view .LVU1094
 4740              	.LBE2221:
 4741              	.LBE2220:
 4742              	.LBB2225:
 4743              	.LBI2225:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 4744              		.loc 4 229 7 is_stmt 1 view .LVU1095
 4745              	.LBB2226:
 4746              	.LBI2226:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4747              		.loc 4 194 7 view .LVU1096
 4748              	.LBB2227:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4749              		.loc 4 195 28 is_stmt 0 view .LVU1097
 4750 0012 0A46     		mov	r2, r1
 4751 0014 52F8084B 		ldr	r4, [r2], #8
 4752              	.LVL341:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4753              		.loc 4 195 28 view .LVU1098
 4754              	.LBE2227:
 4755              	.LBE2226:
 4756              	.LBB2228:
ARM GAS  /tmp/ccFECPfA.s 			page 305


 4757              	.LBI2228:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4758              		.loc 4 208 7 is_stmt 1 view .LVU1099
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4759              		.loc 4 208 7 is_stmt 0 view .LVU1100
 4760              	.LBE2228:
 4761              	.LBE2225:
 568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 4762              		.loc 4 568 2 view .LVU1101
 4763 0018 9442     		cmp	r4, r2
 4764 001a 0CD0     		beq	.L171
 4765              	.LVL342:
 4766              	.LBB2229:
 4767              	.LBI2229:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4768              		.loc 4 194 7 is_stmt 1 view .LVU1102
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 4769              		.loc 4 194 7 is_stmt 0 view .LVU1103
 4770              	.LBE2229:
 4771              	.LBB2230:
 4772              	.LBI2230:
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4773              		.loc 4 186 7 is_stmt 1 view .LVU1104
 4774              	.LBB2231:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4775              		.loc 4 187 26 is_stmt 0 view .LVU1105
 4776 001c 1C60     		str	r4, [r3]
 4777              	.LVL343:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4778              		.loc 4 187 26 view .LVU1106
 4779              	.LBE2231:
 4780              	.LBE2230:
 576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 4781              		.loc 4 576 17 view .LVU1107
 4782 001e 8C68     		ldr	r4, [r1, #8]
 4783              	.LVL344:
 4784              	.LBB2232:
 4785              	.LBI2232:
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 4786              		.loc 4 218 7 is_stmt 1 view .LVU1108
 4787              	.LBB2233:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4788              		.loc 4 219 31 is_stmt 0 view .LVU1109
 4789 0020 9C60     		str	r4, [r3, #8]
 4790              	.LVL345:
 4791              	.L168:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4792              		.loc 4 219 31 view .LVU1110
 4793              	.LBE2233:
 4794              	.LBE2232:
 4795              	.LBB2234:
 4796              	.LBI2234:
 920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 4797              		.loc 4 920 7 is_stmt 1 view .LVU1111
 4798              	.LBB2235:
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4799              		.loc 4 921 16 is_stmt 0 view .LVU1112
ARM GAS  /tmp/ccFECPfA.s 			page 306


 4800 0022 4C68     		ldr	r4, [r1, #4]
 4801              	.LVL346:
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4802              		.loc 4 921 16 view .LVU1113
 4803              	.LBE2235:
 4804              	.LBE2234:
 4805              	.LBB2236:
 4806              	.LBI2236:
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4807              		.loc 4 190 7 is_stmt 1 view .LVU1114
 4808              	.LBB2237:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4809              		.loc 4 191 26 is_stmt 0 view .LVU1115
 4810 0024 5C60     		str	r4, [r3, #4]
 4811              	.LVL347:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4812              		.loc 4 191 26 view .LVU1116
 4813              	.LBE2237:
 4814              	.LBE2236:
 4815              	.LBB2238:
 4816              	.LBI2238:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4817              		.loc 4 198 7 is_stmt 1 view .LVU1117
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4818              		.loc 4 198 7 is_stmt 0 view .LVU1118
 4819              	.LBE2238:
 4820              	.LBB2239:
 4821              	.LBI2239:
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 4822              		.loc 4 186 7 is_stmt 1 view .LVU1119
 4823              	.LBB2240:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4824              		.loc 4 187 26 is_stmt 0 view .LVU1120
 4825 0026 0A60     		str	r2, [r1]
 4826              	.LVL348:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4827              		.loc 4 187 26 view .LVU1121
 4828              	.LBE2240:
 4829              	.LBE2239:
 4830              	.LBB2241:
 4831              	.LBI2241:
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4832              		.loc 4 222 7 is_stmt 1 view .LVU1122
 4833              	.LBB2242:
 4834              	.LBI2242:
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 4835              		.loc 4 190 7 view .LVU1123
 4836              	.LBB2243:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4837              		.loc 4 191 26 is_stmt 0 view .LVU1124
 4838 0028 0023     		movs	r3, #0
 4839              	.LVL349:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4840              		.loc 4 191 26 view .LVU1125
 4841 002a 4B60     		str	r3, [r1, #4]
 4842              	.LVL350:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccFECPfA.s 			page 307


 4843              		.loc 4 191 26 view .LVU1126
 4844              	.LBE2243:
 4845              	.LBE2242:
 4846              	.LBB2244:
 4847              	.LBI2244:
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 4848              		.loc 5 328 7 is_stmt 1 view .LVU1127
 4849              	.LBB2245:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 4850              		.loc 5 329 9 view .LVU1128
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 4851              		.loc 5 329 14 is_stmt 0 view .LVU1129
 4852 002c 0B72     		strb	r3, [r1, #8]
 4853              	.LVL351:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 4854              		.loc 5 329 14 view .LVU1130
 4855              	.LBE2245:
 4856              	.LBE2244:
 4857              	.LBE2241:
 4858              	.LBE2215:
 4859              	.LBE2214:
 4860              	.LBE2250:
 4861              	.LBE2252:
 173:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 4862              		.loc 14 173 32 view .LVU1131
 4863 002e 8369     		ldr	r3, [r0, #24]
 173:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** 	  }
 4864              		.loc 14 173 6 view .LVU1132
 4865 0030 1833     		adds	r3, r3, #24
 4866 0032 8361     		str	r3, [r0, #24]
 4867              	.LVL352:
 4868              	.L165:
 180:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 4869              		.loc 14 180 7 view .LVU1133
 4870 0034 70BD     		pop	{r4, r5, r6, pc}
 4871              	.LVL353:
 4872              	.L171:
 4873              	.LBB2253:
 4874              	.LBB2251:
 4875              	.LBB2249:
 4876              	.LBB2248:
 4877              	.LBB2246:
 4878              	.LBI2246:
 401:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 4879              		.loc 5 401 7 is_stmt 1 view .LVU1134
 4880              	.LBB2247:
 403:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 4881              		.loc 5 403 2 view .LVU1135
 4882              		.loc 5 409 2 view .LVU1136
 4883              		.loc 5 409 49 is_stmt 0 view .LVU1137
 4884 0036 8E68     		ldr	r6, [r1, #8]	@ unaligned
 4885 0038 D2F804E0 		ldr	lr, [r2, #4]	@ unaligned
 4886 003c D2F808C0 		ldr	ip, [r2, #8]	@ unaligned
 4887 0040 D468     		ldr	r4, [r2, #12]	@ unaligned
 4888 0042 9E60     		str	r6, [r3, #8]	@ unaligned
 4889 0044 C3F80CE0 		str	lr, [r3, #12]	@ unaligned
 4890 0048 C3F810C0 		str	ip, [r3, #16]	@ unaligned
ARM GAS  /tmp/ccFECPfA.s 			page 308


 4891 004c 5C61     		str	r4, [r3, #20]	@ unaligned
 4892 004e E8E7     		b	.L168
 4893              	.LVL354:
 4894              	.L166:
 4895              		.loc 5 409 49 view .LVU1138
 4896              	.LBE2247:
 4897              	.LBE2246:
 4898              	.LBE2248:
 4899              	.LBE2249:
 4900              	.LBE2251:
 4901              	.LBE2253:
 176:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #if __cplusplus > 201402L
 4902              		.loc 14 176 20 view .LVU1139
 4903 0050 FFF7FEFF 		bl	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_
 4904              	.LVL355:
 180:/usr/include/newlib/c++/10.3.1/bits/deque.tcc **** #endif
 4905              		.loc 14 180 7 view .LVU1140
 4906 0054 EEE7     		b	.L165
 4907              		.cfi_endproc
 4908              	.LFE2216:
 4909              		.fnend
 4911              		.section	.text._ZN5WioE56sendATEPKc,"ax",%progbits
 4912              		.align	1
 4913              		.global	_ZN5WioE56sendATEPKc
 4914              		.syntax unified
 4915              		.thumb
 4916              		.thumb_func
 4917              		.fpu fpv4-sp-d16
 4919              	_ZN5WioE56sendATEPKc:
 4920              		.fnstart
 4921              	.LVL356:
 4922              	.LFB1763:
  75:App/Src/WioE5.cpp ****     // コマンドをキューに追加
 4923              		.loc 1 75 1 is_stmt 1 view -0
 4924              		.cfi_startproc
 4925              		@ args = 0, pretend = 0, frame = 24
 4926              		@ frame_needed = 0, uses_anonymous_args = 0
  75:App/Src/WioE5.cpp ****     // コマンドをキューに追加
 4927              		.loc 1 75 1 is_stmt 0 view .LVU1142
 4928 0000 10B5     		push	{r4, lr}
 4929              		.save {r4, lr}
 4930              	.LCFI39:
 4931              		.cfi_def_cfa_offset 8
 4932              		.cfi_offset 4, -8
 4933              		.cfi_offset 14, -4
 4934              		.pad #24
 4935 0002 86B0     		sub	sp, sp, #24
 4936              	.LCFI40:
 4937              		.cfi_def_cfa_offset 32
  77:App/Src/WioE5.cpp **** }
 4938              		.loc 1 77 5 is_stmt 1 view .LVU1143
 4939              	.LVL357:
 4940              	.LBB2303:
 4941              	.LBI2303:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 4942              		.loc 9 164 7 view .LVU1144
 4943              	.LBB2304:
ARM GAS  /tmp/ccFECPfA.s 			page 309


 4944              	.LBI2304:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4945              		.loc 8 79 7 view .LVU1145
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4946              		.loc 8 79 7 is_stmt 0 view .LVU1146
 4947              	.LBE2304:
 4948              	.LBE2303:
 4949              	.LBB2305:
 4950              	.LBI2305:
 533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 4951              		.loc 4 533 7 is_stmt 1 view .LVU1147
 4952              	.LBB2306:
 4953              	.LBB2307:
 4954              	.LBI2307:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4955              		.loc 4 198 7 view .LVU1148
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 4956              		.loc 4 198 7 is_stmt 0 view .LVU1149
 4957              	.LBE2307:
 4958              	.LBB2308:
 4959              	.LBI2308:
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 4960              		.loc 4 164 2 is_stmt 1 view .LVU1150
 4961              	.LBB2309:
 4962              	.LBB2310:
 4963              	.LBB2311:
 4964              	.LBI2311:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 4965              		.loc 9 167 7 view .LVU1151
 4966              	.LBB2312:
 4967              	.LBI2312:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4968              		.loc 8 82 7 view .LVU1152
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 4969              		.loc 8 82 7 is_stmt 0 view .LVU1153
 4970              	.LBE2312:
 4971              	.LBE2311:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4972              		.loc 4 165 35 view .LVU1154
 4973 0004 02AB     		add	r3, sp, #8
 4974              	.LVL358:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4975              		.loc 4 165 35 view .LVU1155
 4976 0006 0093     		str	r3, [sp]
 4977              	.LVL359:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 4978              		.loc 4 165 35 view .LVU1156
 4979              	.LBE2310:
 4980              	.LBE2309:
 4981              	.LBE2308:
 4982              	.LBB2313:
 536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  // We just need a non-null pointer here to get an exception:
 4983              		.loc 4 536 28 view .LVU1157
 4984 0008 0C46     		mov	r4, r1
 4985 000a 71B1     		cbz	r1, .L176
 4986              	.LVL360:
 4987              	.LBB2314:
ARM GAS  /tmp/ccFECPfA.s 			page 310


 4988              	.LBI2314:
 365:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 4989              		.loc 5 365 7 is_stmt 1 view .LVU1158
 4990              	.LBB2315:
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 4991              		.loc 5 371 2 view .LVU1159
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 4992              		.loc 5 371 25 is_stmt 0 view .LVU1160
 4993 000c 0846     		mov	r0, r1
 4994              	.LVL361:
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 4995              		.loc 5 371 25 view .LVU1161
 4996 000e FFF7FEFF 		bl	strlen
 4997              	.LVL362:
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 4998              		.loc 5 371 25 view .LVU1162
 4999              	.LBE2315:
 5000              	.LBE2314:
 536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  // We just need a non-null pointer here to get an exception:
 5001              		.loc 4 536 28 view .LVU1163
 5002 0012 2218     		adds	r2, r4, r0
 5003              	.L173:
 5004              	.LVL363:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 5005              		.loc 4 539 14 view .LVU1164
 5006 0014 4FF00003 		mov	r3, #0
 5007 0018 2146     		mov	r1, r4
 5008 001a 6846     		mov	r0, sp
 5009              	.LEHB17:
 5010 001c FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 5011              	.LVL364:
 5012              	.LEHE17:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 5013              		.loc 4 539 14 view .LVU1165
 5014              	.LBE2313:
 5015              	.LBE2306:
 5016              	.LBE2305:
 5017              	.LBB2318:
 5018              	.LBI2318:
 270:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h ****       { c.push_back(std::move(__x)); }
 5019              		.loc 15 270 7 is_stmt 1 view .LVU1166
 5020              	.LBB2319:
 5021              	.LBB2320:
 5022              	.LBI2320:
1508:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h ****       { emplace_back(std::move(__x)); }
 5023              		.loc 13 1508 7 view .LVU1167
 5024              	.LBB2321:
1509:/usr/include/newlib/c++/10.3.1/bits/stl_deque.h **** 
 5025              		.loc 13 1509 21 is_stmt 0 view .LVU1168
 5026 0020 6946     		mov	r1, sp
 5027 0022 0A48     		ldr	r0, .L180
 5028              	.LEHB18:
 5029 0024 FFF7FEFF 		bl	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEv
 5030              	.LVL365:
 5031              	.LEHE18:
 5032              	.LBE2321:
 5033              	.LBE2320:
ARM GAS  /tmp/ccFECPfA.s 			page 311


 271:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 5034              		.loc 15 271 38 view .LVU1169
 5035 0028 01E0     		b	.L179
 5036              	.LVL366:
 5037              	.L176:
 271:/usr/include/newlib/c++/10.3.1/bits/stl_queue.h **** 
 5038              		.loc 15 271 38 view .LVU1170
 5039              	.LBE2319:
 5040              	.LBE2318:
 5041              	.LBB2322:
 5042              	.LBB2317:
 5043              	.LBB2316:
 536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  // We just need a non-null pointer here to get an exception:
 5044              		.loc 4 536 28 view .LVU1171
 5045 002a 0122     		movs	r2, #1
 5046 002c F2E7     		b	.L173
 5047              	.LVL367:
 5048              	.L179:
 536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  // We just need a non-null pointer here to get an exception:
 5049              		.loc 4 536 28 view .LVU1172
 5050              	.LBE2316:
 5051              	.LBE2317:
 5052              	.LBE2322:
 5053              	.LBB2323:
 5054              	.LBI2323:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 5055              		.loc 4 670 7 is_stmt 1 view .LVU1173
 5056              	.LBB2324:
 5057              	.LBB2325:
 5058              	.LBI2325:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 5059              		.loc 4 237 7 view .LVU1174
 5060              	.LBB2326:
 5061              	.LBB2327:
 5062              	.LBI2327:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 5063              		.loc 4 229 7 view .LVU1175
 5064              	.LBB2328:
 5065              	.LBI2328:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 5066              		.loc 4 194 7 view .LVU1176
 5067              	.LBB2329:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 5068              		.loc 4 195 28 is_stmt 0 view .LVU1177
 5069 002e 0098     		ldr	r0, [sp]
 5070              	.LVL368:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 5071              		.loc 4 195 28 view .LVU1178
 5072              	.LBE2329:
 5073              	.LBE2328:
 5074              	.LBB2330:
 5075              	.LBI2330:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 5076              		.loc 4 208 7 is_stmt 1 view .LVU1179
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 5077              		.loc 4 208 7 is_stmt 0 view .LVU1180
 5078              	.LBE2330:
ARM GAS  /tmp/ccFECPfA.s 			page 312


 5079              	.LBE2327:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 5080              		.loc 4 239 2 view .LVU1181
 5081 0030 02AB     		add	r3, sp, #8
 5082 0032 9842     		cmp	r0, r3
 5083 0034 03D0     		beq	.L172
 5084              	.LVL369:
 5085              	.LBB2331:
 5086              	.LBI2331:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 5087              		.loc 4 244 7 is_stmt 1 view .LVU1182
 5088              	.LBB2332:
 5089              	.LBB2333:
 5090              	.LBI2333:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 5091              		.loc 7 491 7 view .LVU1183
 5092              	.LBB2334:
 5093              	.LBI2334:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 5094              		.loc 8 126 7 view .LVU1184
 5095              	.LBB2335:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 5096              		.loc 8 139 19 is_stmt 0 view .LVU1185
 5097 0036 0299     		ldr	r1, [sp, #8]
 5098 0038 0131     		adds	r1, r1, #1
 5099              	.LVL370:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 5100              		.loc 8 139 19 view .LVU1186
 5101 003a FFF7FEFF 		bl	_ZdlPvj
 5102              	.LVL371:
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_sized_deallocation
 5103              		.loc 8 139 19 view .LVU1187
 5104              	.LBE2335:
 5105              	.LBE2334:
 5106              	.LBE2333:
 5107              	.LBE2332:
 5108              	.LBE2331:
 5109              	.LBE2326:
 5110              	.LBE2325:
 5111              	.LBB2336:
 5112              	.LBI2336:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 5113              		.loc 4 158 14 is_stmt 1 view .LVU1188
 5114              	.LBB2337:
 5115              	.LBB2338:
 5116              	.LBI2338:
 5117              		.loc 9 182 7 view .LVU1189
 5118              	.LBB2339:
 5119              	.LBI2339:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 5120              		.loc 8 89 7 view .LVU1190
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 5121              		.loc 8 89 7 is_stmt 0 view .LVU1191
 5122              	.LBE2339:
 5123              	.LBE2338:
 5124              	.LBE2337:
 5125              	.LBE2336:
ARM GAS  /tmp/ccFECPfA.s 			page 313


 5126              	.LBE2324:
 5127              	.LBE2323:
 5128              	.LBB2340:
 5129              	.LBI2340:
 5130              		.loc 9 182 7 is_stmt 1 view .LVU1192
 5131              	.LBB2341:
 5132              	.LBI2341:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 5133              		.loc 8 89 7 view .LVU1193
 5134              	.L172:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 5135              		.loc 8 89 7 is_stmt 0 view .LVU1194
 5136              	.LBE2341:
 5137              	.LBE2340:
 5138              		.loc 1 78 1 view .LVU1195
 5139 003e 06B0     		add	sp, sp, #24
 5140              	.LCFI41:
 5141              		.cfi_remember_state
 5142              		.cfi_def_cfa_offset 8
 5143              		@ sp needed
 5144 0040 10BD     		pop	{r4, pc}
 5145              	.LVL372:
 5146              	.L177:
 5147              	.LCFI42:
 5148              		.cfi_restore_state
 5149              	.LBB2342:
 5150              	.LBI2342:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 5151              		.loc 4 670 7 is_stmt 1 view .LVU1196
 5152              	.LBB2343:
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 5153              		.loc 4 671 19 is_stmt 0 view .LVU1197
 5154 0042 6846     		mov	r0, sp
 5155 0044 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 5156              	.LVL373:
 5157              	.LBB2344:
 5158              	.LBI2344:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 5159              		.loc 4 158 14 is_stmt 1 view .LVU1198
 5160              	.LBB2345:
 5161              	.LBB2346:
 5162              	.LBI2346:
 5163              		.loc 9 182 7 view .LVU1199
 5164              	.LBB2347:
 5165              	.LBI2347:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 5166              		.loc 8 89 7 view .LVU1200
 5167              	.LEHB19:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 5168              		.loc 8 89 7 is_stmt 0 view .LVU1201
 5169 0048 FFF7FEFF 		bl	__cxa_end_cleanup
 5170              	.LVL374:
 5171              	.LEHE19:
 5172              	.L181:
 5173              		.align	2
 5174              	.L180:
 5175 004c 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccFECPfA.s 			page 314


 5176              	.LBE2347:
 5177              	.LBE2346:
 5178              	.LBE2345:
 5179              	.LBE2344:
 5180              	.LBE2343:
 5181              	.LBE2342:
 5182              		.cfi_endproc
 5183              	.LFE1763:
 5184              		.personality	__gxx_personality_v0
 5185              		.handlerdata
 5186              	.LLSDA1763:
 5187 0008 FF       		.byte	0xff
 5188 0009 FF       		.byte	0xff
 5189 000a 01       		.byte	0x1
 5190 000b 0C       		.uleb128 .LLSDACSE1763-.LLSDACSB1763
 5191              	.LLSDACSB1763:
 5192 000c 1C       		.uleb128 .LEHB17-.LFB1763
 5193 000d 04       		.uleb128 .LEHE17-.LEHB17
 5194 000e 00       		.uleb128 0
 5195 000f 00       		.uleb128 0
 5196 0010 24       		.uleb128 .LEHB18-.LFB1763
 5197 0011 04       		.uleb128 .LEHE18-.LEHB18
 5198 0012 42       		.uleb128 .L177-.LFB1763
 5199 0013 00       		.uleb128 0
 5200 0014 48       		.uleb128 .LEHB19-.LFB1763
 5201 0015 04       		.uleb128 .LEHE19-.LEHB19
 5202 0016 00       		.uleb128 0
 5203 0017 00       		.uleb128 0
 5204              	.LLSDACSE1763:
 5205              		.section	.text._ZN5WioE56sendATEPKc
 5206              		.fnend
 5208              		.section	.text._GLOBAL__sub_I_rx_byte,"ax",%progbits
 5209              		.align	1
 5210              		.syntax unified
 5211              		.thumb
 5212              		.thumb_func
 5213              		.fpu fpv4-sp-d16
 5215              	_GLOBAL__sub_I_rx_byte:
 5216              		.fnstart
 5217              	.LFB2425:
 5218              		.loc 1 78 1 is_stmt 1 view -0
 5219              		.cfi_startproc
 5220              		@ args = 0, pretend = 0, frame = 0
 5221              		@ frame_needed = 0, uses_anonymous_args = 0
 5222 0000 08B5     		push	{r3, lr}
 5223              	.LCFI43:
 5224              		.cfi_def_cfa_offset 8
 5225              		.cfi_offset 3, -8
 5226              		.cfi_offset 14, -4
 5227              		.loc 1 78 1 is_stmt 0 view .LVU1203
 5228 0002 4FF6FF71 		movw	r1, #65535
 5229 0006 0120     		movs	r0, #1
 5230 0008 FFF7FEFF 		bl	_Z41__static_initialization_and_destruction_0ii
 5231              	.LVL375:
 5232 000c 08BD     		pop	{r3, pc}
 5233              		.cfi_endproc
 5234              	.LFE2425:
ARM GAS  /tmp/ccFECPfA.s 			page 315


 5235              		.cantunwind
 5236              		.fnend
 5238              		.section	.init_array,"aw",%init_array
 5239              		.align	2
 5240 0000 00000000 		.word	_GLOBAL__sub_I_rx_byte(target1)
 5241              		.global	atBusy
 5242              		.global	_Z10atCmdQueueB5cxx11
 5243              		.global	rxReady
 5244              		.global	rxIndex
 5245              		.global	rxBuffer
 5246              		.global	rx_byte
 5247              		.section	.bss._Z10atCmdQueueB5cxx11,"aw",%nobits
 5248              		.align	2
 5249              		.set	.LANCHOR4,. + 0
 5252              	_Z10atCmdQueueB5cxx11:
 5253 0000 00000000 		.space	40
 5253      00000000 
 5253      00000000 
 5253      00000000 
 5253      00000000 
 5254              		.section	.bss.atBusy,"aw",%nobits
 5255              		.set	.LANCHOR5,. + 0
 5258              	atBusy:
 5259 0000 00       		.space	1
 5260              		.section	.bss.rxBuffer,"aw",%nobits
 5261              		.align	2
 5262              		.set	.LANCHOR2,. + 0
 5265              	rxBuffer:
 5266 0000 00000000 		.space	1024
 5266      00000000 
 5266      00000000 
 5266      00000000 
 5266      00000000 
 5267              		.section	.bss.rxIndex,"aw",%nobits
 5268              		.align	1
 5269              		.set	.LANCHOR1,. + 0
 5272              	rxIndex:
 5273 0000 0000     		.space	2
 5274              		.section	.bss.rxReady,"aw",%nobits
 5275              		.set	.LANCHOR3,. + 0
 5278              	rxReady:
 5279 0000 00       		.space	1
 5280              		.section	.bss.rx_byte,"aw",%nobits
 5281              		.set	.LANCHOR0,. + 0
 5284              	rx_byte:
 5285 0000 00       		.space	1
 5286              		.text
 5287              	.Letext0:
 5288              		.file 20 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 5289              		.file 21 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 5290              		.file 22 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 5291              		.file 23 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 5292              		.file 24 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 5293              		.file 25 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 5294              		.file 26 "/usr/include/newlib/c++/10.3.1/type_traits"
 5295              		.file 27 "/usr/include/newlib/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h"
 5296              		.file 28 "/usr/include/newlib/c++/10.3.1/bits/stl_pair.h"
ARM GAS  /tmp/ccFECPfA.s 			page 316


 5297              		.file 29 "/usr/include/newlib/c++/10.3.1/bits/cpp_type_traits.h"
 5298              		.file 30 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_types.h"
 5299              		.file 31 "/usr/include/newlib/c++/10.3.1/debug/debug.h"
 5300              		.file 32 "/usr/include/newlib/c++/10.3.1/cwchar"
 5301              		.file 33 "/usr/include/newlib/c++/10.3.1/cstdint"
 5302              		.file 34 "/usr/include/newlib/c++/10.3.1/bits/exception_ptr.h"
 5303              		.file 35 "/usr/include/newlib/c++/10.3.1/clocale"
 5304              		.file 36 "/usr/include/newlib/c++/10.3.1/cstdlib"
 5305              		.file 37 "/usr/include/newlib/c++/10.3.1/cstdio"
 5306              		.file 38 "/usr/include/newlib/c++/10.3.1/initializer_list"
 5307              		.file 39 "/usr/include/newlib/c++/10.3.1/bits/stringfwd.h"
 5308              		.file 40 "/usr/include/newlib/c++/10.3.1/bits/vector.tcc"
 5309              		.file 41 "/usr/include/newlib/c++/10.3.1/cstring"
 5310              		.file 42 "/usr/include/newlib/c++/10.3.1/bits/uses_allocator.h"
 5311              		.file 43 "/usr/include/newlib/c++/10.3.1/bits/ptr_traits.h"
 5312              		.file 44 "/usr/include/newlib/c++/10.3.1/bits/functexcept.h"
 5313              		.file 45 "/usr/include/newlib/c++/10.3.1/bits/predefined_ops.h"
 5314              		.file 46 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator.h"
 5315              		.file 47 "/usr/include/newlib/c++/10.3.1/ext/type_traits.h"
 5316              		.file 48 "/usr/include/newlib/sys/_types.h"
 5317              		.file 49 "/usr/include/newlib/sys/reent.h"
 5318              		.file 50 "/usr/include/newlib/sys/lock.h"
 5319              		.file 51 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 5320              		.file 52 "/usr/include/newlib/wchar.h"
 5321              		.file 53 "/usr/include/newlib/locale.h"
 5322              		.file 54 "/usr/include/newlib/stdlib.h"
 5323              		.file 55 "/usr/include/newlib/stdio.h"
 5324              		.file 56 "Core/Inc/usart.h"
 5325              		.file 57 "App/Inc/WioE5.hpp"
 5326              		.file 58 "/usr/include/newlib/string.h"
 5327              		.file 59 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 5328              		.file 60 "<built-in>"
ARM GAS  /tmp/ccFECPfA.s 			page 317


DEFINED SYMBOLS
                            *ABS*:0000000000000000 WioE5.cpp
     /tmp/ccFECPfA.s:18     .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccFECPfA.s:26     .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccFECPfA.s:114    .text.HAL_UART_RxCpltCallback:000000000000004c $d
.ARM.extab.text.HAL_UART_RxCpltCallback:0000000000000000 $d
.ARM.exidx.text.HAL_UART_RxCpltCallback:0000000000000000 $d
     /tmp/ccFECPfA.s:125    .rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.str1.4:0000000000000000 $d
     /tmp/ccFECPfA.s:129    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 $t
     /tmp/ccFECPfA.s:136    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
     /tmp/ccFECPfA.s:353    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000054 $d
.ARM.exidx.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 $d
     /tmp/ccFECPfA.s:359    .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 $t
     /tmp/ccFECPfA.s:366    .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED2Ev
.ARM.exidx.text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 $d
     /tmp/ccFECPfA.s:366    .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED1Ev
     /tmp/ccFECPfA.s:446    .rodata._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_.str1.4:0000000000000000 $d
     /tmp/ccFECPfA.s:450    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $t
     /tmp/ccFECPfA.s:457    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 _Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
     /tmp/ccFECPfA.s:965    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:000000000000008c $d
.ARM.extab.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
.ARM.exidx.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
     /tmp/ccFECPfA.s:997    .rodata._ZN5WioE55setupEv.str1.4:0000000000000000 $d
     /tmp/ccFECPfA.s:998    .rodata._ZN5WioE55setupEv.str1.4:0000000000000000 .LC2
     /tmp/ccFECPfA.s:1001   .text._ZN5WioE55setupEv:0000000000000000 $t
     /tmp/ccFECPfA.s:1008   .text._ZN5WioE55setupEv:0000000000000000 _ZN5WioE55setupEv
     /tmp/ccFECPfA.s:1238   .text._ZN5WioE55setupEv:0000000000000050 $d
.ARM.extab.text._ZN5WioE55setupEv:0000000000000000 $d
.ARM.exidx.text._ZN5WioE55setupEv:0000000000000000 $d
     /tmp/ccFECPfA.s:1274   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_:0000000000000000 $t
     /tmp/ccFECPfA.s:1281   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_:0000000000000000 _ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_
.ARM.exidx.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_destroy_nodesEPPS5_S9_:0000000000000000 $d
     /tmp/ccFECPfA.s:1346   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:0000000000000000 $t
     /tmp/ccFECPfA.s:1353   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:0000000000000000 _ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
.ARM.exidx.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:0000000000000000 $d
     /tmp/ccFECPfA.s:1353   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev:0000000000000000 _ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
     /tmp/ccFECPfA.s:1456   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv:0000000000000000 $t
     /tmp/ccFECPfA.s:1463   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv:0000000000000000 _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv
.ARM.exidx.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_pop_front_auxEv:0000000000000000 $d
     /tmp/ccFECPfA.s:1619   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_:0000000000000000 $t
     /tmp/ccFECPfA.s:1626   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_:0000000000000000 _ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_
.ARM.extab.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_:0000000000000000 $d
.ARM.exidx.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE15_M_create_nodesEPPS5_S9_:0000000000000000 $d
     /tmp/ccFECPfA.s:1748   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj:0000000000000000 $t
     /tmp/ccFECPfA.s:1755   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj:0000000000000000 _ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj
     /tmp/ccFECPfA.s:2068   .text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj:00000000000000c8 $d
.ARM.extab.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj:0000000000000000 $d
.ARM.exidx.text._ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_initialize_mapEj:0000000000000000 $d
     /tmp/ccFECPfA.s:2112   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $t
     /tmp/ccFECPfA.s:2118   .text._Z41__static_initialization_and_destruction_0ii:0000000000000000 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccFECPfA.s:2249   .text._Z41__static_initialization_and_destruction_0ii:0000000000000044 $d
     /tmp/ccFECPfA.s:2779   .text._ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED2Ev:0000000000000000 _ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED1Ev
.ARM.exidx.text._Z41__static_initialization_and_destruction_0ii:0000000000000000 $d
     /tmp/ccFECPfA.s:2258   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_:0000000000000000 $t
     /tmp/ccFECPfA.s:2265   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_:0000000000000000 _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_
.ARM.exidx.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_destroy_data_auxESt15_Deque_iteratorIS5_RS5_PS5_ESB_:0000000000000000 $d
     /tmp/ccFECPfA.s:2772   .text._ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED2Ev:0000000000000000 $t
ARM GAS  /tmp/ccFECPfA.s 			page 318


     /tmp/ccFECPfA.s:2779   .text._ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED2Ev:0000000000000000 _ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED2Ev
.ARM.exidx.text._ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED2Ev:0000000000000000 $d
     /tmp/ccFECPfA.s:2933   .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000000 $t
     /tmp/ccFECPfA.s:2940   .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag
     /tmp/ccFECPfA.s:3153   .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000054 $d
.ARM.exidx.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag:0000000000000000 $d
     /tmp/ccFECPfA.s:3159   .rodata._ZN5WioE54loopEv.str1.4:0000000000000000 $d
     /tmp/ccFECPfA.s:3166   .text._ZN5WioE54loopEv:0000000000000000 $t
     /tmp/ccFECPfA.s:3173   .text._ZN5WioE54loopEv:0000000000000000 _ZN5WioE54loopEv
     /tmp/ccFECPfA.s:3738   .text._ZN5WioE54loopEv:00000000000000f4 $d
 .ARM.extab.text._ZN5WioE54loopEv:0000000000000000 $d
 .ARM.exidx.text._ZN5WioE54loopEv:0000000000000000 $d
     /tmp/ccFECPfA.s:3782   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb:0000000000000000 $t
     /tmp/ccFECPfA.s:3789   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb:0000000000000000 _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb
.ARM.exidx.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_reallocate_mapEjb:0000000000000000 $d
     /tmp/ccFECPfA.s:4248   .rodata._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_.str1.4:0000000000000000 $d
     /tmp/ccFECPfA.s:4252   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_:0000000000000000 $t
     /tmp/ccFECPfA.s:4259   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_:0000000000000000 _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_
     /tmp/ccFECPfA.s:4634   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_:00000000000000b8 $d
.ARM.exidx.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJS5_EEEvDpOT_:0000000000000000 $d
     /tmp/ccFECPfA.s:4648   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_:0000000000000000 $t
     /tmp/ccFECPfA.s:4655   .text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_:0000000000000000 _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_
.ARM.exidx.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12emplace_backIJS5_EEEvDpOT_:0000000000000000 $d
     /tmp/ccFECPfA.s:4912   .text._ZN5WioE56sendATEPKc:0000000000000000 $t
     /tmp/ccFECPfA.s:4919   .text._ZN5WioE56sendATEPKc:0000000000000000 _ZN5WioE56sendATEPKc
     /tmp/ccFECPfA.s:5175   .text._ZN5WioE56sendATEPKc:000000000000004c $d
.ARM.extab.text._ZN5WioE56sendATEPKc:0000000000000000 $d
.ARM.exidx.text._ZN5WioE56sendATEPKc:0000000000000000 $d
     /tmp/ccFECPfA.s:5209   .text._GLOBAL__sub_I_rx_byte:0000000000000000 $t
     /tmp/ccFECPfA.s:5215   .text._GLOBAL__sub_I_rx_byte:0000000000000000 _GLOBAL__sub_I_rx_byte
.ARM.exidx.text._GLOBAL__sub_I_rx_byte:0000000000000000 $d
     /tmp/ccFECPfA.s:5239   .init_array:0000000000000000 $d
     /tmp/ccFECPfA.s:5258   .bss.atBusy:0000000000000000 atBusy
     /tmp/ccFECPfA.s:5252   .bss._Z10atCmdQueueB5cxx11:0000000000000000 _Z10atCmdQueueB5cxx11
     /tmp/ccFECPfA.s:5278   .bss.rxReady:0000000000000000 rxReady
     /tmp/ccFECPfA.s:5272   .bss.rxIndex:0000000000000000 rxIndex
     /tmp/ccFECPfA.s:5265   .bss.rxBuffer:0000000000000000 rxBuffer
     /tmp/ccFECPfA.s:5284   .bss.rx_byte:0000000000000000 rx_byte
     /tmp/ccFECPfA.s:5248   .bss._Z10atCmdQueueB5cxx11:0000000000000000 $d
     /tmp/ccFECPfA.s:5259   .bss.atBusy:0000000000000000 $d
     /tmp/ccFECPfA.s:5261   .bss.rxBuffer:0000000000000000 $d
     /tmp/ccFECPfA.s:5268   .bss.rxIndex:0000000000000000 $d
     /tmp/ccFECPfA.s:5279   .bss.rxReady:0000000000000000 $d
     /tmp/ccFECPfA.s:5285   .bss.rx_byte:0000000000000000 $d
                           .group:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED5Ev
                           .group:0000000000000000 _ZNSt11_Deque_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED5Ev
                           .group:0000000000000000 _ZNSt5queueINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt5dequeIS5_SaIS5_EEED5Ev

UNDEFINED SYMBOLS
HAL_UART_Receive_IT
huart2
__aeabi_unwind_cpp_pr1
memcpy
_ZSt19__throw_logic_errorPKc
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
__aeabi_unwind_cpp_pr0
_ZdlPvj
ARM GAS  /tmp/ccFECPfA.s 			page 319


snprintf
_Znwj
HAL_UART_Transmit
_ZSt20__throw_length_errorPKc
_ZSt17__throw_bad_allocv
memset
__cxa_end_cleanup
huart1
__gxx_personality_v0
HAL_Delay
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
__cxa_begin_catch
__cxa_rethrow
__cxa_end_catch
__aeabi_atexit
__dso_handle
strlen
memmove
