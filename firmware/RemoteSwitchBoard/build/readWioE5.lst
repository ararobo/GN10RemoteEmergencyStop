ARM GAS  /tmp/ccRLs6kU.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"readWioE5.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
  18              		.align	1
  19              		.global	HAL_UART_RxCpltCallback
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	HAL_UART_RxCpltCallback:
  27              		.fnstart
  28              	.LVL0:
  29              	.LFB1500:
  30              		.file 1 "App/Src/readWioE5.cpp"
   1:App/Src/readWioE5.cpp **** #include "readWioE5.hpp"
   2:App/Src/readWioE5.cpp **** #include "gpio.h"
   3:App/Src/readWioE5.cpp **** #include "usart.h"
   4:App/Src/readWioE5.cpp **** #include "stm32f3xx_hal.h"
   5:App/Src/readWioE5.cpp **** #include "stm32f303x8.h"
   6:App/Src/readWioE5.cpp **** #include <cstring>
   7:App/Src/readWioE5.cpp **** 
   8:App/Src/readWioE5.cpp **** // 受信バッファ
   9:App/Src/readWioE5.cpp **** uint8_t rx_byte;
  10:App/Src/readWioE5.cpp **** char rxBuffer[128];
  11:App/Src/readWioE5.cpp **** uint16_t rxIndex = 0;
  12:App/Src/readWioE5.cpp **** volatile bool rxReady = false;
  13:App/Src/readWioE5.cpp **** 
  14:App/Src/readWioE5.cpp **** extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
  15:App/Src/readWioE5.cpp **** {
  31              		.loc 1 15 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 15 1 is_stmt 0 view .LVU1
  36 0000 08B5     		push	{r3, lr}
  37              		.save {r3, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 3, -8
  41              		.cfi_offset 14, -4
  16:App/Src/readWioE5.cpp ****     if (huart->Instance == USART2)
  42              		.loc 1 16 5 is_stmt 1 view .LVU2
ARM GAS  /tmp/ccRLs6kU.s 			page 2


  43              		.loc 1 16 16 is_stmt 0 view .LVU3
  44 0002 0268     		ldr	r2, [r0]
  45              		.loc 1 16 5 view .LVU4
  46 0004 104B     		ldr	r3, .L8
  47 0006 9A42     		cmp	r2, r3
  48 0008 00D0     		beq	.L6
  49              	.LVL1:
  50              	.L1:
  17:App/Src/readWioE5.cpp ****     {
  18:App/Src/readWioE5.cpp ****         if (rx_byte == '\n') // 改行で1行終わり
  19:App/Src/readWioE5.cpp ****         {
  20:App/Src/readWioE5.cpp ****             rxBuffer[rxIndex] = '\0';
  21:App/Src/readWioE5.cpp ****             rxReady = true;
  22:App/Src/readWioE5.cpp ****             rxIndex = 0;
  23:App/Src/readWioE5.cpp ****         }
  24:App/Src/readWioE5.cpp ****         else
  25:App/Src/readWioE5.cpp ****         {
  26:App/Src/readWioE5.cpp ****             if (rxIndex < sizeof(rxBuffer) - 1)
  27:App/Src/readWioE5.cpp ****             {
  28:App/Src/readWioE5.cpp ****                 rxBuffer[rxIndex++] = rx_byte;
  29:App/Src/readWioE5.cpp ****             }
  30:App/Src/readWioE5.cpp ****         }
  31:App/Src/readWioE5.cpp ****         // 次の受信をセット
  32:App/Src/readWioE5.cpp ****         HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
  33:App/Src/readWioE5.cpp ****     }
  34:App/Src/readWioE5.cpp **** }
  51              		.loc 1 34 1 view .LVU5
  52 000a 08BD     		pop	{r3, pc}
  53              	.LVL2:
  54              	.L6:
  18:App/Src/readWioE5.cpp ****         {
  55              		.loc 1 18 9 is_stmt 1 view .LVU6
  18:App/Src/readWioE5.cpp ****         {
  56              		.loc 1 18 21 is_stmt 0 view .LVU7
  57 000c 0F4B     		ldr	r3, .L8+4
  58 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  18:App/Src/readWioE5.cpp ****         {
  59              		.loc 1 18 9 view .LVU8
  60 0010 0A2B     		cmp	r3, #10
  61 0012 09D0     		beq	.L7
  26:App/Src/readWioE5.cpp ****             {
  62              		.loc 1 26 13 is_stmt 1 view .LVU9
  26:App/Src/readWioE5.cpp ****             {
  63              		.loc 1 26 25 is_stmt 0 view .LVU10
  64 0014 0E4A     		ldr	r2, .L8+8
  65 0016 1288     		ldrh	r2, [r2]
  26:App/Src/readWioE5.cpp ****             {
  66              		.loc 1 26 13 view .LVU11
  67 0018 7E2A     		cmp	r2, #126
  68 001a 0ED8     		bhi	.L4
  28:App/Src/readWioE5.cpp ****             }
  69              		.loc 1 28 17 is_stmt 1 view .LVU12
  28:App/Src/readWioE5.cpp ****             }
  70              		.loc 1 28 33 is_stmt 0 view .LVU13
  71 001c 501C     		adds	r0, r2, #1
  72              	.LVL3:
  28:App/Src/readWioE5.cpp ****             }
ARM GAS  /tmp/ccRLs6kU.s 			page 3


  73              		.loc 1 28 33 view .LVU14
  74 001e 0C49     		ldr	r1, .L8+8
  75 0020 0880     		strh	r0, [r1]	@ movhi
  28:App/Src/readWioE5.cpp ****             }
  76              		.loc 1 28 37 view .LVU15
  77 0022 0C49     		ldr	r1, .L8+12
  78 0024 8B54     		strb	r3, [r1, r2]
  79 0026 08E0     		b	.L4
  80              	.LVL4:
  81              	.L7:
  20:App/Src/readWioE5.cpp ****             rxReady = true;
  82              		.loc 1 20 13 is_stmt 1 view .LVU16
  20:App/Src/readWioE5.cpp ****             rxReady = true;
  83              		.loc 1 20 22 is_stmt 0 view .LVU17
  84 0028 094B     		ldr	r3, .L8+8
  85 002a 1988     		ldrh	r1, [r3]
  20:App/Src/readWioE5.cpp ****             rxReady = true;
  86              		.loc 1 20 31 view .LVU18
  87 002c 0022     		movs	r2, #0
  88 002e 0948     		ldr	r0, .L8+12
  89              	.LVL5:
  20:App/Src/readWioE5.cpp ****             rxReady = true;
  90              		.loc 1 20 31 view .LVU19
  91 0030 4254     		strb	r2, [r0, r1]
  21:App/Src/readWioE5.cpp ****             rxIndex = 0;
  92              		.loc 1 21 13 is_stmt 1 view .LVU20
  21:App/Src/readWioE5.cpp ****             rxIndex = 0;
  93              		.loc 1 21 21 is_stmt 0 view .LVU21
  94 0032 0949     		ldr	r1, .L8+16
  95 0034 0120     		movs	r0, #1
  96 0036 0870     		strb	r0, [r1]
  22:App/Src/readWioE5.cpp ****         }
  97              		.loc 1 22 13 is_stmt 1 view .LVU22
  22:App/Src/readWioE5.cpp ****         }
  98              		.loc 1 22 21 is_stmt 0 view .LVU23
  99 0038 1A80     		strh	r2, [r3]	@ movhi
 100              	.L4:
  32:App/Src/readWioE5.cpp ****     }
 101              		.loc 1 32 9 is_stmt 1 view .LVU24
  32:App/Src/readWioE5.cpp ****     }
 102              		.loc 1 32 28 is_stmt 0 view .LVU25
 103 003a 0122     		movs	r2, #1
 104 003c 0349     		ldr	r1, .L8+4
 105 003e 0748     		ldr	r0, .L8+20
 106 0040 FFF7FEFF 		bl	HAL_UART_Receive_IT
 107              	.LVL6:
 108              		.loc 1 34 1 view .LVU26
 109 0044 E1E7     		b	.L1
 110              	.L9:
 111 0046 00BF     		.align	2
 112              	.L8:
 113 0048 00440040 		.word	1073759232
 114 004c 00000000 		.word	.LANCHOR0
 115 0050 00000000 		.word	.LANCHOR1
 116 0054 00000000 		.word	.LANCHOR2
 117 0058 00000000 		.word	.LANCHOR3
 118 005c 00000000 		.word	huart2
ARM GAS  /tmp/ccRLs6kU.s 			page 4


 119              		.cfi_endproc
 120              	.LFE1500:
 121              		.fnend
 123              		.section	.text._ZN9ReadWioE5C2Ev,"ax",%progbits
 124              		.align	1
 125              		.global	_ZN9ReadWioE5C2Ev
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu fpv4-sp-d16
 131              	_ZN9ReadWioE5C2Ev:
 132              		.fnstart
 133              	.LVL7:
 134              	.LFB1502:
  35:App/Src/readWioE5.cpp **** 
  36:App/Src/readWioE5.cpp **** ReadWioE5::ReadWioE5(/* args */)
 135              		.loc 1 36 1 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		.loc 1 36 1 is_stmt 0 view .LVU28
 140 0000 10B5     		push	{r4, lr}
 141              		.save {r4, lr}
 142              	.LCFI1:
 143              		.cfi_def_cfa_offset 8
 144              		.cfi_offset 4, -8
 145              		.cfi_offset 14, -4
 146 0002 0446     		mov	r4, r0
 147              	.LBB339:
  37:App/Src/readWioE5.cpp **** {
  38:App/Src/readWioE5.cpp ****     HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 148              		.loc 1 38 5 is_stmt 1 view .LVU29
 149              		.loc 1 38 24 is_stmt 0 view .LVU30
 150 0004 0122     		movs	r2, #1
 151 0006 0349     		ldr	r1, .L12
 152 0008 0348     		ldr	r0, .L12+4
 153              	.LVL8:
 154              		.loc 1 38 24 view .LVU31
 155 000a FFF7FEFF 		bl	HAL_UART_Receive_IT
 156              	.LVL9:
 157              	.LBE339:
  39:App/Src/readWioE5.cpp **** }
 158              		.loc 1 39 1 view .LVU32
 159 000e 2046     		mov	r0, r4
 160 0010 10BD     		pop	{r4, pc}
 161              	.LVL10:
 162              	.L13:
 163              		.loc 1 39 1 view .LVU33
 164 0012 00BF     		.align	2
 165              	.L12:
 166 0014 00000000 		.word	.LANCHOR0
 167 0018 00000000 		.word	huart2
 168              		.cfi_endproc
 169              	.LFE1502:
 170              		.fnend
 172              		.global	_ZN9ReadWioE5C1Ev
 173              		.thumb_set _ZN9ReadWioE5C1Ev,_ZN9ReadWioE5C2Ev
ARM GAS  /tmp/ccRLs6kU.s 			page 5


 174              		.section	.rodata._ZN9ReadWioE56sendATEPKc.str1.4,"aMS",%progbits,1
 175              		.align	2
 176              	.LC0:
 177 0000 25730D0A 		.ascii	"%s\015\012\000"
 177      00
 178              		.section	.text._ZN9ReadWioE56sendATEPKc,"ax",%progbits
 179              		.align	1
 180              		.global	_ZN9ReadWioE56sendATEPKc
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 184              		.fpu fpv4-sp-d16
 186              	_ZN9ReadWioE56sendATEPKc:
 187              		.fnstart
 188              	.LVL11:
 189              	.LFB1506:
  40:App/Src/readWioE5.cpp **** 
  41:App/Src/readWioE5.cpp **** void ReadWioE5::setup()
  42:App/Src/readWioE5.cpp **** {
  43:App/Src/readWioE5.cpp ****     // 初期化コード
  44:App/Src/readWioE5.cpp ****     serial_printf("ReadWioE5 setup complete.\n");
  45:App/Src/readWioE5.cpp **** }
  46:App/Src/readWioE5.cpp **** 
  47:App/Src/readWioE5.cpp **** void ReadWioE5::loop()
  48:App/Src/readWioE5.cpp **** {
  49:App/Src/readWioE5.cpp ****     if (rxReady)
  50:App/Src/readWioE5.cpp ****     {
  51:App/Src/readWioE5.cpp ****         serial_printf("WioE5: %s\n", rxBuffer);
  52:App/Src/readWioE5.cpp ****         rxReady = false;
  53:App/Src/readWioE5.cpp ****     }
  54:App/Src/readWioE5.cpp **** }
  55:App/Src/readWioE5.cpp **** 
  56:App/Src/readWioE5.cpp **** void ReadWioE5::sendAT(const char *cmd)
  57:App/Src/readWioE5.cpp **** {
 190              		.loc 1 57 1 is_stmt 1 view -0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 64
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194              		.loc 1 57 1 is_stmt 0 view .LVU35
 195 0000 00B5     		push	{lr}
 196              		.save {lr}
 197              	.LCFI2:
 198              		.cfi_def_cfa_offset 4
 199              		.cfi_offset 14, -4
 200              		.pad #68
 201 0002 91B0     		sub	sp, sp, #68
 202              	.LCFI3:
 203              		.cfi_def_cfa_offset 72
 204 0004 0B46     		mov	r3, r1
  58:App/Src/readWioE5.cpp ****     char buffer[64];
 205              		.loc 1 58 5 is_stmt 1 view .LVU36
  59:App/Src/readWioE5.cpp ****     snprintf(buffer, sizeof(buffer), "%s\r\n", cmd);
 206              		.loc 1 59 5 view .LVU37
 207              		.loc 1 59 13 is_stmt 0 view .LVU38
 208 0006 084A     		ldr	r2, .L16
 209 0008 4021     		movs	r1, #64
 210              	.LVL12:
ARM GAS  /tmp/ccRLs6kU.s 			page 6


 211              		.loc 1 59 13 view .LVU39
 212 000a 6846     		mov	r0, sp
 213              	.LVL13:
 214              		.loc 1 59 13 view .LVU40
 215 000c FFF7FEFF 		bl	snprintf
 216              	.LVL14:
  60:App/Src/readWioE5.cpp ****     HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 217              		.loc 1 60 5 is_stmt 1 view .LVU41
 218              		.loc 1 60 57 is_stmt 0 view .LVU42
 219 0010 6846     		mov	r0, sp
 220 0012 FFF7FEFF 		bl	strlen
 221              	.LVL15:
 222              		.loc 1 60 22 view .LVU43
 223 0016 6423     		movs	r3, #100
 224 0018 82B2     		uxth	r2, r0
 225 001a 6946     		mov	r1, sp
 226 001c 0348     		ldr	r0, .L16+4
 227 001e FFF7FEFF 		bl	HAL_UART_Transmit
 228              	.LVL16:
  61:App/Src/readWioE5.cpp **** }
 229              		.loc 1 61 1 view .LVU44
 230 0022 11B0     		add	sp, sp, #68
 231              	.LCFI4:
 232              		.cfi_def_cfa_offset 4
 233              		@ sp needed
 234 0024 5DF804FB 		ldr	pc, [sp], #4
 235              	.L17:
 236              		.align	2
 237              	.L16:
 238 0028 00000000 		.word	.LC0
 239 002c 00000000 		.word	huart2
 240              		.cfi_endproc
 241              	.LFE1506:
 242              		.fnend
 244              		.section	.rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St
 245              		.align	2
 246              	.LC1:
 247 0000 62617369 		.ascii	"basic_string::_M_construct null not valid\000"
 247      635F7374 
 247      72696E67 
 247      3A3A5F4D 
 247      5F636F6E 
 248              		.section	.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20
 249              		.align	1
 250              		.weak	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_i
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator
 257              		.fnstart
 258              	.LVL17:
 259              	.LFB1848:
 260              		.file 2 "/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc"
   1:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
   3:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
ARM GAS  /tmp/ccRLs6kU.s 			page 7


   4:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** //
   5:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  11:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  16:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  20:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  25:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** /** @file bits/basic_string.tcc
  26:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  30:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** //
  31:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** //
  33:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  34:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Written by Jason Merrill based upon the specification by Takanori Adachi
  35:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // in ANSI X3J16/94-0013R2.  Rewritten by Nathan Myers to ISO-14882.
  36:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // Non-reference-counted implementation written by Paolo Carlini and
  37:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** // updated by Jonathan Wakely for ISO-14882-2011.
  38:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  39:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #ifndef _BASIC_STRING_TCC
  40:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #define _BASIC_STRING_TCC 1
  41:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  42:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #pragma GCC system_header
  43:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  44:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #include <bits/cxxabi_forced.h>
  45:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  46:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  47:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** {
  48:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  49:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  50:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** #if _GLIBCXX_USE_CXX11_ABI
  51:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  52:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  53:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     const typename basic_string<_CharT, _Traits, _Alloc>::size_type
  54:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::npos;
  55:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  56:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
  57:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     void
  58:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
  59:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     swap(basic_string& __s) _GLIBCXX_NOEXCEPT
  60:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     {
ARM GAS  /tmp/ccRLs6kU.s 			page 8


  61:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (this == &__s)
  62:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	return;
  63:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  64:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
  65:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
  66:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (_M_is_local())
  67:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	if (__s._M_is_local())
  68:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
  69:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    if (length() && __s.length())
  70:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
  71:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_CharT __tmp_data[_S_local_capacity + 1];
  72:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(__tmp_data, __s._M_local_buf,
  73:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  74:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  75:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  76:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __tmp_data,
  77:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  78:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
  79:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    else if (__s.length())
  80:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
  81:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(_M_local_buf, __s._M_local_buf,
  82:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  83:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_M_length(__s.length());
  84:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		__s._M_set_length(0);
  85:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		return;
  86:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
  87:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    else if (length())
  88:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
  89:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		traits_type::copy(__s._M_local_buf, _M_local_buf,
  90:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				  _S_local_capacity + 1);
  91:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		__s._M_length(length());
  92:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_M_set_length(0);
  93:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		return;
  94:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
  95:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
  96:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	else
  97:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
  98:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    const size_type __tmp_capacity = __s._M_allocated_capacity;
  99:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    traits_type::copy(__s._M_local_buf, _M_local_buf,
 100:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 			      _S_local_capacity + 1);
 101:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_data(__s._M_data());
 102:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __s._M_data(__s._M_local_buf);
 103:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__tmp_capacity);
 104:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 105:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       else
 106:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	{
 107:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  const size_type __tmp_capacity = _M_allocated_capacity;
 108:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  if (__s._M_is_local())
 109:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    {
 110:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      traits_type::copy(_M_local_buf, __s._M_local_buf,
 111:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				_S_local_capacity + 1);
 112:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      __s._M_data(_M_data());
 113:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      _M_data(_M_local_buf);
 114:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    }
 115:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  else
 116:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    {
 117:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      pointer __tmp_ptr = _M_data();
ARM GAS  /tmp/ccRLs6kU.s 			page 9


 118:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      _M_data(__s._M_data());
 119:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      __s._M_data(__tmp_ptr);
 120:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      _M_capacity(__s._M_allocated_capacity);
 121:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    }
 122:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  __s._M_capacity(__tmp_capacity);
 123:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	}
 124:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 125:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       const size_type __tmp_length = length();
 126:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_length(__s.length());
 127:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       __s._M_length(__tmp_length);
 128:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     }
 129:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 130:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 131:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     typename basic_string<_CharT, _Traits, _Alloc>::pointer
 132:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     basic_string<_CharT, _Traits, _Alloc>::
 133:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     _M_create(size_type& __capacity, size_type __old_capacity)
 134:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     {
 135:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // 83.  String::npos vs. string::max_size()
 137:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (__capacity > max_size())
 138:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	std::__throw_length_error(__N("basic_string::_M_create"));
 139:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 140:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // The below implements an exponential growth policy, necessary to
 141:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // meet amortized linear time requirements of the library: see
 142:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // http://gcc.gnu.org/ml/libstdc++/2001-07/msg00085.html.
 143:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 144:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	{
 145:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  __capacity = 2 * __old_capacity;
 146:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  // Never allocate a string bigger than max_size.
 147:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  if (__capacity > max_size())
 148:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __capacity = max_size();
 149:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	}
 150:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 151:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // NB: Need an array of char_type[__capacity], plus a terminating
 152:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       // null char_type() element.
 153:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
 154:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     }
 155:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 156:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // NB: This is the special case for Input Iterators, used in
 157:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // istreambuf_iterators, etc.
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // Input Iterators have a cost structure very different from
 159:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   // pointers, calling for a different coding style.
 160:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 161:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     template<typename _InIterator>
 162:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       void
 163:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		   std::input_iterator_tag)
 166:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       {
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	size_type __len = 0;
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	size_type __capacity = size_type(_S_local_capacity);
 169:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 170:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	while (__beg != __end && __len < __capacity)
 171:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 172:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_data()[__len++] = *__beg;
 173:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    ++__beg;
 174:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
ARM GAS  /tmp/ccRLs6kU.s 			page 10


 175:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 176:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__try
 177:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 178:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    while (__beg != __end)
 179:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      {
 180:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		if (__len == __capacity)
 181:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		  {
 182:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    // Allocate more space.
 183:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    __capacity = __len + 1;
 184:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    pointer __another = _M_create(__capacity, __len);
 185:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    this->_S_copy(__another, _M_data(), __len);
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    _M_dispose();
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    _M_data(__another);
 188:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		    _M_capacity(__capacity);
 189:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		  }
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		_M_data()[__len++] = *__beg;
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		++__beg;
 192:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	      }
 193:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__catch(...)
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 196:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_dispose();
 197:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 199:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 200:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	_M_set_length(__len);
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       }
 202:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 203:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****   template<typename _CharT, typename _Traits, typename _Alloc>
 204:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****     template<typename _InIterator>
 205:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       void
 206:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       basic_string<_CharT, _Traits, _Alloc>::
 261              		.loc 2 206 7 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 8
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265              		.loc 2 206 7 is_stmt 0 view .LVU46
 266 0000 70B5     		push	{r4, r5, r6, lr}
 267              		.save {r4, r5, r6, lr}
 268              	.LCFI5:
 269              		.cfi_def_cfa_offset 16
 270              		.cfi_offset 4, -16
 271              		.cfi_offset 5, -12
 272              		.cfi_offset 6, -8
 273              		.cfi_offset 14, -4
 274              		.pad #8
 275 0002 82B0     		sub	sp, sp, #8
 276              	.LCFI6:
 277              		.cfi_def_cfa_offset 24
 278 0004 0546     		mov	r5, r0
 207:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       _M_construct(_InIterator __beg, _InIterator __end,
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 		   std::forward_iterator_tag)
 209:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       {
 210:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	// NB: Not required, but considered best practice.
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
 279              		.loc 2 211 42 view .LVU47
 280 0006 0E46     		mov	r6, r1
ARM GAS  /tmp/ccRLs6kU.s 			page 11


 281 0008 61B1     		cbz	r1, .L24
 282              	.L19:
 283              	.LVL18:
 284              	.LBB366:
 285              	.LBI366:
 286              		.file 3 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** /** @file bits/stl_iterator_base_funcs.h
ARM GAS  /tmp/ccRLs6kU.s 			page 12


  52:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *
  55:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
  56:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  57:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****  */
  58:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  60:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  61:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  62:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #pragma GCC system_header
  63:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  64:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #include <debug/assertions.h>
  66:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  67:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** {
  69:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  71:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  72:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration for the overloads of __distance.
  73:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_iterator;
  74:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template <typename> struct _List_const_iterator;
  75:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
  76:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
  78:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  79:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
  80:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  81:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****                input_iterator_tag)
  82:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     {
  83:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
  84:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  85:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  86:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  87:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
  88:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	{
  89:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	  ++__first;
  90:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	  ++__n;
  91:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	}
  92:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       return __n;
  93:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
  94:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
  95:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  96:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX14_CONSTEXPR
  97:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_RandomAccessIterator>::difference_type
  98:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  99:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 100:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     {
 101:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       // concept requirements
 102:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
 103:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****       return __last - __first;
 105:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 106:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
 107:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #if _GLIBCXX_USE_CXX11_ABI
 108:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   // Forward declaration because of the qualified call in distance.
ARM GAS  /tmp/ccRLs6kU.s 			page 13


 109:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 110:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 111:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,
 112:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_iterator<_Tp>,
 113:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 114:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
 115:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _Tp>
 116:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     ptrdiff_t
 117:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 118:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       _GLIBCXX_STD_C::_List_const_iterator<_Tp>,
 119:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 	       input_iterator_tag);
 120:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** #endif
 121:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h **** 
 122:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   /**
 123:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @brief A generalization of pointer arithmetic.
 124:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @param  __first  An input iterator.
 125:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @param  __last  An input iterator.
 126:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  @return  The distance between them.
 127:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *
 128:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  Returns @c n such that __first + n == __last.  This requires
 129:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  that @p __last must be reachable from @p __first.  Note that @c
 130:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  n may be negative.
 131:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *
 132:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  For random access iterators, this uses their @c + and @c - operations
 133:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****    *  and are constant time.  For other %iterator classes they are linear time.
 134:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   */
 135:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
 136:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     inline _GLIBCXX17_CONSTEXPR
 137:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     typename iterator_traits<_InputIterator>::difference_type
 138:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     distance(_InputIterator __first, _InputIterator __last)
 287              		.loc 3 138 5 is_stmt 1 view .LVU48
 288              	.LBB367:
 289              	.LBB368:
 290              	.LBI368:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
 291              		.loc 3 98 5 view .LVU49
 292              	.LBB369:
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 293              		.loc 3 104 23 is_stmt 0 view .LVU50
 294 000a 941B     		subs	r4, r2, r6
 295              	.LVL19:
 104:/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_funcs.h ****     }
 296              		.loc 3 104 23 view .LVU51
 297              	.LBE369:
 298              	.LBE368:
 299              	.LBE367:
 300              	.LBE366:
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 213:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 214:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 215:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 301              		.loc 2 215 12 view .LVU52
 302 000c 0194     		str	r4, [sp, #4]
 216:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 217:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	if (__dnew > size_type(_S_local_capacity))
 303              		.loc 2 217 2 view .LVU53
 304 000e 0F2C     		cmp	r4, #15
ARM GAS  /tmp/ccRLs6kU.s 			page 14


 305 0010 0DD8     		bhi	.L25
 306              	.LVL20:
 307              	.L20:
 308              	.LBB370:
 309              	.LBI370:
 310              		.file 4 "/usr/include/newlib/c++/10.3.1/bits/basic_string.h"
   1:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Components for manipulating sequences of characters -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** /** @file bits/basic_string.h
  26:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
  31:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // ISO C++ 14882: 21 Strings library
  32:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** //
  33:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  34:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifndef _BASIC_STRING_H
  35:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #define _BASIC_STRING_H 1
  36:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  37:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #pragma GCC system_header
  38:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  39:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <ext/atomicity.h>
  40:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <ext/alloc_traits.h>
  41:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <debug/debug.h>
  42:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  43:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
  44:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #include <initializer_list>
  45:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  46:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  47:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
  48:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # include <string_view>
  49:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  50:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** namespace std _GLIBCXX_VISIBILITY(default)
ARM GAS  /tmp/ccRLs6kU.s 			page 15


  52:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** {
  53:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  54:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  55:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef __cpp_lib_is_constant_evaluated
  56:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Support P1032R1 in C++20 (but not P0980R1 yet).
  57:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # define __cpp_lib_constexpr_string 201811L
  58:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #elif __cplusplus >= 201703L
  59:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** // Support P0426R1 changes to char_traits in C++17.
  60:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** # define __cpp_lib_constexpr_string 201611L
  61:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #elif __cplusplus > 201703L
  62:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
  63:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  64:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if _GLIBCXX_USE_CXX11_ABI
  65:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** _GLIBCXX_BEGIN_NAMESPACE_CXX11
  66:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****   /**
  67:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @class basic_string basic_string.h <string>
  68:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @brief  Managing sequences of characters and character-like objects.
  69:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  70:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @ingroup strings
  71:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @ingroup sequences
  72:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  73:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _CharT  Type of character
  74:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _Traits  Traits for character type, defaults to
  75:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *                   char_traits<_CharT>.
  76:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_CharT>.
  77:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *
  78:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  79:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#66">reversible container</a>, and a
  80:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#67">sequence</a>.  Of the
  81:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  <a href="tables.html#68">optional sequence requirements</a>, only
  82:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    *  @c push_back, @c at, and @c %array access are supported.
  83:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****    */
  84:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****   template<typename _CharT, typename _Traits, typename _Alloc>
  85:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     class basic_string
  86:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     {
  87:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  88:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	rebind<_CharT>::other _Char_alloc_type;
  89:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
  90:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Types:
  92:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
  93:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef _Traits					traits_type;
  94:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Traits::char_type		value_type;
  95:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef _Char_alloc_type				allocator_type;
  96:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::size_type		size_type;
  97:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::difference_type	difference_type;
  98:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::reference		reference;
  99:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::pointer		pointer;
 101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;
 103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
 104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 							const_iterator;
 105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Value returned by various member functions when they fail.
ARM GAS  /tmp/ccRLs6kU.s 			page 16


 109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static const size_type	npos = static_cast<size_type>(-1);
 110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     protected:
 112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // type used for positions in insert, erase etc.
 113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef iterator __const_iterator;
 115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef const_iterator __const_iterator;
 117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
 120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // A helper type for avoiding boiler-plate.
 122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       typedef basic_string_view<_CharT, _Traits> __sv_type;
 123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename _Res>
 125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	using _If_sv = enable_if_t<
 126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __and_<is_convertible<const _Tp&, __sv_type>,
 127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp*, const basic_string*>>,
 128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
 129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _Res>;
 130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Allows an implicit conversion to __sv_type.
 132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static __sv_type
 133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_to_string_view(__sv_type __svt) noexcept
 134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return __svt; }
 135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Wraps a string_view by explicit conversion and thus
 137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // allows to add an internal constructor that does not
 138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // participate in overload resolution when a string_view
 139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // is provided.
 140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       struct __sv_wrapper
 141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }
 143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__sv_type _M_sv;
 144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Only internally used: Construct string from a string view
 148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *          wrapper.
 149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __svw  string view wrapper.
 150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       explicit
 153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(__sv_wrapper __svw, const _Alloc& __a)
 154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a) { }
 155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       struct _Alloc_hider : allocator_type // TODO check __is_final
 159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus < 201103L
 161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
 162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, const _Alloc& __a)
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
ARM GAS  /tmp/ccRLs6kU.s 			page 17


 166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(std::move(__a)), _M_p(__dat) { }
 169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	pointer _M_p; // The actual data.
 172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _Alloc_hider	_M_dataplus;
 175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type		_M_string_length;
 176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       enum { _S_local_capacity = 15 / sizeof(_CharT) };
 178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       union
 180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_CharT           _M_local_buf[_S_local_capacity + 1];
 182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	size_type        _M_allocated_capacity;
 183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       };
 184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_data(pointer __p)
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_length(size_type __length)
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_data() const
 311              		.loc 4 194 7 is_stmt 1 view .LVU54
 312              	.LBB371:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 313              		.loc 4 195 28 is_stmt 0 view .LVU55
 314 0012 2868     		ldr	r0, [r5]
 315              	.LVL21:
 316              		.loc 4 195 28 view .LVU56
 317              	.LBE371:
 318              	.LBE370:
 319              	.LBB372:
 320              	.LBI372:
 196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_local_data()
 199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return pointer(_M_local_buf);
 204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_pointer
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_local_data() const
 209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
ARM GAS  /tmp/ccRLs6kU.s 			page 18


 213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return const_pointer(_M_local_buf);
 214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_capacity(size_type __capacity)
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_set_length(size_type __n)
 223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_length(__n);
 225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	traits_type::assign(_M_data()[__n], _CharT());
 226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       bool
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_is_local() const
 230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Create & Destroy
 233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pointer
 234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_create(size_type&, size_type);
 235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_dispose()
 238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (!_M_is_local())
 240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_destroy(size_type __size) throw()
 245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _M_construct_aux is used to implement the 21.3.1 para 15 which
 248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // requires special behaviour if _InIterator is an integral type
 249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct_aux(_InIterator __beg, _InIterator __end,
 252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 std::__false_type)
 253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
 254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
 255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           _M_construct(__beg, __end, _Tag());
 256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 438. Ambiguity in the "do the right thing" clause
 260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Integer>
 261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ _M_construct_aux_2(static_cast<size_type>(__beg), __end); }
 264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_construct_aux_2(size_type __req, _CharT __c)
 267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__req, __c); }
 268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
ARM GAS  /tmp/ccRLs6kU.s 			page 19


 270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end)
 272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
 273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InIterator>::__type _Integral;
 274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_construct_aux(__beg, __end, _Integral());
 275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         }
 276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // For Input Iterators, used in istreambuf_iterators, etc.
 278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InIterator>
 279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_InIterator __beg, _InIterator __end,
 281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     std::input_iterator_tag);
 282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // For forward_iterators up to random_access_iterators, used for
 284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // string::iterator, _CharT*, etc.
 285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _FwdIterator>
 286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
 287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _M_construct(_FwdIterator __beg, _FwdIterator __end,
 288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     std::forward_iterator_tag);
 289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_construct(size_type __req, _CharT __c);
 292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       allocator_type&
 294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_get_allocator()
 295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const allocator_type&
 298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_get_allocator() const
 299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus; }
 300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
 302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
 304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // The explicit instantiations in misc-inst.cc require this due to
 305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64063
 306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, bool _Requires =
 307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       !__are_same<_Tp, _CharT*>::__value
 308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const _CharT*>::__value
 309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, iterator>::__value
 310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       && !__are_same<_Tp, const_iterator>::__value>
 311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator
 312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ typedef basic_string& __type; };
 313:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
 314:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	struct __enable_if_not_native_iterator<_Tp, false> { };
 315:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 316:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 317:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 318:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_check(size_type __pos, const char* __s) const
 319:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 320:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__pos > this->size())
 321:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("%s: __pos (which is %zu) > "
 322:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "this->size() (which is %zu)"),
 323:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __s, __pos, this->size());
 324:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return __pos;
 325:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 326:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 20


 327:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 328:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_check_length(size_type __n1, size_type __n2, const char* __s) const
 329:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 330:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (this->max_size() - (this->size() - __n1) < __n2)
 331:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_length_error(__N(__s));
 332:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 333:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 334:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 335:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // NB: _M_limit doesn't check for a bad __pos value.
 336:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 337:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT
 338:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 339:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const bool __testoff =  __off < this->size() - __pos;
 340:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return __testoff ? __off : this->size() - __pos;
 341:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 342:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // True if _Rep and source do not overlap.
 344:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       bool
 345:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT
 346:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 347:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return (less<const _CharT*>()(__s, _M_data())
 348:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		|| less<const _CharT*>()(_M_data() + this->size(), __s));
 349:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 350:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 351:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // When __n = 1 way faster than the general multichar
 352:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // traits_type::copy/move/assign.
 353:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
 355:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 357:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 358:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 359:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::copy(__d, __s, __n);
 360:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 361:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 362:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 363:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_move(_CharT* __d, const _CharT* __s, size_type __n)
 364:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 365:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 366:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 367:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 368:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::move(__d, __s, __n);
 369:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 370:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 371:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 372:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_assign(_CharT* __d, size_type __n, _CharT __c)
 373:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 374:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == 1)
 375:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, __c);
 376:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 377:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(__d, __n, __c);
 378:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 379:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 380:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _S_copy_chars is a separate template to permit specialization
 381:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // to optimize for the common case of pointers as iterators.
 382:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _Iterator>
 383:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         static void
ARM GAS  /tmp/ccRLs6kU.s 			page 21


 384:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
 385:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
 386:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  for (; __k1 != __k2; ++__k1, (void)++__p)
 387:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::assign(*__p, *__k1); // These types are off.
 388:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
 389:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 390:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 391:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT
 392:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 393:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 394:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 395:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
 396:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 397:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy_chars(__p, __k1.base(), __k2.base()); }
 398:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 399:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 400:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT
 401:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 402:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 403:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static void
 404:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
 321              		.loc 4 404 7 is_stmt 1 view .LVU57
 322              	.LBB373:
 323              	.LBI373:
 354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 324              		.loc 4 354 7 view .LVU58
 325              	.LBB374:
 356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  traits_type::assign(*__d, *__s);
 326              		.loc 4 356 2 is_stmt 0 view .LVU59
 327 0014 012C     		cmp	r4, #1
 328 0016 13D0     		beq	.L26
 329              	.LVL22:
 330              	.LBB375:
 331              	.LBI375:
 332              		.file 5 "/usr/include/newlib/c++/10.3.1/bits/char_traits.h"
   1:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Character Traits for use by standard string and iostream -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Copyright (C) 1997-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
ARM GAS  /tmp/ccRLs6kU.s 			page 22


  23:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** /** @file bits/char_traits.h
  26:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****  *  Do not attempt to use it directly. @headername{string}
  28:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** //
  31:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // ISO C++ 14882: 21  Strings library
  32:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** //
  33:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  34:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifndef _CHAR_TRAITS_H
  35:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #define _CHAR_TRAITS_H 1
  36:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  37:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #pragma GCC system_header
  38:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  39:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #include <bits/stl_algobase.h>  // std::copy, std::fill_n
  40:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #include <bits/postypes.h>      // For streampos
  41:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #include <cwchar>               // For WEOF, wmemmove, wmemset, etc.
  42:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus > 201703L
  43:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # include <compare>
  44:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
  45:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  46:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifndef _GLIBCXX_ALWAYS_INLINE
  47:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # define _GLIBCXX_ALWAYS_INLINE inline __attribute__((__always_inline__))
  48:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
  49:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  50:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  51:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** {
  52:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  53:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  54:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
  55:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief  Mapping from character type to associated types.
  56:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
  57:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @note This is an implementation class for the generic version
  58:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  of char_traits.  It defines int_type, off_type, pos_type, and
  59:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  state_type.  By default these are unsigned long, streamoff,
  60:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  streampos, and mbstate_t.  Users who need a different set of
  61:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  types, but who don't need to change the definitions of any function
  62:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  defined in char_traits, can specialize __gnu_cxx::_Char_types
  63:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  while leaving __gnu_cxx::char_traits alone. */
  64:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
  65:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct _Char_types
  66:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
  67:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef unsigned long   int_type;
  68:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef std::streampos  pos_type;
  69:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef std::streamoff  off_type;
  70:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef std::mbstate_t  state_type;
  71:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     };
  72:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  73:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
  74:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
  75:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief  Base class used to implement std::char_traits.
  76:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
  77:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @note For any given actual character type, this definition is
  78:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  probably wrong.  (Most of the member functions are likely to be
  79:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  right, but the int_type and state_type typedefs, and the eof()
ARM GAS  /tmp/ccRLs6kU.s 			page 23


  80:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  member function, are likely to be wrong.)  The reason this class
  81:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  exists is so users can specialize it.  Classes in namespace std
  82:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  may not be specialized for fundamental types, but classes in
  83:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  namespace __gnu_cxx may be.
  84:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
  85:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
  86:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
  87:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.  
  88:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    */
  89:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
  90:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct char_traits
  91:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
  92:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef _CharT                                    char_type;
  93:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::int_type    int_type;
  94:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::pos_type    pos_type;
  95:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::off_type    off_type;
  96:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef typename _Char_types<_CharT>::state_type  state_type;
  97:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cpp_lib_three_way_comparison
  98:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       using comparison_category = std::strong_ordering;
  99:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 100:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 101:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR void
 102:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2)
 103:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 104:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 105:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 106:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2)
 107:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 108:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 109:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 110:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2)
 111:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 < __c2; }
 112:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 113:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR int
 114:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
 115:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 116:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR std::size_t
 117:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       length(const char_type* __s);
 118:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX14_CONSTEXPR const char_type*
 120:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       find(const char_type* __s, std::size_t __n, const char_type& __a);
 121:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 122:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 123:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, std::size_t __n);
 124:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 125:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 126:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, std::size_t __n);
 127:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 128:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 129:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       assign(char_type* __s, std::size_t __n, char_type __a);
 130:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR char_type
 132:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       to_char_type(const int_type& __c)
 133:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return static_cast<char_type>(__c); }
 134:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 135:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 136:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       to_int_type(const char_type& __c)
ARM GAS  /tmp/ccRLs6kU.s 			page 24


 137:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return static_cast<int_type>(__c); }
 138:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 139:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 140:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eq_int_type(const int_type& __c1, const int_type& __c2)
 141:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 142:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 143:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 144:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eof()
 145:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return static_cast<int_type>(_GLIBCXX_STDIO_EOF); }
 146:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR int_type
 148:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       not_eof(const int_type& __c)
 149:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
 150:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     };
 151:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 152:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 153:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR int
 154:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 155:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
 156:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 157:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 158:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (lt(__s1[__i], __s2[__i]))
 159:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return -1;
 160:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	else if (lt(__s2[__i], __s1[__i]))
 161:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return 1;
 162:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return 0;
 163:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 164:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 165:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 166:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR std::size_t
 167:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 168:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     length(const char_type* __p)
 169:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 170:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       std::size_t __i = 0;
 171:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       while (!eq(__p[__i], char_type()))
 172:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****         ++__i;
 173:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __i;
 174:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 175:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 176:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 177:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type*
 178:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 179:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     find(const char_type* __s, std::size_t __n, const char_type& __a)
 180:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 181:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       for (std::size_t __i = 0; __i < __n; ++__i)
 182:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****         if (eq(__s[__i], __a))
 183:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****           return __s + __i;
 184:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return 0;
 185:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 186:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 187:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 188:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 189:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 190:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 191:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     move(char_type* __s1, const char_type* __s2, std::size_t __n)
 192:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 193:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       if (__n == 0)
ARM GAS  /tmp/ccRLs6kU.s 			page 25


 194:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return __s1;
 195:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 196:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       if (std::is_constant_evaluated())
 197:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	{
 198:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  if (__s1 > __s2 && __s1 < __s2 + __n)
 199:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    std::copy_backward(__s2, __s2 + __n, __s1 + __n);
 200:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  else
 201:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    std::copy(__s2, __s2 + __n, __s1);
 202:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 203:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	}
 204:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 205:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
 206:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 						    __n * sizeof(char_type)));
 207:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 208:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 209:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 210:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 211:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 212:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 213:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     copy(char_type* __s1, const char_type* __s2, std::size_t __n)
 214:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 215:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // NB: Inline std::copy so no recursive dependencies.
 216:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       std::copy(__s2, __s2 + __n, __s1);
 217:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __s1;
 218:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 219:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 220:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 221:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX20_CONSTEXPR
 222:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     typename char_traits<_CharT>::char_type*
 223:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     char_traits<_CharT>::
 224:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     assign(char_type* __s, std::size_t __n, char_type __a)
 225:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 226:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // NB: Inline std::fill_n so no recursive dependencies.
 227:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       std::fill_n(__s, __n, __a);
 228:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __s;
 229:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 230:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 231:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** _GLIBCXX_END_NAMESPACE_VERSION
 232:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** } // namespace
 233:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 234:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
 235:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** {
 236:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 237:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 238:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 239:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 241:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Unofficial macro indicating P1032R1 support in C++20
 242:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # define __cpp_lib_constexpr_char_traits 201811L
 243:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #else
 244:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** // Unofficial macro indicating P0426R1 support in C++17
 245:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** # define __cpp_lib_constexpr_char_traits 201611L
 246:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 247:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 248:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
 249:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a NULL-terminated
 250:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  string are known at compile time.
ARM GAS  /tmp/ccRLs6kU.s 			page 26


 251:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @param  __s  The string.
 252:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 253:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 254:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    */
 255:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 256:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX_ALWAYS_INLINE constexpr bool
 257:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     __constant_string_p(const _CharT* __s)
 258:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 259:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 260:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       (void) __s;
 261:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // In constexpr contexts all strings should be constant.
 262:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 263:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #else
 264:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       while (__builtin_constant_p(*__s) && *__s)
 265:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	__s++;
 266:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __builtin_constant_p(*__s);
 267:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 268:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 269:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 270:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
 271:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief Determine whether the characters of a character array are
 272:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  known at compile time.
 273:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @param  __a  The character array.
 274:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @param  __n  Number of characters.
 275:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 276:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  Assumes that _CharT is a built-in character type.
 277:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    */
 278:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<typename _CharT>
 279:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     _GLIBCXX_ALWAYS_INLINE constexpr bool
 280:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     __constant_char_array_p(const _CharT* __a, size_t __n)
 281:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 282:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 283:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       (void) __a;
 284:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       (void) __n;
 285:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       // In constexpr contexts all character arrays should be constant.
 286:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __builtin_is_constant_evaluated();
 287:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #else
 288:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       size_t __i = 0;
 289:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       while (__i < __n && __builtin_constant_p(__a[__i]))
 290:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	__i++;
 291:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       return __i == __n;
 292:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 293:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     }
 294:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 295:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 296:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   // 21.1
 297:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /**
 298:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @brief  Basis for explicit traits specializations.
 299:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 300:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  @note  For any given actual character type, this definition is
 301:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  probably wrong.  Since this is just a thin wrapper around
 302:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  __gnu_cxx::char_traits, it is possible to achieve a more
 303:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  appropriate definition by specializing __gnu_cxx::char_traits.
 304:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *
 305:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/strings.html#strings.string.character_typ
 306:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  for advice on how to make use of this class for @a unusual character
 307:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****    *  types. Also, check out include/ext/pod_char_traits.h.
ARM GAS  /tmp/ccRLs6kU.s 			page 27


 308:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   */
 309:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<class _CharT>
 310:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct char_traits : public __gnu_cxx::char_traits<_CharT>
 311:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     { };
 312:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 313:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 314:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   /// 21.1.3.1  char_traits specializations
 315:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****   template<>
 316:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     struct char_traits<char>
 317:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****     {
 318:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef char              char_type;
 319:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef int               int_type;
 320:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef streampos         pos_type;
 321:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef streamoff         off_type;
 322:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       typedef mbstate_t         state_type;
 323:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cpp_lib_three_way_comparison
 324:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       using comparison_category = strong_ordering;
 325:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 326:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 327:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR void
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 330:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 331:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 332:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 333:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { return __c1 == __c2; }
 334:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 335:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX_CONSTEXPR bool
 336:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
 337:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 338:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	// LWG 467.
 339:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return (static_cast<unsigned char>(__c1)
 340:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 		< static_cast<unsigned char>(__c2));
 341:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 342:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR int
 344:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       compare(const char_type* __s1, const char_type* __s2, size_t __n)
 345:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 346:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 347:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return 0;
 348:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 349:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 350:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s1, __n)
 351:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s2, __n))
 352:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  {
 353:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    for (size_t __i = 0; __i < __n; ++__i)
 354:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	      if (lt(__s1[__i], __s2[__i]))
 355:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 		return -1;
 356:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	      else if (lt(__s2[__i], __s1[__i]))
 357:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 		return 1;
 358:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    return 0;
 359:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  }
 360:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 361:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return __builtin_memcmp(__s1, __s2, __n);
 362:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 363:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 364:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR size_t
ARM GAS  /tmp/ccRLs6kU.s 			page 28


 365:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       length(const char_type* __s)
 366:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 367:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 368:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__constant_string_p(__s))
 369:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::length(__s);
 370:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return __builtin_strlen(__s);
 372:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 373:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 374:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX17_CONSTEXPR const char_type*
 375:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       find(const char_type* __s, size_t __n, const char_type& __a)
 376:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 377:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 378:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return 0;
 379:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #if __cplusplus >= 201703L
 380:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__builtin_constant_p(__n)
 381:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __builtin_constant_p(__a)
 382:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	    && __constant_char_array_p(__s, __n))
 383:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
 384:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 385:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
 386:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 387:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 389:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       move(char_type* __s1, const char_type* __s2, size_t __n)
 390:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 391:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 392:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 393:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 394:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (std::is_constant_evaluated())
 395:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::move(__s1, __s2, __n);
 396:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 397:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
 398:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 399:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 400:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       static _GLIBCXX20_CONSTEXPR char_type*
 401:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       copy(char_type* __s1, const char_type* __s2, size_t __n)
 333              		.loc 5 401 7 is_stmt 1 view .LVU60
 334              	.LBB376:
 402:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 403:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (__n == 0)
 335              		.loc 5 403 2 view .LVU61
 336 0018 A4B1     		cbz	r4, .L22
 404:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __s1;
 405:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #ifdef __cpp_lib_is_constant_evaluated
 406:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	if (std::is_constant_evaluated())
 407:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	  return __gnu_cxx::char_traits<char_type>::copy(__s1, __s2, __n);
 408:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** #endif
 409:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
 337              		.loc 5 409 2 view .LVU62
 338              		.loc 5 409 49 is_stmt 0 view .LVU63
 339 001a 2246     		mov	r2, r4
 340 001c 3146     		mov	r1, r6
 341 001e FFF7FEFF 		bl	memcpy
 342              	.LVL23:
 343              		.loc 5 409 66 view .LVU64
 344 0022 0FE0     		b	.L22
ARM GAS  /tmp/ccRLs6kU.s 			page 29


 345              	.LVL24:
 346              	.L24:
 347              		.loc 5 409 66 view .LVU65
 348              	.LBE376:
 349              	.LBE375:
 350              	.LBE374:
 351              	.LBE373:
 352              	.LBE372:
 211:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  std::__throw_logic_error(__N("basic_string::"
 353              		.loc 2 211 42 discriminator 1 view .LVU66
 354 0024 9142     		cmp	r1, r2
 355 0026 F0D0     		beq	.L19
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 356              		.loc 2 212 28 view .LVU67
 357 0028 0A48     		ldr	r0, .L27
 358              	.LVL25:
 212:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 				       "_M_construct null not valid"));
 359              		.loc 2 212 28 view .LVU68
 360 002a FFF7FEFF 		bl	_ZSt19__throw_logic_errorPKc
 361              	.LVL26:
 362              	.L25:
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_data(_M_create(__dnew, size_type(0)));
 363              		.loc 2 219 13 view .LVU69
 364 002e 0022     		movs	r2, #0
 365              	.LVL27:
 366              		.loc 2 219 13 view .LVU70
 367 0030 01A9     		add	r1, sp, #4
 368              	.LVL28:
 369              		.loc 2 219 13 view .LVU71
 370 0032 2846     		mov	r0, r5
 371              	.LVL29:
 372              		.loc 2 219 13 view .LVU72
 373 0034 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
 374              	.LVL30:
 375              	.LBB381:
 376              	.LBI381:
 186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dataplus._M_p = __p; }
 377              		.loc 4 186 7 is_stmt 1 view .LVU73
 378              	.LBB382:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 379              		.loc 4 187 26 is_stmt 0 view .LVU74
 380 0038 2860     		str	r0, [r5]
 381              	.LVL31:
 187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 382              		.loc 4 187 26 view .LVU75
 383              	.LBE382:
 384              	.LBE381:
 220:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_capacity(__dnew);
 385              		.loc 2 220 17 view .LVU76
 386 003a 019B     		ldr	r3, [sp, #4]
 387              	.LVL32:
 388              	.LBB383:
 389              	.LBI383:
 218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_allocated_capacity = __capacity; }
 390              		.loc 4 218 7 is_stmt 1 view .LVU77
 391              	.LBB384:
ARM GAS  /tmp/ccRLs6kU.s 			page 30


 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 392              		.loc 4 219 31 is_stmt 0 view .LVU78
 393 003c AB60     		str	r3, [r5, #8]
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 394              		.loc 4 219 45 view .LVU79
 395 003e E8E7     		b	.L20
 396              	.LVL33:
 397              	.L26:
 219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 398              		.loc 4 219 45 view .LVU80
 399              	.LBE384:
 400              	.LBE383:
 401              	.LBB385:
 402              	.LBB380:
 403              	.LBB379:
 404              	.LBB377:
 405              	.LBI377:
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 406              		.loc 5 328 7 is_stmt 1 view .LVU81
 407              	.LBB378:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 408              		.loc 5 329 9 view .LVU82
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 409              		.loc 5 329 16 is_stmt 0 view .LVU83
 410 0040 3378     		ldrb	r3, [r6]	@ zero_extendqisi2
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 411              		.loc 5 329 14 view .LVU84
 412 0042 0370     		strb	r3, [r0]
 413              	.LVL34:
 414              	.L22:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 415              		.loc 5 329 14 view .LVU85
 416              	.LBE378:
 417              	.LBE377:
 418              	.LBE379:
 419              	.LBE380:
 420              	.LBE385:
 221:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 223:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	// Check for out_of_range and length_error exceptions.
 224:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__try
 225:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 226:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	__catch(...)
 227:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  {
 228:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    _M_dispose();
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	    __throw_exception_again;
 230:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	  }
 231:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 
 232:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc **** 	_M_set_length(__dnew);
 421              		.loc 2 232 15 view .LVU86
 422 0044 019B     		ldr	r3, [sp, #4]
 423              	.LVL35:
 424              	.LBB386:
 425              	.LBI386:
 222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 426              		.loc 4 222 7 is_stmt 1 view .LVU87
 427              	.LBB387:
ARM GAS  /tmp/ccRLs6kU.s 			page 31


 428              	.LBB388:
 429              	.LBI388:
 190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_string_length = __length; }
 430              		.loc 4 190 7 view .LVU88
 431              	.LBB389:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 432              		.loc 4 191 26 is_stmt 0 view .LVU89
 433 0046 6B60     		str	r3, [r5, #4]
 434              	.LVL36:
 191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 435              		.loc 4 191 26 view .LVU90
 436              	.LBE389:
 437              	.LBE388:
 438              	.LBB390:
 439              	.LBI390:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 440              		.loc 4 194 7 is_stmt 1 view .LVU91
 441              	.LBB391:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 442              		.loc 4 195 28 is_stmt 0 view .LVU92
 443 0048 2A68     		ldr	r2, [r5]
 444              	.LVL37:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 445              		.loc 4 195 28 view .LVU93
 446              	.LBE391:
 447              	.LBE390:
 448              	.LBB392:
 449              	.LBI392:
 328:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       { __c1 = __c2; }
 450              		.loc 5 328 7 is_stmt 1 view .LVU94
 451              	.LBB393:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 452              		.loc 5 329 9 view .LVU95
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 453              		.loc 5 329 14 is_stmt 0 view .LVU96
 454 004a 0021     		movs	r1, #0
 455 004c D154     		strb	r1, [r2, r3]
 456              	.LVL38:
 329:/usr/include/newlib/c++/10.3.1/bits/char_traits.h **** 
 457              		.loc 5 329 14 view .LVU97
 458              	.LBE393:
 459              	.LBE392:
 460              	.LBE387:
 461              	.LBE386:
 233:/usr/include/newlib/c++/10.3.1/bits/basic_string.tcc ****       }
 462              		.loc 2 233 7 view .LVU98
 463 004e 02B0     		add	sp, sp, #8
 464              	.LCFI7:
 465              		.cfi_def_cfa_offset 16
 466              		@ sp needed
 467 0050 70BD     		pop	{r4, r5, r6, pc}
 468              	.LVL39:
 469              	.L28:
 470              		.loc 2 233 7 view .LVU99
 471 0052 00BF     		.align	2
 472              	.L27:
 473 0054 00000000 		.word	.LC1
ARM GAS  /tmp/ccRLs6kU.s 			page 32


 474              		.cfi_endproc
 475              	.LFE1848:
 476              		.fnend
 478              		.section	.text._ZNSt12_Vector_baseIcSaIcEED2Ev,"axG",%progbits,_ZNSt12_Vector_baseIcSaIcEED5Ev,com
 479              		.align	1
 480              		.weak	_ZNSt12_Vector_baseIcSaIcEED2Ev
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 484              		.fpu fpv4-sp-d16
 486              	_ZNSt12_Vector_baseIcSaIcEED2Ev:
 487              		.fnstart
 488              	.LVL40:
 489              	.LFB1899:
 490              		.file 6 "/usr/include/newlib/c++/10.3.1/bits/stl_vector.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
ARM GAS  /tmp/ccRLs6kU.s 			page 33


  43:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  65:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus > 201703L
  66:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # include <compare>
  67:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  68:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #include <debug/assertions.h>
  70:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  71:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** extern "C" void
  73:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  const void*, const void*);
  75:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
  76:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** {
  79:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  82:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     struct _Vector_base
  85:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     {
  86:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        	pointer;
  90:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  91:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Vector_impl_data
  92:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
  93:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_start;
  94:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_finish;
  95:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  96:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
ARM GAS  /tmp/ccRLs6kU.s 			page 34


 100:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 101:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 102:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 107:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 109:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 111:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 112:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 115:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 116:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 117:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 119:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // information used by TBAA.
 121:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_copy_data(__x);
 124:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 126:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
 127:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Vector_impl
 129:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 131:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type()
 134:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 135:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 139:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 141:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 146:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 150:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 151:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 154:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 155:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 156:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
ARM GAS  /tmp/ccRLs6kU.s 			page 35


 157:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  struct _Asan
 159:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 160:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 162:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 163:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 168:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Grow
 169:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 170:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 172:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 173:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  };
 174:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 175:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename _Up>
 177:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 179:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 181:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 182:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 185:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 187:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
 190:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 191:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 192:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 195:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 196:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    static void
 200:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 202:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      if (__impl._M_start)
 203:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
 205:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 206:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Reinit
 208:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 209:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      {
 211:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      }
ARM GAS  /tmp/ccRLs6kU.s 			page 36


 214:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 215:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ~_Reinit()
 216:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      {
 217:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		if (_M_impl._M_start)
 219:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    _M_impl._M_finish);
 221:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      }
 222:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 223:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 225:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 226:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 229:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 230:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 231:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    struct _Grow
 233:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
 234:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 238:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 242:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 243:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 246:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    private:
 247:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      size_type _M_n;
 249:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    };
 250:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  };
 251:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 252:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
ARM GAS  /tmp/ccRLs6kU.s 			page 37


 271:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 272:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 273:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 274:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 275:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Tp_alloc_type&
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 278:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 279:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const _Tp_alloc_type&
 280:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 282:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 283:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       allocator_type
 284:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 287:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 288:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base() = default;
 289:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 290:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base() { }
 291:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 292:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 293:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a) { }
 295:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 296:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 297:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n)
 299:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl()
 300:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 301:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 302:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 305:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 306:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 307:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 308:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 310:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 311:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 315:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 317:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 318:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else
 321:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 322:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _M_create_storage(__n);
 324:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
 325:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 326:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 327:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 38


 328:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 331:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 332:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 491              		.loc 6 333 7 is_stmt 1 view -0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 0
 494              		@ frame_needed = 0, uses_anonymous_args = 0
 495              		.loc 6 333 7 is_stmt 0 view .LVU101
 496 0000 10B5     		push	{r4, lr}
 497              	.LCFI8:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 4, -8
 500              		.cfi_offset 14, -4
 501 0002 0446     		mov	r4, r0
 502              	.LBB405:
 334:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 503              		.loc 6 335 15 view .LVU102
 504 0004 0068     		ldr	r0, [r0]
 505              	.LVL41:
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 506              		.loc 6 336 17 view .LVU103
 507 0006 A168     		ldr	r1, [r4, #8]
 508              		.loc 6 336 35 view .LVU104
 509 0008 091A     		subs	r1, r1, r0
 510              	.LVL42:
 511              	.LBB406:
 512              	.LBI406:
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 338:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 339:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 340:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Vector_impl _M_impl;
 341:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 342:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       pointer
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_allocate(size_t __n)
 344:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 345:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 348:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 349:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 513              		.loc 6 350 7 is_stmt 1 view .LVU105
 514              	.LBB407:
 351:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 352:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__p)
 515              		.loc 6 353 2 is_stmt 0 view .LVU106
 516 000a 08B1     		cbz	r0, .L30
 517              	.LVL43:
 518              	.LBB408:
 519              	.LBI408:
 520              		.file 7 "/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h"
   1:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
ARM GAS  /tmp/ccRLs6kU.s 			page 39


   2:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****  */
  29:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  30:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  33:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #include <bits/stl_construct.h>
  34:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  35:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  36:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <bits/allocator.h>
  37:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <bits/ptr_traits.h>
  38:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # include <ext/numeric_traits.h>
  39:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
  40:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  41:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** {
  43:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  45:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  48:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   struct __allocator_traits_base
  49:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   {
  50:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  51:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  52:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  53:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  54:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  55:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  56:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  57:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  58:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   protected:
ARM GAS  /tmp/ccRLs6kU.s 			page 40


  59:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  60:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  61:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  62:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  63:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  64:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  65:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  66:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  67:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  68:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  69:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  70:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  71:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  72:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  73:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  74:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  75:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   };
  76:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  78:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using __alloc_rebind
  79:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  80:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  81:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /**
  82:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  83:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * @ingroup allocators
  84:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   */
  85:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
  86:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  87:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
  88:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator type
  89:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  90:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocated type
  91:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  92:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
  93:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
  94:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  95:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
  96:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  97:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
  98:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  99:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 100:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     private:
 101:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 102:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 103:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Ptr
 104:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 105:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 106:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 107:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 109:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 110:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 111:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 112:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 113:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 114:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 115:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
ARM GAS  /tmp/ccRLs6kU.s 			page 41


 116:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Diff
 117:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 118:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 119:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 120:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 121:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 122:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 123:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 124:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 125:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 126:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 127:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 128:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 129:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 130:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 131:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     public:
 132:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 133:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 134:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 135:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 136:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 137:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 138:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 139:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 141:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 142:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 143:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 144:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 145:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 146:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 147:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 148:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 149:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 150:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 151:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 152:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 153:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 154:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 155:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 156:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 157:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 158:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 159:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 160:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 161:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 162:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 163:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 164:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 165:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   The allocator's size type
 166:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 167:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 168:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 169:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 170:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 171:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 172:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
ARM GAS  /tmp/ccRLs6kU.s 			page 42


 173:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 174:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 175:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 176:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 177:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 178:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 179:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 180:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 181:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 182:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 183:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 184:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 185:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 186:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 187:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 188:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 189:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 190:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 191:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 192:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 193:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 194:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 195:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 196:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap
 197:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 198:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 199:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 200:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 201:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 202:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 203:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 204:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 205:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using is_always_equal
 206:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 207:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 208:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 209:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 210:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 211:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 212:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 213:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     private:
 214:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 215:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 216:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 217:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 218:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 219:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 220:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 221:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr pointer
 222:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 223:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 224:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 225:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 226:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	struct __construct_helper
 227:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 228:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 229:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
ARM GAS  /tmp/ccRLs6kU.s 			page 43


 230:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 231:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    static true_type __test(int);
 232:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 233:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  template<typename>
 234:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    static false_type __test(...);
 235:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 236:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 237:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	};
 238:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 239:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 240:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using __has_construct
 241:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 242:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 243:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 245:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 246:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 247:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 248:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 249:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 251:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 252:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 253:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 254:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 255:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 256:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 257:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 258:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 259:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 260:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 261:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 262:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 263:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 264:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 265:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 266:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 267:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 268:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 269:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 270:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 271:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 272:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 273:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 274:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ std::_Destroy(__p); }
 275:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 276:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 277:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 278:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 279:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 280:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 281:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 282:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 283:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr size_type
 284:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 285:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 286:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  /tmp/ccRLs6kU.s 			page 44


 287:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 288:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 289:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	    / sizeof(value_type);
 290:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 291:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 292:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 293:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr auto
 294:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 295:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 296:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 297:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 298:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 299:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static constexpr _Alloc2
 300:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 301:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ return __a; }
 302:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 303:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     public:
 304:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 305:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 306:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 307:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 308:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 309:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 310:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 311:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 312:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 313:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 314:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 315:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 316:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 317:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 318:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 319:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 320:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 321:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 322:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 323:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 324:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 325:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 326:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 327:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 328:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 329:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 330:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 331:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 332:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 333:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 334:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 335:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 336:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 337:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 338:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 339:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 340:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 341:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 342:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 343:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
ARM GAS  /tmp/ccRLs6kU.s 			page 45


 344:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 345:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 346:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 347:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 348:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 349:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 350:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 351:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 352:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  arguments @a __args...
 353:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 354:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 355:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 356:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 357:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 358:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 359:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 360:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 361:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 362:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 363:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 364:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 365:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 366:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 367:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 368:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 369:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 370:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 371:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 372:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 373:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 374:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 375:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 376:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 377:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 378:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 379:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 380:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 381:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 382:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 383:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 384:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 385:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 386:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
 387:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 389:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 390:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 391:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 392:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 393:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 394:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 395:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 396:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 397:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 398:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 399:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     };
 400:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 46


 401:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus > 201703L
 402:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 403:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 404:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 405:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 406:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 407:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 408:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 409:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator type
 410:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 411:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 412:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocated type
 413:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using value_type = _Tp;
 414:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 415:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's pointer type.
 416:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using pointer = _Tp*;
 417:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 418:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 419:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 420:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 421:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 422:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using void_pointer = void*;
 423:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 424:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 425:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 426:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 427:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's difference type
 428:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 429:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 430:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// The allocator's size type
 431:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using size_type = std::size_t;
 432:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 433:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 434:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 435:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 437:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 438:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 440:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 441:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 442:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 443:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using is_always_equal = true_type;
 444:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 445:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 446:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 447:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 448:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 449:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 450:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 451:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 452:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 453:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 454:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 455:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 456:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 457:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
ARM GAS  /tmp/ccRLs6kU.s 			page 47


 458:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 460:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 461:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 462:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 463:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 464:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 465:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 466:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 467:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 468:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 469:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 470:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 471:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 472:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 473:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 474:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       {
 475:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 476:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.allocate(__n, __hint);
 477:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 478:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.allocate(__n);
 479:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 480:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       }
 481:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 482:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 483:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 484:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 485:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 486:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 487:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 488:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 489:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 490:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 521              		.loc 7 491 7 is_stmt 1 view .LVU107
 522              	.LBB409:
 523              	.LBB410:
 524              	.LBI410:
 525              		.file 8 "/usr/include/newlib/c++/10.3.1/ext/new_allocator.h"
   1:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
   3:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** //
   5:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  11:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  16:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
ARM GAS  /tmp/ccRLs6kU.s 			page 48


  19:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  20:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  25:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****  */
  28:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  29:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  32:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <new>
  34:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  39:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  40:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** {
  42:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  44:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****   /**
  45:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per C++03 [20.4.1].
  46:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @ingroup allocators
  47:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *
  48:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *    - all allocation calls operator new
  50:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  51:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *
  52:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****    */
  54:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****   template<typename _Tp>
  55:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     class new_allocator
  56:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     {
  57:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****     public:
  58:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp        value_type;
  59:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::size_t     size_type;
  60:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
  62:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp*       pointer;
  63:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  64:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef _Tp&       reference;
  65:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  66:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  67:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  68:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	struct rebind
  69:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  71:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  72:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
ARM GAS  /tmp/ccRLs6kU.s 			page 49


  76:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  77:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  78:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  81:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  84:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  85:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  88:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus <= 201703L
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  91:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       pointer
  92:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
  95:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       const_pointer
  96:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
  99:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 100:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 102:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 105:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
 106:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 // _GLIBCXX_RESOLVE_LIB_DEFECTS
 107:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 // 3308. std::allocator<void>().allocate(n)
 108:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	 static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 109:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 110:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (__n > this->_M_max_size())
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 113:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 114:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 115:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 116:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  {
 117:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 118:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 119:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  }
 120:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 122:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 123:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 124:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 125:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       void
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       deallocate(_Tp* __p, size_type __t)
 526              		.loc 8 126 7 view .LVU108
 527              	.LBB411:
 127:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 128:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 129:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 130:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  {
ARM GAS  /tmp/ccRLs6kU.s 			page 50


 131:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    ::operator delete(__p,
 132:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** # if __cpp_sized_deallocation
 133:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			      __t * sizeof(_Tp),
 134:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** # endif
 135:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 136:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	    return;
 137:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  }
 138:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** #endif
 139:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	::operator delete(__p
 528              		.loc 8 139 19 is_stmt 0 view .LVU109
 529 000c FFF7FEFF 		bl	_ZdlPvj
 530              	.LVL44:
 531              	.L30:
 532              		.loc 8 139 19 view .LVU110
 533              	.LBE411:
 534              	.LBE410:
 535              	.LBE409:
 536              	.LBE408:
 537              	.LBE407:
 538              	.LBE406:
 539              	.LBB412:
 540              	.LBI412:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 541              		.loc 6 128 14 is_stmt 1 view .LVU111
 542              	.LBB413:
 543              	.LBI413:
 544              		.file 9 "/usr/include/newlib/c++/10.3.1/bits/allocator.h"
   1:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *
  29:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
ARM GAS  /tmp/ccRLs6kU.s 			page 51


  31:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  */
  37:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  38:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****  */
  42:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  43:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  46:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #include <type_traits>
  50:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
  51:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  52:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  54:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** {
  56:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  58:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /**
  59:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @addtogroup allocators
  60:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @{
  61:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    */
  62:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  63:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // but then it would have a non-trivial default ctor and dtor, which
  65:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // would be an ABI change. So C++20 still uses the allocator<void> explicit
  66:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // specialization, with the historical ABI properties, but with the same
  67:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   // members that are present in the primary template.
  68:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if ! _GLIBCXX_INLINE_VERSION
  70:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /// allocator<void> specialization.
  71:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   template<>
  72:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     class allocator<void>
  73:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     {
  74:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     public:
  75:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef void        value_type;
  76:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef size_t      size_type;
  77:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  78:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus <= 201703L
  80:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // These were removed for C++20.
  81:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef void*       pointer;
  82:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const void* const_pointer;
  83:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  84:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
  85:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	struct rebind
  86:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  87:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
ARM GAS  /tmp/ccRLs6kU.s 			page 52


  88:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  89:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  90:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  91:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  92:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  93:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  94:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
  95:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  96:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus > 201703L
  97:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator() = default;
  98:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
  99:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up>
 100:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	constexpr
 101:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 102:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 103:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 104:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // No deallocate member because it would be undefined to call it
 105:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // with any pointer which wasn't obtained from allocate.
 106:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 107:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #else // ! C++20
 108:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // allocator_traits<allocator<void>> uses construct and destroy.
 109:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up, typename... _Args>
 110:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	void
 111:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 112:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 113:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 114:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 115:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Up>
 116:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	void
 117:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	destroy(_Up* __p)
 118:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 119:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ __p->~_Up(); }
 120:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // C++17
 121:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // C++11
 122:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     };
 123:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif // ! _GLIBCXX_INLINE_VERSION
 124:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 125:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   /**
 126:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 127:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *
 128:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 129:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  for further details.
 130:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *
 131:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 132:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****    */
 133:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****   template<typename _Tp>
 134:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 135:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     {
 136:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****     public:
 137:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp        value_type;
 138:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef size_t     size_type;
 139:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 140:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 141:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus <= 201703L
 142:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // These were removed for C++20.
 143:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp*       pointer;
 144:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const _Tp* const_pointer;
ARM GAS  /tmp/ccRLs6kU.s 			page 53


 145:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef _Tp&       reference;
 146:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef const _Tp& const_reference;
 147:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 148:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
 149:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	struct rebind
 150:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 151:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 152:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 153:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 154:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 155:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 156:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 157:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 158:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
 159:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 160:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 161:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 162:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 163:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 165:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 168:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 169:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 170:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 171:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       // Avoid implicit deprecation.
 172:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       allocator& operator=(const allocator&) = default;
 173:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 174:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 175:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       template<typename _Tp1>
 176:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	_GLIBCXX20_CONSTEXPR
 177:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 178:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 179:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #if __cpp_constexpr_dynamic_alloc
 180:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       constexpr
 181:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** #endif
 182:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 545              		.loc 9 182 7 view .LVU112
 546              	.LBB414:
 547              	.LBI414:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 548              		.loc 8 89 7 view .LVU113
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 549              		.loc 8 89 7 is_stmt 0 view .LVU114
 550              	.LBE414:
 551              	.LBE413:
 552              	.LBE412:
 553              	.LBE405:
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 554              		.loc 6 337 7 view .LVU115
 555 0010 2046     		mov	r0, r4
 556 0012 10BD     		pop	{r4, pc}
 337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 557              		.loc 6 337 7 view .LVU116
 558              		.cfi_endproc
 559              	.LFE1899:
ARM GAS  /tmp/ccRLs6kU.s 			page 54


 560              		.cantunwind
 561              		.fnend
 563              		.weak	_ZNSt12_Vector_baseIcSaIcEED1Ev
 564              		.thumb_set _ZNSt12_Vector_baseIcSaIcEED1Ev,_ZNSt12_Vector_baseIcSaIcEED2Ev
 565              		.section	.rodata._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_.
 566              		.align	2
 567              	.LC2:
 568 0000 63616E6E 		.ascii	"cannot create std::vector larger than max_size()\000"
 568      6F742063 
 568      72656174 
 568      65207374 
 568      643A3A76 
 569              		.section	.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,"a
 570              		.align	1
 571              		.weak	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 572              		.syntax unified
 573              		.thumb
 574              		.thumb_func
 575              		.fpu fpv4-sp-d16
 577              	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:
 578              		.fnstart
 579              	.LVL45:
 580              	.LFB1748:
 581              		.file 10 "Peripheral/Inc/serial_printf.hpp"
   1:Peripheral/Inc/serial_printf.hpp **** #pragma once
   2:Peripheral/Inc/serial_printf.hpp **** #include <string>
   3:Peripheral/Inc/serial_printf.hpp **** #include <vector>
   4:Peripheral/Inc/serial_printf.hpp **** #include <cstdio>
   5:Peripheral/Inc/serial_printf.hpp **** #include "usart.h"
   6:Peripheral/Inc/serial_printf.hpp **** 
   7:Peripheral/Inc/serial_printf.hpp **** #define LOG_INFO "[INFO]  "
   8:Peripheral/Inc/serial_printf.hpp **** #define LOG_DEBUG "[DEBUG] "
   9:Peripheral/Inc/serial_printf.hpp **** #define LOG_ERROR "[ERROR] "
  10:Peripheral/Inc/serial_printf.hpp **** #define LOG_WARNING "[WARN]  "
  11:Peripheral/Inc/serial_printf.hpp **** 
  12:Peripheral/Inc/serial_printf.hpp **** #define DEBUG_MODE true
  13:Peripheral/Inc/serial_printf.hpp **** 
  14:Peripheral/Inc/serial_printf.hpp **** template <typename... Args>
  15:Peripheral/Inc/serial_printf.hpp **** void serial_printf(const std::string &fmt, Args... args)
 582              		.loc 10 15 6 is_stmt 1 view -0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 16
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              		.loc 10 15 6 is_stmt 0 view .LVU118
 587 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 588              		.save {r4, r5, r6, r7, lr}
 589              	.LCFI9:
 590              		.cfi_def_cfa_offset 20
 591              		.cfi_offset 4, -20
 592              		.cfi_offset 5, -16
 593              		.cfi_offset 6, -12
 594              		.cfi_offset 7, -8
 595              		.cfi_offset 14, -4
 596              		.pad #20
 597 0002 85B0     		sub	sp, sp, #20
 598              	.LCFI10:
 599              		.cfi_def_cfa_offset 40
ARM GAS  /tmp/ccRLs6kU.s 			page 55


 600 0004 0746     		mov	r7, r0
 601              	.LVL46:
 602              	.LBB497:
 603              	.LBI497:
 405:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT
 406:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _S_copy(__p, __k1, __k2 - __k1); }
 407:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 408:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       static int
 409:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT
 410:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 411:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const difference_type __d = difference_type(__n1 - __n2);
 412:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 413:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__d > __gnu_cxx::__numeric_traits<int>::__max)
 414:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__max;
 415:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
 416:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return __gnu_cxx::__numeric_traits<int>::__min;
 417:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 418:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return int(__d);
 419:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 420:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 421:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 422:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_assign(const basic_string&);
 423:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 424:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 425:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
 426:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		size_type __len2);
 427:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 428:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 429:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_erase(size_type __pos, size_type __n);
 430:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 431:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
 432:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Construct/copy/destroy:
 433:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // NB: We overload ctors in some cases instead of using default
 434:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // arguments, per 17.4.4.4 para. 2 item 2.
 435:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 437:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Default constructor creates an empty string.
 438:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 439:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string()
 440:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Alloc>::value)
 441:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 442:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 443:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 444:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 445:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct an empty string using allocator @a a.
 446:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 447:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       explicit
 448:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT
 449:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 450:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
 451:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 452:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 453:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string with copy of value of @a __str.
 454:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 455:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 456:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str)
 457:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(),
ARM GAS  /tmp/ccRLs6kU.s 			page 56


 458:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
 459:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
 460:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 461:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 462:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 2583. no way to supply an allocator for basic_string(str, pos)
 463:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 464:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 465:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 466:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 467:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 468:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 469:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 470:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 471:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 472:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 473:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 474:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 475:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, npos));
 476:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 477:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 478:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 479:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 480:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 481:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 482:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 483:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 484:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 485:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   size_type __n)
 486:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data())
 487:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 488:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start = __str._M_data()
 489:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  + __str._M_check(__pos, "basic_string::basic_string");
 490:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 491:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 492:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 493:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 494:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a substring.
 495:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 496:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  Index of first character to copy from.
 497:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 498:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use.
 499:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 500:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, size_type __pos,
 501:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   size_type __n, const _Alloc& __a)
 502:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 503:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 504:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __start
 505:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  = __str._M_data() + __str._M_check(__pos, "string::string");
 506:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__start, __start + __str._M_limit(__pos, __n));
 507:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 508:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 509:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 510:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string initialized by a character %array.
 511:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source character %array.
 512:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters to copy.
 513:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 514:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
ARM GAS  /tmp/ccRLs6kU.s 			page 57


 515:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  NB: @a __s must have at least @a __n characters, &apos;\\0&apos;
 516:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  has no special meaning.
 517:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 518:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, size_type __n,
 519:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		   const _Alloc& __a = _Alloc())
 520:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 521:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__s, __s + __n); }
 522:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 523:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 524:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a C string.
 525:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source C string.
 526:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 527:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 528:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 529:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 530:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 531:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 532:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 534:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 535:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const _CharT* __end = __s ? __s + traits_type::length(__s)
 537:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  // We just need a non-null pointer here to get an exception:
 538:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  : reinterpret_cast<const _CharT*>(__alignof__(_CharT));
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_construct(__s, __end, random_access_iterator_tag());
 540:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 541:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 543:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as multiple characters.
 544:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters.
 545:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Character to use.
 546:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 547:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 548:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
 549:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 550:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 3076. basic_string CTAD ambiguity
 551:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename = _RequireAllocator<_Alloc>>
 552:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 553:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 554:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 555:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__n, __c); }
 556:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 557:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 558:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 559:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Move construct string.
 560:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 561:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 562:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The newly-created string contains the exact contents of @a __str.
 563:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
 564:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        **/
 565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str) noexcept
 566:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
 567:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 569:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 570:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 571:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
ARM GAS  /tmp/ccRLs6kU.s 			page 58


 572:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 573:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 574:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 575:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 577:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 578:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 579:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// Must use _M_length() here not _M_set_length() because
 580:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// basic_stringbuf relies on writing into unallocated capacity so
 581:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// we mess up the contents if we put a '\0' in the string.
 582:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_length(__str.length());
 583:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str._M_data(__str._M_local_data());
 584:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str._M_set_length(0);
 585:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 586:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 587:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 588:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from an initializer %list.
 589:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list of characters.
 590:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 591:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 592:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
 593:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 594:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__l.begin(), __l.end()); }
 595:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 596:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(const basic_string& __str, const _Alloc& __a)
 597:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 598:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_construct(__str.begin(), __str.end()); }
 599:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 600:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string(basic_string&& __str, const _Alloc& __a)
 601:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_always_equal())
 602:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 603:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 604:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 605:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 606:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
 607:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _S_local_capacity + 1);
 608:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 609:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 610:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 611:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_always_equal()
 612:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || __str.get_allocator() == __a)
 613:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 614:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 615:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 616:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 617:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_data(__str._M_local_buf);
 618:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    __str._M_set_length(0);
 619:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 620:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
 621:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_construct(__str.begin(), __str.end());
 622:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 623:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 624:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
 625:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 626:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 627:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string as copy of a range.
 628:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __beg  Start of range.
ARM GAS  /tmp/ccRLs6kU.s 			page 59


 629:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __end  End of range.
 630:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 631:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 632:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 633:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InputIterator,
 634:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 635:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
 636:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _InputIterator>
 637:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 638:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string(_InputIterator __beg, _InputIterator __end,
 639:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 640:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: _M_dataplus(_M_local_data(), __a)
 641:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ _M_construct(__beg, __end); }
 642:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 643:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 644:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 645:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from a substring of a string_view.
 646:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __t   Source object convertible to string view.
 647:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos The index of the first character to copy from __t.
 648:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n   The number of characters to copy from __t.
 649:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a   Allocator to use.
 650:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 651:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 652:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, size_type __pos, size_type __n,
 653:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     const _Alloc& __a = _Alloc())
 654:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: basic_string(_S_to_string_view(__t).substr(__pos, __n), __a) { }
 655:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 656:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 657:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Construct string from a string_view.
 658:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __t  Source object convertible to string view.
 659:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __a  Allocator to use (default is default allocator).
 660:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 661:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp, typename = _If_sv<_Tp, void>>
 662:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	explicit
 663:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
 664:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: basic_string(__sv_wrapper(_S_to_string_view(__t)), __a) { }
 665:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
 666:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 667:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 668:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Destroy the string instance.
 669:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ~basic_string()
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 672:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 673:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 674:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Assign the value of @a str to this string.
 675:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 676:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 677:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 678:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(const basic_string& __str)
 679:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 680:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->assign(__str);
 681:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 682:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 683:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 684:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Copy contents of @a s into this string.
 685:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __s  Source null-terminated string.
ARM GAS  /tmp/ccRLs6kU.s 			page 60


 686:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 687:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 688:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(const _CharT* __s)
 689:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->assign(__s); }
 690:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 691:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 692:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string of length 1.
 693:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Source character.
 694:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 695:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Assigning to a character makes this string length 1 and
 696:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  (*this)[0] == @a c.
 697:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 698:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 699:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(_CharT __c)
 700:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 701:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->assign(1, __c);
 702:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 703:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 704:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 705:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 706:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 707:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Move assign the value of @a str to this string.
 708:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string.
 709:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 710:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The contents of @a str are moved into this string (without copying).
 711:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a str is a valid, but unspecified string.
 712:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        **/
 713:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 714:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // 2063. Contradictory requirements for string move assignment
 715:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 716:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(basic_string&& __str)
 717:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
 718:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 719:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
 720:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    && !_Alloc_traits::_S_always_equal()
 721:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    && _M_get_allocator() != __str._M_get_allocator())
 722:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 723:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // Destroy existing storage before replacing allocator.
 724:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_destroy(_M_allocated_capacity);
 725:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(_M_local_data());
 726:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_set_length(0);
 727:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 728:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// Replace allocator if POCMA is true.
 729:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
 730:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 731:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__str._M_is_local())
 732:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 733:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // We've always got room for a short string, just copy it.
 734:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (__str.size())
 735:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      this->_S_copy(_M_data(), __str._M_data(), __str.size());
 736:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_set_length(__str.size());
 737:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 738:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (_Alloc_traits::_S_propagate_on_move_assign()
 739:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || _Alloc_traits::_S_always_equal()
 740:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    || _M_get_allocator() == __str._M_get_allocator())
 741:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 742:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    // Just move the allocated pointer, our allocator can free it.
ARM GAS  /tmp/ccRLs6kU.s 			page 61


 743:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    pointer __data = nullptr;
 744:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    size_type __capacity;
 745:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (!_M_is_local())
 746:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
 747:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		if (_Alloc_traits::_S_always_equal())
 748:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
 749:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    // __str can reuse our existing storage.
 750:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    __data = _M_data();
 751:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    __capacity = _M_allocated_capacity;
 752:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
 753:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		else // __str can't use it, so free it.
 754:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  _M_destroy(_M_allocated_capacity);
 755:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
 756:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 757:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_data(__str._M_data());
 758:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_length(__str.length());
 759:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    _M_capacity(__str._M_allocated_capacity);
 760:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (__data)
 761:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
 762:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		__str._M_data(__data);
 763:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		__str._M_capacity(__capacity);
 764:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
 765:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    else
 766:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __str._M_data(__str._M_local_buf);
 767:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 768:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else // Need to do a deep copy
 769:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  assign(__str);
 770:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__str.clear();
 771:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 772:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 773:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 774:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 775:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from initializer %list.
 776:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __l  std::initializer_list.
 777:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 778:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
 779:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator=(initializer_list<_CharT> __l)
 780:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 781:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->assign(__l.begin(), __l.size());
 782:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
 783:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 784:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
 785:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 786:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
 787:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 788:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to string constructed from a string_view.
 789:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __svt  An object convertible to string_view.
 790:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 791:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****      template<typename _Tp>
 792:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        _If_sv<_Tp, basic_string&>
 793:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        operator=(const _Tp& __svt)
 794:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        { return this->assign(__svt); }
 795:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 796:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 797:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Convert to a string_view.
 798:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return A string_view.
 799:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
ARM GAS  /tmp/ccRLs6kU.s 			page 62


 800:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator __sv_type() const noexcept
 801:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return __sv_type(data(), size()); }
 802:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
 803:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 804:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Iterators:
 805:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 806:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points to the first character in
 807:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the %string.
 808:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 809:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
 810:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       begin() _GLIBCXX_NOEXCEPT
 811:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return iterator(_M_data()); }
 812:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 813:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 814:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 815:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 816:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 817:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 818:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       begin() const _GLIBCXX_NOEXCEPT
 819:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(_M_data()); }
 820:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 821:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 822:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write iterator that points one past the last
 823:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 824:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 825:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
 826:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       end() _GLIBCXX_NOEXCEPT
 827:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return iterator(_M_data() + this->size()); }
 828:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 829:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 830:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 831:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last character in the %string.
 832:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 833:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 834:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       end() const _GLIBCXX_NOEXCEPT
 835:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(_M_data() + this->size()); }
 836:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 837:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 838:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to the last
 839:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.  Iteration is done in reverse element
 840:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  order.
 841:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 842:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reverse_iterator
 843:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rbegin() _GLIBCXX_NOEXCEPT
 844:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return reverse_iterator(this->end()); }
 845:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 846:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 847:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 848:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 849:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  reverse element order.
 850:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 851:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 852:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 853:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 854:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 855:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 856:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reverse iterator that points to one before the
ARM GAS  /tmp/ccRLs6kU.s 			page 63


 857:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first character in the %string.  Iteration is done in reverse
 858:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element order.
 859:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 860:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reverse_iterator
 861:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rend() _GLIBCXX_NOEXCEPT
 862:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return reverse_iterator(this->begin()); }
 863:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 864:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 865:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 866:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 867:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 868:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 869:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 870:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       rend() const _GLIBCXX_NOEXCEPT
 871:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 872:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 873:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 874:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 875:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points to the first
 876:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character in the %string.
 877:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 878:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 879:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       cbegin() const noexcept
 880:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data()); }
 881:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 882:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 883:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) iterator that points one past the
 884:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last character in the %string.
 885:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 886:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_iterator
 887:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       cend() const noexcept
 888:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_iterator(this->_M_data() + this->size()); }
 889:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 890:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 891:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 892:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to the last character in the %string.  Iteration is done in
 893:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  reverse element order.
 894:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 895:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 896:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       crbegin() const noexcept
 897:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->end()); }
 898:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 899:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 900:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reverse iterator that points
 901:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  to one before the first character in the %string.  Iteration
 902:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is done in reverse element order.
 903:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 904:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reverse_iterator
 905:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       crend() const noexcept
 906:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return const_reverse_iterator(this->begin()); }
 907:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 908:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 909:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
 910:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Capacity:
 911:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 912:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  null-termination.
 913:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
ARM GAS  /tmp/ccRLs6kU.s 			page 64


 914:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size() const _GLIBCXX_NOEXCEPT
 915:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 916:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 917:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the number of characters in the string, not including any
 918:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  null-termination.
 919:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       length() const _GLIBCXX_NOEXCEPT
 921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_string_length; }
 922:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 923:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  Returns the size() of the largest possible %string.
 924:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 925:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       max_size() const _GLIBCXX_NOEXCEPT
 926:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
 927:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 928:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 929:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 930:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 931:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __c  Character to fill any new elements.
 932:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 933:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function will %resize the %string to the specified
 934:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  number of characters.  If the number is smaller than the
 935:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  %string's current size the %string is truncated, otherwise
 936:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the %string is extended and new elements are %set to @a __c.
 937:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 938:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 939:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       resize(size_type __n, _CharT __c);
 940:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 941:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 942:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Resizes the %string to the specified number of characters.
 943:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __n  Number of characters the %string should contain.
 944:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 945:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function will resize the %string to the specified length.  If
 946:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the new size is smaller than the %string's current size the %string
 947:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is truncated, otherwise the %string is extended and new characters
 948:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  are default-constructed.  For basic types such as char, this means
 949:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  setting them to 0.
 950:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 951:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 952:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       resize(size_type __n)
 953:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { this->resize(__n, _CharT()); }
 954:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 955:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
 956:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       ///  A non-binding request to reduce capacity() to size().
 957:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
 958:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       shrink_to_fit() noexcept
 959:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 960:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cpp_exceptions
 961:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (capacity() > size())
 962:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
 963:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    try
 964:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      { reserve(0); }
 965:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    catch(...)
 966:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      { }
 967:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
 968:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
 969:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 970:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
ARM GAS  /tmp/ccRLs6kU.s 			page 65


 971:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 972:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 973:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns the total number of characters that the %string can hold
 974:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  before needing to allocate more memory.
 975:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
 976:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
 977:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       capacity() const _GLIBCXX_NOEXCEPT
 978:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 979:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_is_local() ? size_type(_S_local_capacity)
 980:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	                     : _M_allocated_capacity;
 981:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 982:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 983:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
 984:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 985:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *          characters.
 986:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __res_arg  Number of characters required.
 987:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If @a __res_arg exceeds @c max_size().
 988:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 989:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function attempts to reserve enough memory for the
 990:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  %string to hold the specified number of characters.  If the
 991:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  number requested is more than max_size(), length_error is
 992:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
 993:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
 994:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The advantage of this function is that if optimal code is a
 995:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  necessity and the user can determine the string length that will be
 996:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  required, the user can reserve the memory in %advance, and thus
 997:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  prevent a possible reallocation of memory and copying of %string
 998:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  data.
 999:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1000:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1001:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reserve(size_type __res_arg = 0);
1002:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1003:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1004:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Erases the string, making it empty.
1005:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1006:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1007:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       clear() _GLIBCXX_NOEXCEPT
1008:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_set_length(0); }
1009:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1010:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1011:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns true if the %string is empty.  Equivalent to 
1012:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  <code>*this == ""</code>.
1013:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1014:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _GLIBCXX_NODISCARD bool
1015:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       empty() const _GLIBCXX_NOEXCEPT
1016:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->size() == 0; }
1017:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1018:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Element access:
1019:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1020:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1021:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1022:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read-only (constant) reference to the character.
1023:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1024:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1025:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1026:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1027:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  see at().)
ARM GAS  /tmp/ccRLs6kU.s 			page 66


1028:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1029:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1030:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT
1031:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1032:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1033:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1034:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1035:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1036:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1037:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Subscript access to the data contained in the %string.
1038:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __pos  The index of the character to access.
1039:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1040:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1041:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This operator allows for easy, array-style, data access.
1042:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Note that data access with this operator is unchecked and
1043:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range lookups are not defined. (For checked lookups
1044:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  see at().)
1045:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1046:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1047:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator[](size_type __pos)
1048:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1049:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         // Allow pos == size() both in C++98 mode, as v3 extension,
1050:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// and in C++11 mode.
1051:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(__pos <= size());
1052:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         // In pedantic mode be strict in C++98 mode.
1053:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__cplusplus >= 201103L || __pos < size());
1054:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__pos];
1055:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1056:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1057:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1058:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1059:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1060:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read-only (const) reference to the character.
1061:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1062:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1063:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
1064:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1065:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1066:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1067:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1068:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       at(size_type __n) const
1069:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1070:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n >= this->size())
1071:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1072:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1073:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1074:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __n, this->size());
1075:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1076:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1077:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1078:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1079:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Provides access to the data contained in the %string.
1080:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n The index of the character to access.
1081:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Read/write reference to the character.
1082:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
1083:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1084:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function provides for safer data access.  The parameter is
ARM GAS  /tmp/ccRLs6kU.s 			page 67


1085:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  first checked that it is in the range of the string.  The function
1086:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  throws out_of_range if the check fails.
1087:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1088:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1089:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       at(size_type __n)
1090:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1091:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n >= size())
1092:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __throw_out_of_range_fmt(__N("basic_string::at: __n "
1093:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu) >= this->size() "
1094:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				       "(which is %zu)"),
1095:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   __n, this->size());
1096:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_data()[__n];
1097:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1098:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1099:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the first
1102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       front() noexcept
1106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](0);
1109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the first
1113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       front() const noexcept
1117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](0);
1120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read/write reference to the data at the last
1124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  element of the %string.
1125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       reference
1127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       back() noexcept
1128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
1131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Returns a read-only (constant) reference to the data at the
1135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  last element of the %string.
1136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const_reference
1138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       back() const noexcept
1139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return operator[](this->size() - 1);
ARM GAS  /tmp/ccRLs6kU.s 			page 68


1142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Modifiers:
1146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(const basic_string& __str)
1153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__str); }
1154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(const _CharT* __s)
1162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__s); }
1163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a character.
1166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to append.
1167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(_CharT __c)
1171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->push_back(__c);
1173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to be appended.
1180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       operator+=(initializer_list<_CharT> __l)
1184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	operator+=(const _Tp& __svt)
1196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{ return this->append(__svt); }
1197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 69


1199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string to this string.
1201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const basic_string& __str)
1206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data(), __str.size()); }
1207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a substring.
1210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to append.
1211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str to append.
1212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a __pos is not a valid index.
1215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function appends @a __n characters from @a __str
1217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  starting at @a __pos to this string.  If @a __n is is larger
1218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  than the number of available characters in @a __str, the
1219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  remainder of @a __str is appended.
1220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const basic_string& __str, size_type __pos, size_type __n = npos)
1223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_append(__str._M_data()
1224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 + __str._M_check(__pos, "basic_string::append"),
1225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			 __str._M_limit(__pos, __n)); }
1226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C substring.
1229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const _CharT* __s, size_type __n)
1235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a C string.
1243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to append.
1244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(const _CharT* __s)
1248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __n = traits_type::length(__s);
1251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check_length(size_type(0), __n, "basic_string::append");
1252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_append(__s, __n);
1253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccRLs6kU.s 			page 70


1256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append multiple characters.
1257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to append.
1258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Appends __n copies of __c to this string.
1262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(size_type __n, _CharT __c)
1265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
1266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append an initializer_list of characters.
1270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to append.
1271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       append(initializer_list<_CharT> __l)
1275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->append(__l.begin(), __l.size()); }
1276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters.
1280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Appends characters in the range [__first,__last) to this string.
1285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
1293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         append(_InputIterator __first, _InputIterator __last)
1294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return this->replace(end(), end(), __first, __last); }
1295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a string_view.
1299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended.
1300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         append(const _Tp& __svt)
1305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
1306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           __sv_type __sv = __svt;
1307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           return this->append(__sv.data(), __sv.size());
1308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         }
1309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a range of characters from a string_view.
1312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  An object convertible to string_view to be appended from.
ARM GAS  /tmp/ccRLs6kU.s 			page 71


1313:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos The position in the string_view to append from.
1314:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n   The number of characters to append from the string_view.
1315:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1316:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1317:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1318:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         _If_sv<_Tp, basic_string&>
1319:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	append(const _Tp& __svt, size_type __pos, size_type __n = npos)
1320:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1321:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1322:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_append(__sv.data()
1323:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
1324:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1325:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1326:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1327:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1328:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1329:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Append a single character.
1330:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to append.
1331:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1332:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1333:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       push_back(_CharT __c)
1334:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1335:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __size = this->size();
1336:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__size + 1 > this->capacity())
1337:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_mutate(__size, size_type(0), 0, size_type(1));
1338:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	traits_type::assign(this->_M_data()[__size], __c);
1339:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_set_length(__size + 1);
1340:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1341:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1342:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1343:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1344:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1345:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1346:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1347:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1348:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const basic_string& __str)
1349:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1350:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1351:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (_Alloc_traits::_S_propagate_on_copy_assign())
1352:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  {
1353:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
1354:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		&& _M_get_allocator() != __str._M_get_allocator())
1355:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      {
1356:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		// Propagating allocator cannot free existing storage so must
1357:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		// deallocate it before replacing current allocator.
1358:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		if (__str.size() <= _S_local_capacity)
1359:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
1360:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1361:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_data(_M_local_data());
1362:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_set_length(0);
1363:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
1364:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		else
1365:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  {
1366:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    const auto __len = __str.size();
1367:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    auto __alloc = __str._M_get_allocator();
1368:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    // If this allocation throws there are no effects:
1369:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
ARM GAS  /tmp/ccRLs6kU.s 			page 72


1370:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_destroy(_M_allocated_capacity);
1371:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_data(__ptr);
1372:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_capacity(__len);
1373:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		    _M_set_length(__len);
1374:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		  }
1375:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      }
1376:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	    std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
1377:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  }
1378:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1379:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_assign(__str);
1380:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1381:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1382:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1383:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1384:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1385:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of another string.
1386:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param  __str  Source string to use.
1387:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1388:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1389:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets this string to the exact contents of @a __str.
1390:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __str is a valid, but unspecified string.
1391:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1392:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1393:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(basic_string&& __str)
1394:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       noexcept(_Alloc_traits::_S_nothrow_move())
1395:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1396:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1397:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	// 2063. Contradictory requirements for string move assignment
1398:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this = std::move(__str);
1399:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1400:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1401:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1402:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1403:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a substring of a string.
1404:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to use.
1405:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of the first character of str.
1406:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1407:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1408:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range if @a pos is not a valid index.
1409:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1410:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets this string to the substring of @a __str
1411:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  consisting of @a __n characters at @a __pos.  If @a __n is
1412:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is larger than the number of available characters in @a
1413:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __str, the remainder of @a __str is used.
1414:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1415:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1416:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const basic_string& __str, size_type __pos, size_type __n = npos)
1417:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace(size_type(0), this->size(), __str._M_data()
1418:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  + __str._M_check(__pos, "basic_string::assign"),
1419:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  __str._M_limit(__pos, __n)); }
1420:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1421:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1422:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a C substring.
1423:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1424:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to use.
1425:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1426:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
ARM GAS  /tmp/ccRLs6kU.s 			page 73


1427:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the first @a __n
1428:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters of @a __s.  If @a __n is is larger than the number of
1429:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  available characters in @a __s, the remainder of @a __s is used.
1430:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1431:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1432:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const _CharT* __s, size_type __n)
1433:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1434:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n);
1435:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s, __n);
1436:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1437:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1438:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1439:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to contents of a C string.
1440:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to use.
1441:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1442:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1443:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to the value of @a __s.
1444:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The data is copied, so there is no dependence on @a __s once the
1445:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  function returns.
1446:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1447:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1448:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(const _CharT* __s)
1449:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1450:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1451:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(size_type(0), this->size(), __s,
1452:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  traits_type::length(__s));
1453:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1454:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1455:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1456:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to multiple characters.
1457:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Length of the resulting string.
1458:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to use.
1459:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1460:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1461:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This function sets the value of this string to @a __n copies of
1462:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  character @a __c.
1463:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1464:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1465:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(size_type __n, _CharT __c)
1466:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
1467:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1468:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1469:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to a range of characters.
1470:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to append.
1471:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator marking the end of the range.
1472:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1473:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1474:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Sets value of string to characters in the range [__first,__last).
1475:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1476:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1477:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1478:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1479:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1480:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1481:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1482:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
1483:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         assign(_InputIterator __first, _InputIterator __last)
ARM GAS  /tmp/ccRLs6kU.s 			page 74


1484:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return this->replace(begin(), end(), __first, __last); }
1485:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1486:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1487:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1488:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value to an initializer_list of characters.
1489:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to assign.
1490:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1491:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1492:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1493:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       assign(initializer_list<_CharT> __l)
1494:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->assign(__l.begin(), __l.size()); }
1495:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1496:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1497:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1498:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1499:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value from a string_view.
1500:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1501:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1502:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1503:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1504:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1505:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt)
1506:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1507:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1508:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->assign(__sv.data(), __sv.size());
1509:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1510:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1511:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1512:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Set value from a range of characters in a string_view.
1513:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The source object convertible to string_view.
1514:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  The position in the string_view to assign from.
1515:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to assign.
1516:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1517:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1518:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1519:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1520:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
1521:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1522:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1523:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_replace(size_type(0), this->size(),
1524:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
1525:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
1526:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos, __n));
1527:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1528:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1529:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1530:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1531:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1532:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1534:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *              insert at.
1535:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1536:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1537:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1538:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1540:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
ARM GAS  /tmp/ccRLs6kU.s 			page 75


1541:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1542:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1543:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1544:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1545:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1546:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1547:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(const_iterator __p, size_type __n, _CharT __c)
1548:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1549:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1550:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1551:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->replace(__p, __p, __n, __c);
1552:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1553:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1554:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1555:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1556:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1557:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1558:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1559:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1560:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1561:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1562:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at the
1563:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  position referenced by iterator @a __p.  If adding
1564:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1565:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1566:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1567:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1568:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1569:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(iterator __p, size_type __n, _CharT __c)
1570:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {	this->replace(__p, __p, __n, __c);  }
1571:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1572:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1573:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1574:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1575:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1576:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Const_iterator referencing location in string to
1577:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *              insert at.
1578:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1579:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1580:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing the first inserted char.
1581:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1582:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1583:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts characters in range [beg,end).  If adding characters
1584:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  causes the length to exceed max_size(), length_error is
1585:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1586:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1587:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1588:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
1589:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1590:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	iterator
1591:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
1592:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
1593:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1594:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  const size_type __pos = __p - begin();
1595:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->replace(__p, __p, __beg, __end);
1596:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return iterator(this->_M_data() + __pos);
1597:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
ARM GAS  /tmp/ccRLs6kU.s 			page 76


1598:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
1599:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1600:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a range of characters.
1601:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1602:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __beg  Start of range.
1603:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __end  End of range.
1604:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1605:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1606:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts characters in range [__beg,__end).  If adding
1607:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1608:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1609:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1610:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1611:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
1612:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         void
1613:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         insert(iterator __p, _InputIterator __beg, _InputIterator __end)
1614:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { this->replace(__p, __p, __beg, __end); }
1615:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1616:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1617:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1618:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1619:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert an initializer_list of characters.
1620:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing location in string to insert at.
1621:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
1622:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1623:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1624:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1625:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(const_iterator __p, initializer_list<_CharT> __l)
1626:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->insert(__p, __l.begin(), __l.end()); }
1627:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1628:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
1629:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // See PR libstdc++/83328
1630:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1631:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(iterator __p, initializer_list<_CharT> __l)
1632:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1633:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1634:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->insert(__p - begin(), __l.begin(), __l.size());
1635:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1636:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
1637:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1638:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1639:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1640:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert value of a string.
1641:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1 Position in string to insert at.
1642:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  The string to insert.
1643:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1644:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1645:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1646:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts value of @a __str starting at @a __pos1.  If adding
1647:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters causes the length to exceed max_size(),
1648:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1649:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1650:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1651:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1652:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str)
1653:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0),
1654:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_data(), __str.size()); }
ARM GAS  /tmp/ccRLs6kU.s 			page 77


1655:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1656:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1657:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a substring.
1658:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1659:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str   The string to insert.
1660:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1661:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
1662:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1663:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1664:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size() or
1665:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos2 > @a str.size().
1666:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1667:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Starting at @a pos1, insert @a __n character of @a __str
1668:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beginning with @a __pos2.  If adding characters causes the
1669:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length to exceed max_size(), length_error is thrown.  If @a
1670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos1 is beyond the end of this string or @a __pos2 is
1671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beyond the end of @a __str, out_of_range is thrown.  The
1672:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
1673:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1674:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1675:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos1, const basic_string& __str,
1676:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	     size_type __pos2, size_type __n = npos)
1677:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, size_type(0), __str._M_data()
1678:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::insert"),
1679:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n)); }
1680:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1681:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1682:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a C substring.
1683:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1684:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1685:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  The number of characters to insert.
1686:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1687:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1688:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1689:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1690:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1691:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts the first @a __n characters of @a __s starting at @a
1692:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos.  If adding characters causes the length to exceed
1693:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos is beyond
1694:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  end(), out_of_range is thrown.  The value of the string
1695:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  doesn't change if an error is thrown.
1696:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1697:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1698:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s, size_type __n)
1699:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos, size_type(0), __s, __n); }
1700:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1701:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1702:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a C string.
1703:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1704:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  The C string to insert.
1705:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1706:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1707:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1708:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1709:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1710:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts the first @a n characters of @a __s starting at @a __pos.  If
1711:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  adding characters causes the length to exceed max_size(),
ARM GAS  /tmp/ccRLs6kU.s 			page 78


1712:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __pos is beyond end(), out_of_range is
1713:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error is
1714:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
1715:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1716:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1717:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, const _CharT* __s)
1718:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1719:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1720:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__pos, size_type(0), __s,
1721:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     traits_type::length(__s));
1722:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1723:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1724:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1725:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert multiple characters.
1726:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index in string to insert at.
1727:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert
1728:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1729:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1730:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1731:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos is beyond the end of this
1732:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1733:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1734:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts @a __n copies of character @a __c starting at index
1735:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos.  If adding characters causes the length to exceed
1736:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  max_size(), length_error is thrown.  If @a __pos > length(),
1737:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1738:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1739:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1740:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1741:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(size_type __pos, size_type __n, _CharT __c)
1742:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
1743:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      size_type(0), __n, __c); }
1744:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1745:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1746:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert one character.
1747:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __p  Iterator referencing position in string to insert at.
1748:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  The character to insert.
1749:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing newly inserted char.
1750:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1751:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1752:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Inserts character @a __c at position referenced by @a __p.
1753:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If adding character causes the length to exceed max_size(),
1754:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  If @a __p is beyond end of string,
1755:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1756:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1757:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1758:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1759:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       insert(__const_iterator __p, _CharT __c)
1760:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1761:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__p >= begin() && __p <= end());
1762:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __p - begin();
1763:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_aux(__pos, size_type(0), size_type(1), __c);
1764:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1765:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1766:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1767:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
1768:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
ARM GAS  /tmp/ccRLs6kU.s 			page 79


1769:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1770:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Position in string to insert at.
1771:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
1772:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1773:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1774:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1775:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1776:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	insert(size_type __pos, const _Tp& __svt)
1777:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1778:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1779:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->insert(__pos, __sv.data(), __sv.size());
1780:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1781:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1782:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1783:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Insert a string_view.
1784:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Position in string to insert at.
1785:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
1786:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Start of characters in str to insert.
1787:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to insert.
1788:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1789:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1790:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
1791:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
1792:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	insert(size_type __pos1, const _Tp& __svt,
1793:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       size_type __pos2, size_type __n = npos)
1794:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
1795:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
1796:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, size_type(0),
1797:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
1798:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
1799:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n));
1800:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
1801:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
1802:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1803:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1804:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove characters.
1805:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to remove (default 0).
1806:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to remove (default remainder).
1807:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1808:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1809:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1810:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1811:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes @a __n characters from this string starting at @a
1812:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __pos.  The length of the string is reduced by @a __n.  If
1813:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  there are < @a __n characters to remove, the remainder of
1814:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the string is truncated.  If @a __p is beyond end of string,
1815:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.  The value of the string doesn't
1816:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1817:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1818:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1819:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(size_type __pos = 0, size_type __n = npos)
1820:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1821:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_check(__pos, "basic_string::erase");
1822:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__n == npos)
1823:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1824:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else if (__n != 0)
1825:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, _M_limit(__pos, __n));
ARM GAS  /tmp/ccRLs6kU.s 			page 80


1826:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return *this;
1827:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1828:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1829:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1830:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove one character.
1831:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __position  Iterator referencing the character to remove.
1832:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  iterator referencing same location after removal.
1833:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1834:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the character at @a __position from this string. The value
1835:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  of the string doesn't change if an error is thrown.
1836:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1837:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1838:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(__const_iterator __position)
1839:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1840:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__position >= begin()
1841:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __position < end());
1842:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	const size_type __pos = __position - begin();
1843:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	this->_M_erase(__pos, size_type(1));
1844:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(_M_data() + __pos);
1845:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1846:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1847:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1848:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove a range of characters.
1849:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __first  Iterator referencing the first character to remove.
1850:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __last  Iterator referencing the end of the range.
1851:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Iterator referencing location of first after removal.
1852:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1853:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [first,last) from this string.
1854:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is thrown.
1855:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1856:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       iterator
1857:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       erase(__const_iterator __first, __const_iterator __last)
1858:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1859:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(__first >= begin() && __first <= __last
1860:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __last <= end());
1861:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         const size_type __pos = __first - begin();
1862:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	if (__last == end())
1863:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_set_length(__pos);
1864:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	else
1865:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  this->_M_erase(__pos, __last - __first);
1866:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return iterator(this->_M_data() + __pos);
1867:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1868:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1869:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
1870:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1871:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Remove the last character.
1872:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1873:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The string must be non-empty.
1874:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        */
1875:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
1876:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       pop_back() noexcept
1877:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1878:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_assert(!empty());
1879:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_erase(size() - 1, 1);
1880:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1881:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
1882:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 81


1883:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1884:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1885:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1886:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to be replaced.
1887:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1888:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1889:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos is beyond the end of this
1890:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.
1891:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1892:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1893:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos+__n) from
1894:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  this string.  In place, the value of @a __str is inserted.
1895:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1896:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If the length of the result exceeds max_size(), length_error
1897:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.  The value of the string doesn't change if an
1898:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  error is thrown.
1899:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1900:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1901:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n, const basic_string& __str)
1902:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
1903:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1904:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1905:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value from another string.
1906:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  Index of first character to replace.
1907:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1908:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String to insert.
1909:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  Index of first character of str to use.
1910:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from str to use.
1911:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1912:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos1 > size() or @a __pos2 >
1913:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  __str.size().
1914:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1915:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1916:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos1,__pos1 + n) from this
1917:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.  In place, the value of @a __str is inserted.  If @a __pos is
1918:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  beyond end of string, out_of_range is thrown.  If the length of the
1919:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The value of the
1920:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string doesn't change if an error is thrown.
1921:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1922:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1923:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos1, size_type __n1, const basic_string& __str,
1924:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      size_type __pos2, size_type __n2 = npos)
1925:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__pos1, __n1, __str._M_data()
1926:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     + __str._M_check(__pos2, "basic_string::replace"),
1927:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __str._M_limit(__pos2, __n2)); }
1928:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1929:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1930:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C substring.
1931:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1932:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1933:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1934:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters from @a s to use.
1935:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1936:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos1 > size().
1937:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1938:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1939:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
ARM GAS  /tmp/ccRLs6kU.s 			page 82


1940:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  from this string.  In place, the first @a __n2 characters of
1941:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __s are inserted, or all of @a __s if @a __n2 is too large.  If
1942:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __pos is beyond end of string, out_of_range is thrown.  If
1943:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the length of result exceeds max_size(), length_error is
1944:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1945:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1946:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1947:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1948:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s,
1949:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      size_type __n2)
1950:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1951:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string_len(__s, __n2);
1952:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace(_M_check(__pos, "basic_string::replace"),
1953:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			  _M_limit(__pos, __n1), __s, __n2);
1954:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1955:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1956:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1957:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with value of a C string.
1958:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1959:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1960:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to insert.
1961:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1962:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a pos > size().
1963:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1964:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1965:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__pos,__pos + __n1)
1966:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  from this string.  In place, the characters of @a __s are
1967:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  inserted.  If @a __pos is beyond end of string, out_of_range
1968:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.  If the length of result exceeds max_size(),
1969:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length_error is thrown.  The value of the string doesn't
1970:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  change if an error is thrown.
1971:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1972:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
1973:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, const _CharT* __s)
1974:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
1975:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
1976:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__pos, __n1, __s, traits_type::length(__s));
1977:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
1978:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
1979:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
1980:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace characters with multiple characters.
1981:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to replace.
1982:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1  Number of characters to be replaced.
1983:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2  Number of characters to insert.
1984:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
1985:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
1986:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If @a __pos > size().
1987:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
1988:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
1989:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [pos,pos + n1) from this
1990:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  string.  In place, @a __n2 copies of @a __c are inserted.
1991:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If @a __pos is beyond end of string, out_of_range is thrown.
1992:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  If the length of result exceeds max_size(), length_error is
1993:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.  The value of the string doesn't change if an error
1994:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  is thrown.
1995:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
1996:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
ARM GAS  /tmp/ccRLs6kU.s 			page 83


1997:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
1998:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
1999:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			      _M_limit(__pos, __n1), __n2, __c); }
2000:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2001:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2002:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string.
2003:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2004:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2005:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __str  String value to insert.
2006:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2007:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2008:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2009:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2010:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the value of @a __str is inserted.  If the length of result
2011:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  exceeds max_size(), length_error is thrown.  The value of
2012:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the string doesn't change if an error is thrown.
2013:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2014:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2015:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2016:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const basic_string& __str)
2017:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
2018:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2019:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2020:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C substring.
2021:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2022:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2023:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2024:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters from s to insert.
2025:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2026:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2027:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2028:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2029:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the first @a __n characters of @a __s are inserted.  If the
2030:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2031:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2032:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2033:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2034:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2035:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2036:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const _CharT* __s, size_type __n)
2037:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2038:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2039:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2040:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
2041:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2042:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2043:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2044:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with C string.
2045:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2046:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2047:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string value to insert.
2048:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2049:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2050:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2051:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2052:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  the characters of @a __s are inserted.  If the length of
2053:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
ARM GAS  /tmp/ccRLs6kU.s 			page 84


2054:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2055:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2056:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2057:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
2058:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2059:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_string(__s);
2060:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1, __i2, __s, traits_type::length(__s));
2061:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2062:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2063:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2064:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with multiple characters
2065:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2066:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2067:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to insert.
2068:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __c  Character to insert.
2069:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2070:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2071:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2072:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2073:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @a __n copies of @a __c are inserted.  If the length of
2074:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  result exceeds max_size(), length_error is thrown.  The
2075:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  value of the string doesn't change if an error is thrown.
2076:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2077:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2078:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
2079:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      _CharT __c)
2080:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2081:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2082:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2083:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
2084:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2085:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2086:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2087:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with range.
2088:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2089:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2090:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __k1  Iterator referencing start of range to insert.
2091:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __k2  Iterator referencing end of range to insert.
2092:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2093:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2094:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2095:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2096:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2097:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2098:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2099:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2100:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2101:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2102:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator,
2103:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
2104:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
2105:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         replace(const_iterator __i1, const_iterator __i2,
2106:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2107:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
2108:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2109:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2110:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
ARM GAS  /tmp/ccRLs6kU.s 			page 85


2111:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
2112:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 					   std::__false_type());
2113:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2114:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
2115:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
2116:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #ifdef _GLIBCXX_DISAMBIGUATE_REPLACE_INST
2117:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         typename __enable_if_not_native_iterator<_InputIterator>::__type
2118:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #else
2119:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         basic_string&
2120:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
2121:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         replace(iterator __i1, iterator __i2,
2122:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		_InputIterator __k1, _InputIterator __k2)
2123:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         {
2124:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2125:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				   && __i2 <= end());
2126:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __glibcxx_requires_valid_range(__k1, __k2);
2127:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
2128:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
2129:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2130:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif
2131:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2132:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // Specializations for the common case of pointer and iterator:
2133:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // useful to avoid the overhead of temporary buffering in _M_replace.
2134:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2135:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2136:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      _CharT* __k1, _CharT* __k2)
2137:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2138:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2139:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2140:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2141:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2142:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2143:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2144:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2145:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2146:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2147:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const _CharT* __k1, const _CharT* __k2)
2148:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2149:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2150:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2151:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2152:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2153:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1, __k2 - __k1);
2154:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2155:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2156:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2157:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      iterator __k1, iterator __k2)
2159:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2160:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2161:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2162:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2163:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2166:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2167:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
ARM GAS  /tmp/ccRLs6kU.s 			page 86


2168:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       replace(__const_iterator __i1, __const_iterator __i2,
2169:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      const_iterator __k1, const_iterator __k2)
2170:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
2171:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_GLIBCXX_DEBUG_PEDASSERT(begin() <= __i1 && __i1 <= __i2
2172:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 				 && __i2 <= end());
2173:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	__glibcxx_requires_valid_range(__k1, __k2);
2174:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	return this->replace(__i1 - begin(), __i2 - __i1,
2175:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			     __k1.base(), __k2 - __k1);
2176:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
2177:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2178:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201103L
2179:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2180:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with initializer_list.
2181:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1  Iterator referencing start of range to replace.
2182:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2  Iterator referencing end of range to replace.
2183:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __l  The initializer_list of characters to insert.
2184:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2185:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::length_error  If new length exceeds @c max_size().
2186:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2187:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Removes the characters in the range [__i1,__i2).  In place,
2188:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  characters in the range [__k1,__k2) are inserted.  If the
2189:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  length of result exceeds max_size(), length_error is thrown.
2190:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  The value of the string doesn't change if an error is
2191:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  thrown.
2192:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2193:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string& replace(const_iterator __i1, const_iterator __i2,
2194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    initializer_list<_CharT> __l)
2195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
2196:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++11
2197:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #if __cplusplus >= 201703L
2199:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2200:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2201:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  The position to replace at.
2202:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n    The number of characters to replace.
2203:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt  The object convertible to string_view to insert.
2204:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2205:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2206:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2207:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(size_type __pos, size_type __n, const _Tp& __svt)
2209:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2210:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2211:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos, __n, __sv.data(), __sv.size());
2212:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2213:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2214:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2215:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2216:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos1  The position to replace at.
2217:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n1    The number of characters to replace.
2218:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2219:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos2  The position in the string_view to insert from.
2220:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n2    The number of characters to insert.
2221:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2222:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2223:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2224:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
ARM GAS  /tmp/ccRLs6kU.s 			page 87


2225:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(size_type __pos1, size_type __n1, const _Tp& __svt,
2226:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		size_type __pos2, size_type __n2 = npos)
2227:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2228:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__pos1, __n1,
2230:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      __sv.data()
2231:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
2232:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	      std::__sv_limit(__sv.size(), __pos2, __n2));
2233:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2234:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2235:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2236:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Replace range of characters with string_view.
2237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i1    An iterator referencing the start position
2238:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           to replace at.
2239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __i2    An iterator referencing the end position
2240:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****           for the replace.
2241:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __svt   The object convertible to string_view to insert from.
2242:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Reference to this string.
2243:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<typename _Tp>
2245:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_If_sv<_Tp, basic_string&>
2246:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
2247:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	{
2248:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  __sv_type __sv = __svt;
2249:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  return this->replace(__i1 - begin(), __i2 - __i1, __sv);
2250:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	}
2251:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** #endif // C++17
2252:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2253:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     private:
2254:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _Integer>
2255:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string&
2256:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2257:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    _Integer __n, _Integer __val, __true_type)
2258:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****         { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }
2259:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2260:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       template<class _InputIterator>
2261:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	basic_string&
2262:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,
2263:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    _InputIterator __k1, _InputIterator __k2,
2264:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 			    __false_type);
2265:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2266:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2267:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
2268:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		     _CharT __c);
2269:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2270:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2271:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
2272:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 		 const size_type __len2);
2273:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2274:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       basic_string&
2275:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       _M_append(const _CharT* __s, size_type __n);
2276:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2277:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****     public:
2278:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2279:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2280:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Copy substring into C string.
2281:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  C string to copy value into.
ARM GAS  /tmp/ccRLs6kU.s 			page 88


2282:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __n  Number of characters to copy.
2283:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __pos  Index of first character to copy.
2284:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @return  Number of characters actually copied
2285:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @throw  std::out_of_range  If __pos > size().
2286:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2287:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Copies up to @a __n characters starting at @a __pos into the
2288:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  C string @a __s.  If @a __pos is %greater than size(),
2289:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  out_of_range is thrown.
2290:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2291:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       size_type
2292:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
2293:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2294:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2295:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Swap contents with another string.
2296:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @param __s  String to swap with.
2297:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2298:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  Exchanges the contents of this string with that of @a __s in constant
2299:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  time.
2300:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2301:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       void
2302:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       swap(basic_string& __s) _GLIBCXX_NOEXCEPT;
2303:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
2304:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       // String operations:
2305:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       /**
2306:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  @brief  Return const pointer to null-terminated contents.
2307:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *
2308:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  This is a handle to internal data.  Do not modify or dire things may
2309:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****        *  happen.
2310:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       */
2311:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       const _CharT*
2312:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       c_str() const _GLIBCXX_NOEXCEPT
 604              		.loc 4 2312 7 is_stmt 1 view .LVU119
 605              	.LBB498:
 606              	.LBI498:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 607              		.loc 4 194 7 view .LVU120
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 608              		.loc 4 194 7 is_stmt 0 view .LVU121
 609              	.LBE498:
 610              	.LBE497:
  16:Peripheral/Inc/serial_printf.hpp **** {
  17:Peripheral/Inc/serial_printf.hpp ****     // フォーマットされた文字列の長さを取得
  18:Peripheral/Inc/serial_printf.hpp ****     size_t len = std::snprintf(nullptr, 0, fmt.c_str(), args...);
 611              		.loc 10 18 31 view .LVU122
 612 0006 0268     		ldr	r2, [r0]
 613 0008 0021     		movs	r1, #0
 614 000a 0846     		mov	r0, r1
 615              	.LVL47:
 616              		.loc 10 18 31 view .LVU123
 617 000c FFF7FEFF 		bl	snprintf
 618              	.LVL48:
 619              	.LBB499:
 620              	.LBI499:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 621              		.loc 9 164 7 is_stmt 1 view .LVU124
 622              	.LBB500:
 623              	.LBI500:
ARM GAS  /tmp/ccRLs6kU.s 			page 89


  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 624              		.loc 8 79 7 view .LVU125
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 625              		.loc 8 79 7 is_stmt 0 view .LVU126
 626              	.LBE500:
 627              	.LBE499:
 628              	.LBB501:
 629              	.LBI501:
 354:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 356:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 357:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
 358:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 360:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 365:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     };
 366:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 367:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   /**
 368:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  individual elements in any order.
 370:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 371:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @ingroup sequences
 372:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 373:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 376:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *
 382:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 387:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   */
 388:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     {
 391:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Concept requirements.
 393:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if __cplusplus < 201103L
 395:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 397:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 399:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 400:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 401:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
ARM GAS  /tmp/ccRLs6kU.s 			page 90


 403:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** # endif
 407:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 408:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 409:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 413:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 414:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Tp					value_type;
 415:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator;
 422:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef size_t					size_type;
 425:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 427:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 428:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     private:
 429:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
 431:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 433:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 435:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 436:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 438:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
 440:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return false; }
 442:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 443:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static constexpr bool
 444:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_use_relocate()
 445:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 446:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 451:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 452:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 453:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 456:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 458:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 459:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
ARM GAS  /tmp/ccRLs6kU.s 			page 91


 460:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return __result; }
 463:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 464:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static pointer
 465:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 468:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 471:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif // C++11
 472:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 473:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
 474:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_allocate;
 475:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_deallocate;
 476:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_impl;
 477:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 479:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 480:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 483:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 484:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 486:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 487:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector() = default;
 488:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 489:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector() { }
 490:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 491:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 492:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 493:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 495:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 496:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 497:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__a) { }
 499:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 500:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 501:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 502:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 505:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 506:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructed elements.
 508:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 509:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 630              		.loc 6 510 7 is_stmt 1 view .LVU127
 631              	.LBB502:
 632              	.LBB503:
 633              	.LBI503:
 511:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_default_initialize(__n); }
ARM GAS  /tmp/ccRLs6kU.s 			page 92


 513:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 514:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 515:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 518:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 519:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 520:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 522:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 527:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 528:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 531:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 532:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 533:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 535:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       explicit
 536:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 541:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 543:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 546:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @a __x  will not be copied
 548:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 550:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 553:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const vector& __x)
 554:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__x.size(),
 555:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 557:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 558:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 560:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 561:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 562:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 563:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 564:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 565:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 566:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 567:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  moved instance.
 569:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
ARM GAS  /tmp/ccRLs6kU.s 			page 93


 570:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector.
 571:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 572:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 573:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 574:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 575:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 577:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 578:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 579:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 581:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 582:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 583:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 584:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     private:
 585:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 588:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 589:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__m)
 591:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 592:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (!__rv.empty())
 595:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
 596:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 598:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 600:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 601:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    __rv.clear();
 602:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
 603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 604:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
 606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 607:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       noexcept( noexcept(
 609:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { }
 613:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 614:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 615:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 617:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 618:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 619:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer_list @a __l.
 621:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 622:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 625:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
ARM GAS  /tmp/ccRLs6kU.s 			page 94


 627:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(__a)
 628:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 629:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 631:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 632:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 633:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 634:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 635:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 637:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 638:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 639:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 640:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [first,last).
 642:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 643:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 650:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 651:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 652:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Base(__a)
 656:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 657:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 659:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 660:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 661:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 662:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Base(__a)
 665:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 666:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 670:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 671:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 672:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 673:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  responsibility.
 677:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 679:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 680:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 682:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
ARM GAS  /tmp/ccRLs6kU.s 			page 95


 684:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 685:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 686:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 689:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @a __x will not be copied.
 691:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 692:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 694:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 695:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(const vector& __x);
 696:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 697:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 698:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 699:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 702:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  if the allocators permit it).
 704:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 705:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 706:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 708:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 709:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 711:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	constexpr bool __move_storage =
 712:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *this;
 716:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 717:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 718:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 719:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 721:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 722:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 724:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 725:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 728:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 729:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       vector&
 730:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 732:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 734:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *this;
 735:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 736:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 737:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 738:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 739:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
ARM GAS  /tmp/ccRLs6kU.s 			page 96


 741:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 743:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the number of elements assigned.
 747:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 748:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 749:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 752:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 753:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 755:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 756:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 757:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  range [__first,__last).
 759:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 760:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 762:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 763:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 764:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 765:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 766:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 768:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 771:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 772:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
 773:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
 775:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
 779:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 780:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 781:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 782:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 783:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 785:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 786:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 788:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 789:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  of elements assigned.
 792:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 793:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 794:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 796:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
ARM GAS  /tmp/ccRLs6kU.s 			page 97


 798:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 799:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 800:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 801:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       using _Base::get_allocator;
 803:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 804:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // iterators
 805:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 806:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 809:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 810:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
 811:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 814:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 815:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 818:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 819:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 820:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 823:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 824:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 827:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 828:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
 829:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 832:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 833:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  ordinary element order.
 836:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 837:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 838:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 841:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 842:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 845:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 846:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reverse_iterator
 847:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 849:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 850:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 851:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  reverse element order.
 854:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
ARM GAS  /tmp/ccRLs6kU.s 			page 98


 855:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 856:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 859:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 860:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  in reverse element order.
 863:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 864:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reverse_iterator
 865:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 867:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 868:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 869:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is done in reverse element order.
 872:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 873:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 874:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 876:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 877:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 878:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 879:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element order.
 882:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 883:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 884:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       cbegin() const noexcept
 885:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 887:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 888:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  ordinary element order.
 891:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 892:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_iterator
 893:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       cend() const noexcept
 894:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 896:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 897:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  reverse element order.
 900:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 901:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 902:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       crbegin() const noexcept
 903:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 905:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 906:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is done in reverse element order.
 909:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 910:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reverse_iterator
 911:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       crend() const noexcept
ARM GAS  /tmp/ccRLs6kU.s 			page 99


 912:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 914:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 915:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.2] capacity
 916:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 918:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 921:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 923:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 926:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 927:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 928:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 929:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 931:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 933:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  default constructed elements are appended.
 935:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 936:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 937:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size)
 938:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 939:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 940:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 942:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 944:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 945:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 946:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 949:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 950:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  given data.
 955:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 956:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 957:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 959:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 960:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 962:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 964:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
 965:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 966:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
ARM GAS  /tmp/ccRLs6kU.s 			page 100


 969:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
 970:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  given data.
 975:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 976:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 977:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 979:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__new_size > size())
 980:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else if (__new_size < size())
 982:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 984:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 985:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 986:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 987:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
 989:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       shrink_to_fit()
 990:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 991:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
 992:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 993:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
 994:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 996:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
 997:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
 998:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1002:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1003:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  equal end().)
1005:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1006:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return begin() == end(); }
1009:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1010:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1011:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1012:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *          elements.
1013:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
1014:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1016:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  thrown.
1020:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1021:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  and copying of %vector data.
ARM GAS  /tmp/ccRLs6kU.s 			page 101


1026:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1027:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1028:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reserve(size_type __n);
1029:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1030:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // element access
1031:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1032:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1035:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1036:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1037:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  see at().)
1041:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1042:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1044:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1045:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1047:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1048:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1049:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1050:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1053:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1054:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1055:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  see at().)
1059:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1060:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1061:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1063:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1066:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1067:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
1068:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /// Safety check used only from at().
1069:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1070:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_range_check(size_type __n) const
1071:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1072:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__n >= this->size())
1073:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				       "(which is %zu)"),
1076:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				   __n, this->size());
1077:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1078:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1079:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     public:
1080:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1081:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
ARM GAS  /tmp/ccRLs6kU.s 			page 102


1083:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1084:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read/write reference to data.
1085:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1087:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1091:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1092:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       at(size_type __n)
1093:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1094:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_check(__n);
1095:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (*this)[__n];
1096:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1097:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1098:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1099:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  accessed.
1102:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1104:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1105:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1109:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1110:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       at(size_type __n) const
1111:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1112:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_check(__n);
1113:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (*this)[__n];
1114:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1115:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1116:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1117:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1119:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1120:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1121:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1123:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *begin();
1125:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1126:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1127:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1130:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1131:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1132:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1134:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *begin();
1136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1137:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1138:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1139:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
ARM GAS  /tmp/ccRLs6kU.s 			page 103


1140:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element of the %vector.
1141:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1142:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       reference
1143:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1145:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(end() - 1);
1147:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1148:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1149:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1150:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  last element of the %vector.
1152:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1153:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const_reference
1154:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1156:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return *(end() - 1);
1158:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1159:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1160:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1161:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // data access
1163:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1164:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1167:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _Tp*
1168:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1171:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       const _Tp*
1172:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1175:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // [23.2.4.3] modifiers
1176:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1177:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be added.
1179:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1180:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  available.
1185:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1186:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1187:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       push_back(const value_type& __x)
1188:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1189:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1190:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
1191:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1193:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				     __x);
1194:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
1195:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
ARM GAS  /tmp/ccRLs6kU.s 			page 104


1197:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	else
1198:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1199:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1200:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1201:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1202:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1203:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       push_back(value_type&& __x)
1204:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1206:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1207:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus > 201402L
1208:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	reference
1209:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1210:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1211:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1212:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1214:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1215:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1216:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Removes last element.
1217:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1218:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1220:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  called.
1223:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1224:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1225:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1227:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
1229:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1232:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1233:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1234:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1235:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __args  Arguments.
1238:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1240:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
1241:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  std::list.
1245:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1246:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1247:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1248:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1251:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1252:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
ARM GAS  /tmp/ccRLs6kU.s 			page 105


1254:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1256:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1257:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1258:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1261:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1262:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1263:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1264:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1265:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1266:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1271:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
1272:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1275:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1277:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1279:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1280:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1281:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1282:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1287:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  used the user should consider using std::list.
1291:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1292:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1293:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1296:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1297:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
1300:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1301:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the
1302:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  specified by @a position.
1304:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1305:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1308:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1309:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1310:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
ARM GAS  /tmp/ccRLs6kU.s 			page 106


1311:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1312:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	auto __offset = __position - cbegin();
1313:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			std::random_access_iterator_tag());
1315:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return begin() + __offset;
1316:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1317:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1318:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1319:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1320:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1321:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1327:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1328:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1329:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1330:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1332:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1334:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1337:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1339:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return begin() + __offset;
1340:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1341:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1342:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1348:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1349:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1351:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1354:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1355:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1356:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1360:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1365:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1366:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
ARM GAS  /tmp/ccRLs6kU.s 			page 107


1368:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1369:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1370:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a pos.
1371:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1372:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1375:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1376:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
1377:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1378:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1379:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       _InputIterator __last)
1381:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1382:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			     __first, __last, __false_type());
1385:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  return begin() + __offset;
1386:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1387:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1388:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1389:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1392:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1393:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1394:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1395:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1396:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  by @a pos.
1397:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1398:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  consider using std::list.
1401:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1402:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1403:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1404:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1405:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	       _InputIterator __last)
1406:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1407:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1411:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1412:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1413:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1414:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1415:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1418:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  shorten the %vector by one.
1420:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1421:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
ARM GAS  /tmp/ccRLs6kU.s 			page 108


1425:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1427:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1428:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1429:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1430:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(const_iterator __position)
1431:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1433:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(iterator __position)
1434:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(__position); }
1435:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1436:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1437:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1438:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1439:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *                  erased.
1442:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *           prior to erasing (or end()).
1444:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1445:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This function will erase the elements in the range
1446:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1448:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1453:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1455:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1456:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1457:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1459:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const auto __beg = begin();
1460:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const auto __cbeg = cbegin();
1461:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1462:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1463:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1464:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       erase(iterator __first, iterator __last)
1465:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_erase(__first, __last); }
1466:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1467:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1468:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1469:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1472:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *
1477:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1479:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1480:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
ARM GAS  /tmp/ccRLs6kU.s 			page 109


1482:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1483:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1484:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1486:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1490:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1491:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1492:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  the user's responsibility.
1496:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1497:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1498:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1501:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****     protected:
1502:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       /**
1503:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****        */
1506:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1507:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	pointer
1508:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1511:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __try
1513:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
1514:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1516:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      return __result;
1517:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
1518:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __catch(...)
1519:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    {
1520:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      __throw_exception_again;
1522:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    }
1523:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1524:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1525:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1526:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal constructor functions follow.
1527:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1528:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1530:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1531:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1534:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1535:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1537:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
ARM GAS  /tmp/ccRLs6kU.s 			page 110


1539:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1541:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1543:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1544:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1546:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1547:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			       __false_type)
1549:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1550:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
1552:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1553:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1554:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1555:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1556:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1557:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1558:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    std::input_iterator_tag)
1560:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1561:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __try {
1562:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1564:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      emplace_back(*__first);
1565:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1566:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	      push_back(*__first);
1567:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1568:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  } __catch(...) {
1569:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    clear();
1570:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    __throw_exception_again;
1571:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1572:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1573:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1574:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1575:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1576:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1577:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			    std::forward_iterator_tag)
1579:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1580:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_start
1582:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1585:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					this->_M_impl._M_start,
1587:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1588:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1589:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1590:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1592:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1593:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1595:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
ARM GAS  /tmp/ccRLs6kU.s 			page 111


1596:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1598:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1599:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1600:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1601:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1602:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1604:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
1608:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1609:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1610:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1611:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // assignment work for the range versions.
1613:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1614:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1616:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1617:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1619:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1620:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1623:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1624:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1625:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1626:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   __false_type)
1628:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1630:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1631:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1632:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1633:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      std::input_iterator_tag);
1635:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1636:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1637:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1638:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1639:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1641:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1642:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // to be the same thing.
1644:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1645:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1647:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Internal insert functions follow.
1648:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1649:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1651:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
ARM GAS  /tmp/ccRLs6kU.s 			page 112


1653:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Integer>
1654:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1655:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   __true_type)
1657:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1659:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1661:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1662:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1663:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{
1665:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			  std::__iterator_category(__first));
1667:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	}
1668:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1669:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1670:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
1671:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1672:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1674:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1675:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1676:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _ForwardIterator>
1677:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1681:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // the same thing.
1683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1684:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1686:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
1687:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by resize(n).
1688:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1689:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_default_append(size_type __n);
1690:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1691:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       bool
1692:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_shrink_to_fit();
1693:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1694:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1695:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #if __cplusplus < 201103L
1696:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,x)
1697:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1698:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1700:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       void
1701:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #else
1703:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       struct _Temporary_value
1706:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1707:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	template<typename... _Args>
1708:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  explicit
1709:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
ARM GAS  /tmp/ccRLs6kU.s 			page 113


1710:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  {
1711:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1712:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  }
1714:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1715:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	~_Temporary_value()
1716:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1718:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	value_type&
1719:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1720:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1721:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       private:
1722:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_Tp*
1723:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1725:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	vector* _M_this;
1726:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       };
1728:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1729:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1731:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename _Arg>
1732:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1733:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1735:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1736:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	void
1737:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1738:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1739:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1741:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1743:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       template<typename... _Args>
1745:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	iterator
1746:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1747:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1748:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       iterator
1750:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** #endif
1753:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1754:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       size_type
1756:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
1757:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1758:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (max_size() - size() < __n)
1759:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
1760:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1761:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
1762:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
1763:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
1764:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
1765:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       // Called by constructors to check initial size.
1766:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       static size_type
ARM GAS  /tmp/ccRLs6kU.s 			page 114


1767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
 634              		.loc 6 1767 7 view .LVU128
 635              	.LBB504:
 636              	.LBB505:
 637              	.LBI505:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 638              		.loc 9 167 7 view .LVU129
 639              	.LBB506:
 640              	.LBI506:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 641              		.loc 8 82 7 view .LVU130
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 642              		.loc 8 82 7 is_stmt 0 view .LVU131
 643              	.LBE506:
 644              	.LBE505:
 645              	.LBB507:
 646              	.LBI507:
 647              		.loc 9 182 7 is_stmt 1 view .LVU132
 648              	.LBB508:
 649              	.LBI508:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 650              		.loc 8 89 7 view .LVU133
 651              	.LBE508:
 652              	.LBE507:
1768:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 653              		.loc 6 1769 2 is_stmt 0 view .LVU134
 654 0010 441C     		adds	r4, r0, #1
 655 0012 1ED4     		bmi	.L43
 656 0014 0646     		mov	r6, r0
 657              	.LVL49:
 658              		.loc 6 1769 2 view .LVU135
 659              	.LBE504:
 660              	.LBE503:
 661              	.LBB510:
 662              	.LBI510:
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 663              		.loc 6 303 7 is_stmt 1 view .LVU136
 664              	.LBB511:
 665              	.LBB512:
 666              	.LBI512:
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 667              		.loc 6 136 2 view .LVU137
 668              	.LBB513:
 669              	.LBB514:
 670              	.LBI514:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 671              		.loc 9 167 7 view .LVU138
 672              	.LBB515:
 673              	.LBI515:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 674              		.loc 8 82 7 view .LVU139
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 675              		.loc 8 82 7 is_stmt 0 view .LVU140
 676              	.LBE515:
 677              	.LBE514:
 678              	.LBB516:
ARM GAS  /tmp/ccRLs6kU.s 			page 115


 679              	.LBI516:
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 680              		.loc 6 97 2 is_stmt 1 view .LVU141
 681              	.LBB517:
 682              	.LBB518:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 683              		.loc 6 98 47 is_stmt 0 view .LVU142
 684 0016 0023     		movs	r3, #0
 685 0018 0193     		str	r3, [sp, #4]
 686 001a 0293     		str	r3, [sp, #8]
 687 001c 0393     		str	r3, [sp, #12]
 688              	.LVL50:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 689              		.loc 6 98 47 view .LVU143
 690              	.LBE518:
 691              	.LBE517:
 692              	.LBE516:
 693              	.LBE513:
 694              	.LBE512:
 695              	.LBB519:
 696              	.LBI519:
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 697              		.loc 6 359 7 is_stmt 1 view .LVU144
 698              	.LBB520:
 699              	.LBB521:
 700              	.LBI521:
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 701              		.loc 6 343 7 view .LVU145
 702              	.LBB522:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 703              		.loc 6 346 18 is_stmt 0 view .LVU146
 704 001e ECB1     		cbz	r4, .L40
 705              	.LVL51:
 706              	.LBB523:
 707              	.LBI523:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 708              		.loc 7 459 7 is_stmt 1 view .LVU147
 709              	.LBB524:
 710              	.LBI524:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 711              		.loc 8 103 7 view .LVU148
 712              	.LBB525:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 713              		.loc 8 111 2 is_stmt 0 view .LVU149
 714 0020 9C42     		cmp	r4, r3
 715 0022 19DB     		blt	.L44
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 716              		.loc 8 121 41 view .LVU150
 717 0024 2046     		mov	r0, r4
 718              	.LVL52:
 719              	.LEHB0:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 720              		.loc 8 121 41 view .LVU151
 721 0026 FFF7FEFF 		bl	_Znwj
 722              	.LVL53:
 723              	.LEHE0:
 724 002a 0546     		mov	r5, r0
ARM GAS  /tmp/ccRLs6kU.s 			page 116


 725              	.LVL54:
 726              	.L34:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 727              		.loc 8 121 41 view .LVU152
 728              	.LBE525:
 729              	.LBE524:
 730              	.LBE523:
 731              	.LBE522:
 732              	.LBE521:
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 733              		.loc 6 361 25 view .LVU153
 734 002c 0195     		str	r5, [sp, #4]
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 735              		.loc 6 362 26 view .LVU154
 736 002e 0295     		str	r5, [sp, #8]
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 737              		.loc 6 363 59 view .LVU155
 738 0030 2A19     		adds	r2, r5, r4
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 739              		.loc 6 363 34 view .LVU156
 740 0032 0392     		str	r2, [sp, #12]
 741              	.LVL55:
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 742              		.loc 6 363 34 view .LVU157
 743              	.LBE520:
 744              	.LBE519:
 745              	.LBE511:
 746              	.LBE510:
 747              	.LBB534:
 748              	.LBI534:
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 749              		.loc 6 1603 7 is_stmt 1 view .LVU158
 750              	.LBB535:
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
 751              		.loc 6 1606 36 is_stmt 0 view .LVU159
 752 0034 2846     		mov	r0, r5
 753              	.LVL56:
 754              	.LBB536:
 755              	.LBI536:
 756              		.file 11 "/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** //
   5:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
ARM GAS  /tmp/ccRLs6kU.s 			page 117


  18:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus > 201402L
  60:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <bits/stl_pair.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
  62:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  63:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <type_traits>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
  66:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  67:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #include <ext/alloc_traits.h>
  68:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  69:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** {
  71:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  73:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /** @addtogroup memory
  74:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @{
ARM GAS  /tmp/ccRLs6kU.s 			page 118


  75:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    */
  76:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  77:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
  78:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  80:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  81:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
  82:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  83:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
  84:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  85:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  86:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
  87:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  88:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
  89:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
  90:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  91:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  92:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
  93:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
  94:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
  95:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
  96:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  97:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  98:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
  99:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 100:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 101:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 102:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 103:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
 104:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 105:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 106:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 107:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 108:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 109:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 110:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 111:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 112:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 113:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 114:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 115:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 116:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 117:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 118:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 119:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 120:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 121:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 122:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 123:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 124:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 125:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 126:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 127:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 128:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 129:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType1;
 130:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 131:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType2;
ARM GAS  /tmp/ccRLs6kU.s 			page 119


 132:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 133:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 134:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 135:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 136:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 137:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 138:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 139:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 140:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 141:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 142:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 143:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 144:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 145:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 146:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 147:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 148:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 149:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 150:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 151:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 152:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 153:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 154:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 155:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 156:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 157:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 158:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 159:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 160:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 161:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 162:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 163:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 164:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 165:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 166:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 167:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 168:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 169:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 170:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 171:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 172:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 173:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 174:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 175:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 176:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 177:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 178:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 179:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 180:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 181:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 182:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 183:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 184:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 185:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 186:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 187:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 188:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 120


 189:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 190:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 191:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 192:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 193:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 194:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 195:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 196:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 197:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 198:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 199:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 200:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 201:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 202:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 203:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 204:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 205:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 206:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 207:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 208:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 209:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 210:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 211:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 212:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 213:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 214:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 215:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 216:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 217:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 218:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 219:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 220:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 221:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 222:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 223:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 224:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 225:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 226:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 227:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 228:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 229:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 230:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 231:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 232:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 233:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 234:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 235:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 237:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
 238:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 240:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 241:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 242:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 243:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 244:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 245:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
ARM GAS  /tmp/ccRLs6kU.s 			page 121


 246:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 247:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 248:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 249:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 250:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 251:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 252:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 253:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			const _Tp& __x)
 254:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 255:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 256:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 257:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 258:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 259:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 261:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /**
 262:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 263:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 264:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 265:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 266:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  @return   Nothing.
 267:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *
 268:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 269:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   */
 270:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 271:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 272:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 273:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 274:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 275:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 276:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus < 201103L
 277:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = true;
 278:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #else
 279:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 280:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 281:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 282:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  "result type must be constructible from input type");
 283:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 284:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 285:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 286:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 287:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #endif
 288:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 289:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 290:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 291:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 292:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 293:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 294:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 295:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 296:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 297:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 298:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 299:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 300:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 301:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 302:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
ARM GAS  /tmp/ccRLs6kU.s 			page 122


 303:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 304:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 305:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 306:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 307:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 308:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 309:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 310:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 311:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 312:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 313:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 314:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 315:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 316:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 317:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 318:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 319:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 320:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 321:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 322:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 323:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 324:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 325:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 326:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 327:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 328:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 329:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 330:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 331:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 332:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 333:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 334:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 335:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 					 __result, __alloc);
 336:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 337:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 338:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 339:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 340:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 341:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 342:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 343:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 344:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 345:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 346:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 347:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 348:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 349:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 350:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 351:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 352:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     void
 353:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 354:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 355:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 356:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 357:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 358:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 359:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
ARM GAS  /tmp/ccRLs6kU.s 			page 123


 360:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 361:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 362:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 363:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 364:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 365:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 366:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 367:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 368:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 369:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 370:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 371:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 372:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 373:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 374:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 375:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 376:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 377:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 378:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 379:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 380:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 381:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 382:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 383:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 384:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 385:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 386:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 387:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 388:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 389:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 390:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 391:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 392:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 393:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 394:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 395:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 396:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 397:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 398:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Tp2>
 399:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 400:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 401:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 402:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 403:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 404:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 405:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 406:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 407:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 408:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // for construction and destruction.
 409:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 410:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_copy_move
 411:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 412:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  move [first2, last2) into
 413:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 414:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 415:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 416:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
ARM GAS  /tmp/ccRLs6kU.s 			page 124


 417:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 418:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 419:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 420:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 421:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 422:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 423:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 424:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 425:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __result,
 426:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __alloc);
 427:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 428:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 429:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 430:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 431:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 432:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 433:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 434:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 435:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 436:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 437:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 438:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_move_copy
 439:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 440:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  copies [first2, last2) into
 441:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 442:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 443:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 444:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 445:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 446:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator1 __last1,
 447:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __first2,
 448:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator2 __last2,
 449:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __result,
 450:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 451:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 452:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 453:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __result,
 454:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							   __alloc);
 455:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 456:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 457:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 458:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 459:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 460:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 461:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 462:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 463:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 464:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 465:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   
 466:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_fill_move
 467:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 468:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 469:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 470:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 471:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 472:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 473:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
ARM GAS  /tmp/ccRLs6kU.s 			page 125


 474:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 475:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 476:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 477:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 478:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 479:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 480:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 481:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 482:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 483:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 484:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 485:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 486:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 487:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 488:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_move_fill
 489:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 490:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 491:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 492:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	   typename _Allocator>
 493:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 494:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 495:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __first2,
 496:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 497:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 498:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 499:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 500:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							    __first2,
 501:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 							    __alloc);
 502:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 503:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 504:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 505:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 506:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 507:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 508:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 509:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 510:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 511:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 512:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 513:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @endcond
 514:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 515:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** #if __cplusplus >= 201103L
 516:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   /// @cond undocumented
 517:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 518:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 519:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 520:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 521:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 522:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1
 523:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 524:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 525:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 526:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 527:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 528:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 529:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 530:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
ARM GAS  /tmp/ccRLs6kU.s 			page 126


 531:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 532:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 533:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 534:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 535:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 536:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 537:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 538:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 539:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 540:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 541:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 542:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 543:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 544:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 545:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator>
 546:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static void
 547:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 548:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 549:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 550:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    _ValueType;
 551:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 552:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::fill(__first, __last, _ValueType());
 553:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 554:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 555:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 556:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 557:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1
 558:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 559:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 560:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 561:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 562:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 563:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 564:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __try
 565:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 566:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 567:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 568:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      return __cur;
 569:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 570:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __catch(...)
 571:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    {
 572:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 573:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 574:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    }
 575:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 576:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 577:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 578:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<>
 579:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 580:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 581:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 582:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         static _ForwardIterator
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 584:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 585:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 586:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    _ValueType;
 587:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 127


 588:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return std::fill_n(__first, __n, _ValueType());
 589:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 590:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     };
 591:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 592:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default
 593:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 594:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed value_types(s).
 595:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator>
 596:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 597:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 598:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			    _ForwardIterator __last)
 599:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 600:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 601:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 602:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 603:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 604:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 606:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				     && __assignable>::
 607:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_default(__first, __last);
 608:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 609:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 610:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n
 611:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_type(s).
 612:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 613:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 615:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 616:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 617:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	_ValueType;
 618:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       // trivial types can have deleted assignment
 619:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 620:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 621:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 622:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				       && __assignable>::
 623:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 624:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 625:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 626:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 627:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_a
 628:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 629:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed value_types(s), constructed with the allocator alloc.
 630:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 631:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     void
 632:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 633:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 634:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _Allocator& __alloc)
 635:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 636:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 637:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 638:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 639:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 640:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 641:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 642:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 643:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 644:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
ARM GAS  /tmp/ccRLs6kU.s 			page 128


 645:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 646:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 647:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 648:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 649:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 650:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 651:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline void
 652:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 653:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      _ForwardIterator __last,
 654:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 			      allocator<_Tp>&)
 655:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 656:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 657:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 658:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // __uninitialized_default_n_a
 659:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_types(s),
 660:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   // constructed with the allocator alloc.
 661:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 662:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     _ForwardIterator
 663:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 664:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 				_Allocator& __alloc)
 665:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 666:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 667:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __try
 668:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 669:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 670:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 671:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 672:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  return __cur;
 673:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 674:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****       __catch(...)
 675:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	{
 676:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 677:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 678:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 	}
 679:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     }
 680:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h **** 
 681:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 682:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     inline _ForwardIterator
 683:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 757              		.loc 11 683 5 is_stmt 1 view .LVU160
 758              	.LBB537:
 759              	.LBI537:
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 760              		.loc 11 614 5 view .LVU161
 761              	.LBB538:
 762              	.LBB539:
 763              	.LBI539:
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 764              		.loc 11 583 9 view .LVU162
 765              	.LBB540:
 766              	.LBB541:
 767              	.LBI541:
 768              		.file 12 "/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h"
   1:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
   3:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** //
ARM GAS  /tmp/ccRLs6kU.s 			page 129


   5:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // any later version.
  10:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  11:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  16:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  20:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  25:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** /*
  26:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  27:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  30:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  38:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  39:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *
  42:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  */
  50:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  51:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****  */
  55:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  56:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  59:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
ARM GAS  /tmp/ccRLs6kU.s 			page 130


  62:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #include <bits/predefined_ops.h>
  72:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  73:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** # include <type_traits>
  74:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  75:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus > 201703L
  76:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** # include <compare>
  77:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  78:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  79:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** {
  81:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
  83:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /*
  84:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    */
  87:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline int
  90:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
  92:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
  93:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
  95:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
  97:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
  98:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return 0;
 102:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 103:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       else
 104:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 105:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 106:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 107:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 108:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 109:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _BoolType>
 113:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap
 114:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 115:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static void
 117:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
ARM GAS  /tmp/ccRLs6kU.s 			page 131


 119:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    _ValueType1;
 121:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  *__a = *__b;
 123:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  *__b = __tmp;
 124:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 125:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 126:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 127:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 128:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __iter_swap<true>
 129:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 130:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static void
 132:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 134:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  swap(*__a, *__b);
 135:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 136:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 137:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif // C++03
 138:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 139:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 140:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 143:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 144:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 145:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 146:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  iterators themselves.
 148:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 149:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 152:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 154:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 155:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 157:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 159:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 160:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus < 201103L
 161:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType1;
 163:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ValueType2;
 165:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 166:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType2>)
 168:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ValueType1>)
 170:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 171:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType1;
 173:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_ReferenceType2;
 175:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
ARM GAS  /tmp/ccRLs6kU.s 			page 132


 176:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 179:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 180:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // 187. iter_swap underspecified
 182:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       swap(*__a, *__b);
 183:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 184:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 185:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 186:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 187:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 194:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The ranges must not overlap.
 197:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 198:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _ForwardIterator2
 201:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 204:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 205:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 207:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 209:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 211:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first2;
 214:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 215:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 216:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 217:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 218:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 220:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 223:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 226:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 227:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 228:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 230:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 232:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
ARM GAS  /tmp/ccRLs6kU.s 			page 133


 233:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__b < __a)
 236:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 237:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 238:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 239:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 240:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 241:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 242:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 246:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 247:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  preprocessor macro.
 250:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 251:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 252:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 254:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 255:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 256:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 257:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__a < __b)
 260:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 261:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 262:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 263:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 264:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 265:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 266:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 270:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 272:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 275:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 278:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 280:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__b, __a))
 282:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 283:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 284:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 285:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 286:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 287:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 288:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
ARM GAS  /tmp/ccRLs6kU.s 			page 134


 290:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 293:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 294:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 297:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline const _Tp&
 300:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 302:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__comp(__a, __b))
 304:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __b;
 305:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __a;
 306:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 307:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 308:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 311:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 313:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 314:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __it; }
 316:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 317:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _From, typename _To>
 321:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _From
 323:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 326:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 327:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Iterator>
 328:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _Iterator
 330:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return __res; }
 332:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 333:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // a for loop with an explicit count.
 338:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 339:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move
 341:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 342:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 343:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 345:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
ARM GAS  /tmp/ccRLs6kU.s 			page 135


 347:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = *__first;
 349:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 350:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 351:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 352:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 353:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 354:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 355:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 357:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 358:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 360:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 362:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 364:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 365:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 366:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 367:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 368:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 369:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 370:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 372:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 373:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 375:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 377:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    {
 380:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = *__first;
 381:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 382:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 383:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    }
 384:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 385:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 386:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 387:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 388:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 389:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 390:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 392:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 393:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _OI
 395:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 397:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    {
 400:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 401:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__first;
 402:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ++__result;
 403:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    }
ARM GAS  /tmp/ccRLs6kU.s 			page 136


 404:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 405:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 406:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 407:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 408:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 409:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 410:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 412:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 413:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 415:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 417:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 418:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 424:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 426:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result + _Num;
 428:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 429:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 430:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 431:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT>
 434:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct char_traits;
 435:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 436:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     class istreambuf_iterator;
 438:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 439:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     class ostreambuf_iterator;
 441:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 442:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 448:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 454:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				    _CharT*>::__type
 457:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 460:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
ARM GAS  /tmp/ccRLs6kU.s 			page 137


 461:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 463:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 465:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 468:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 471:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 474:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 475:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 477:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct _Deque_iterator;
 479:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 480:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 482:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 483:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 485:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _OI);
 488:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 489:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 490:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 496:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 498:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 502:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 505:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 508:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 511:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 513:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 514:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 516:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 517:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
ARM GAS  /tmp/ccRLs6kU.s 			page 138


 518:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 519:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 520:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 522:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  _OI);
 525:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 526:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 527:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(_II, _II,
 530:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 532:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 533:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 540:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 541:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 544:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 545:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 546:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 547:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 548:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 554:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 555:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 556:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 557:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 558:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 560:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 562:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 563:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 568:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 571:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 572:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 573:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 574:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
ARM GAS  /tmp/ccRLs6kU.s 			page 139


 575:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 577:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 578:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 579:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result + (last - first)
 580:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 581:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 587:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  within [first,last).
 589:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 590:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 591:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 593:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 595:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 596:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 601:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 604:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 605:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 607:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 609:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 610:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward
 612:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 613:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 616:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 618:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 619:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 620:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 621:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 622:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 623:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 624:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 625:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Category>
 626:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 628:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 631:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
ARM GAS  /tmp/ccRLs6kU.s 			page 140


 632:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 633:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  while (__first != __last)
 634:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 636:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 637:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 638:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 639:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 640:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 641:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 643:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 646:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 648:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 650:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = *--__last;
 652:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 653:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 654:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 655:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 656:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 657:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<>
 658:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 660:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _BI2
 663:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 665:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __n = __last - __first;
 667:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 669:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result;
 670:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 671:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 672:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 673:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 674:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove>
 675:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 677:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       template<typename _Tp>
 678:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	static _Tp*
 680:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 682:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 683:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
ARM GAS  /tmp/ccRLs6kU.s 			page 141


 689:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  if (_Num)
 691:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return __result - _Num;
 693:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 694:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     };
 695:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 696:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 699:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 701:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 704:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 707:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 								 __last,
 711:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 								 __result);
 712:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 713:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 714:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 717:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 720:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 721:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 723:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _OI);
 726:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 727:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 728:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(
 731:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 735:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 742:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
 745:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
ARM GAS  /tmp/ccRLs6kU.s 			page 142


 746:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 747:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__niter_wrap(__result,
 748:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 751:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 752:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 753:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 754:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _OI
 756:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 757:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		_OI);
 760:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 761:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 762:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 767:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<bool _IsMove,
 768:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __copy_move_backward_a(
 772:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 776:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 777:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 783:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 784:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 790:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 791:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 794:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 797:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 799:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 800:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
ARM GAS  /tmp/ccRLs6kU.s 			page 143


 803:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 807:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 810:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 811:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 812:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 813:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   result - (last - first)
 819:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 820:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 826:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 827:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 830:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _BI2
 833:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 835:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 836:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 840:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 843:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					       std::__miter_base(__last),
 845:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 					       __result);
 846:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 847:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 848:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #else
 850:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 852:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 853:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 856:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 859:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
ARM GAS  /tmp/ccRLs6kU.s 			page 144


 860:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 861:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
 862:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 863:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 864:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 867:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 870:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 871:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 872:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 873:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
 874:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 875:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 876:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp>
 878:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
 880:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 883:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 884:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (std::is_constant_evaluated())
 886:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	{
 887:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	    *__first = __tmp;
 889:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	  return;
 890:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	}
 891:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 895:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 896:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
 897:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 899:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _Tp& __value)
 902:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 904:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     void
 906:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	      const _VTp&);
 909:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 910:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 916:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
ARM GAS  /tmp/ccRLs6kU.s 			page 145


 917:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     void
 918:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	     const _Tp&);
 921:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 922:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
 923:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   Nothing.
 929:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
 930:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
 934:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline void
 937:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 939:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       // concept requirements
 940:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 				  _ForwardIterator>)
 942:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 944:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __last, __value);
 945:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 946:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 947:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
 954:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
 958:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 961:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 967:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 973:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
ARM GAS  /tmp/ccRLs6kU.s 			page 146


 974:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 979:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
 980:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 985:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 986:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(float __n) { return (long long)__n; }
 988:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(double __n) { return (long long)__n; }
 990:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(long double __n) { return (long long)__n; }
 992:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   __size_to_integer(__float128 __n) { return (long long)__n; }
 995:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
 996:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 997:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
1000:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1002:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1003:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __value;
1005:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1006:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1007:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1008:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline typename
1011:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1014:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       const _Tp __tmp = __value;
1015:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	*__first = __tmp;
1017:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first;
1018:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1019:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1020:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	   typename _Tp>
1022:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1024:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag);
1026:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1027:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1030:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
ARM GAS  /tmp/ccRLs6kU.s 			page 147


1031:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::output_iterator_tag)
1032:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1033:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1034:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1036:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1037:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1038:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1039:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1042:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::input_iterator_tag)
1044:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1045:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1046:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1048:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1050:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1051:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OutputIterator
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
1057:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #if __cplusplus >= 201103L
1058:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1059:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** #endif
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       if (__n <= 0)
1061:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
1062:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1063:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
1067:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
1068:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
1069:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   /**
1070:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
1072:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __first  An output iterator.
1073:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  @return   The iterator at first+n.
1076:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
1077:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *
1081:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   */
1083:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  /tmp/ccRLs6kU.s 			page 148


1088:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     inline _OI
1089:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 769              		.loc 12 1089 5 view .LVU163
 770              		.loc 12 1089 5 is_stmt 0 view .LVU164
 771              	.LBE541:
 772              	.LBE540:
 773              	.LBE539:
 774              	.LBE538:
 775              	.LBE537:
 776              	.LBE536:
 777              	.LBE535:
 778              	.LBE534:
 779              	.LBE502:
 780              	.LBE501:
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 781              		.loc 12 951 37 is_stmt 1 view .LVU165
 782              	.LBB576:
 783              	.LBB574:
 784              	.LBB570:
 785              	.LBB568:
 786              	.LBB566:
 787              	.LBB564:
 788              	.LBB562:
 789              	.LBB560:
 790              	.LBB558:
 791              	.LBB556:
 792              	.LBB542:
 793              	.LBB543:
 794              	.LBI543:
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 795              		.loc 12 1054 5 view .LVU166
 796              	.LBB544:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 797              		.loc 12 1060 7 is_stmt 0 view .LVU167
 798 0036 9CB9     		cbnz	r4, .L45
 799              	.LVL57:
 800              	.L36:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 801              		.loc 12 1060 7 view .LVU168
 802              	.LBE544:
 803              	.LBE543:
 804              	.LBE542:
 805              	.LBE556:
 806              	.LBE558:
 807              	.LBE560:
 808              	.LBE562:
 809              	.LBE564:
 810              	.LBE566:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 811              		.loc 6 1605 26 view .LVU169
 812 0038 0290     		str	r0, [sp, #8]
 813              	.LVL58:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 814              		.loc 6 1605 26 view .LVU170
 815              	.LBE568:
 816              	.LBE570:
 817              	.LBE574:
ARM GAS  /tmp/ccRLs6kU.s 			page 149


 818              	.LBE576:
 819              	.LBB577:
 820              	.LBI577:
 821              		.loc 9 182 7 is_stmt 1 view .LVU171
 822              	.LBB578:
 823              	.LBI578:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 824              		.loc 8 89 7 view .LVU172
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 825              		.loc 8 89 7 is_stmt 0 view .LVU173
 826              	.LBE578:
 827              	.LBE577:
 828              	.LBB579:
 829              	.LBI579:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 830              		.loc 6 1043 7 is_stmt 1 view .LVU174
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 831              		.loc 6 1043 7 is_stmt 0 view .LVU175
 832              	.LBE579:
 833              	.LBB580:
 834              	.LBI580:
 835              		.loc 4 2312 7 is_stmt 1 view .LVU176
 836              	.LBB581:
 837              	.LBI581:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 838              		.loc 4 194 7 view .LVU177
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 839              		.loc 4 194 7 is_stmt 0 view .LVU178
 840              	.LBE581:
 841              	.LBE580:
  19:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
  20:Peripheral/Inc/serial_printf.hpp ****     std::vector<char> buf(len + 1);
  21:Peripheral/Inc/serial_printf.hpp ****     std::snprintf(&buf[0], len + 1, fmt.c_str(), args...);
 842              		.loc 10 21 18 view .LVU179
 843 003a 3A68     		ldr	r2, [r7]
 844 003c 2146     		mov	r1, r4
 845 003e 0198     		ldr	r0, [sp, #4]
 846 0040 FFF7FEFF 		bl	snprintf
 847              	.LVL59:
 848              	.LBB582:
 849              	.LBI582:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 850              		.loc 6 1043 7 is_stmt 1 view .LVU180
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 851              		.loc 6 1043 7 is_stmt 0 view .LVU181
 852              	.LBE582:
  22:Peripheral/Inc/serial_printf.hpp ****     // ヌル終端された文字列をUARTに送信
  23:Peripheral/Inc/serial_printf.hpp ****     HAL_UART_Transmit(&huart1, (uint8_t *)&buf[0], len, 0xFF);
 853              		.loc 10 23 22 view .LVU182
 854 0044 FF23     		movs	r3, #255
 855 0046 B2B2     		uxth	r2, r6
 856 0048 0199     		ldr	r1, [sp, #4]
 857 004a 1048     		ldr	r0, .L48
 858              	.LEHB1:
 859 004c FFF7FEFF 		bl	HAL_UART_Transmit
 860              	.LVL60:
 861              	.LEHE1:
ARM GAS  /tmp/ccRLs6kU.s 			page 150


 862 0050 0FE0     		b	.L46
 863              	.LVL61:
 864              	.L43:
 865              	.LBB583:
 866              	.LBB575:
 867              	.LBB571:
 868              	.LBB509:
1770:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 869              		.loc 6 1770 24 view .LVU183
 870 0052 0F48     		ldr	r0, .L48+4
 871              	.LVL62:
 872              	.LEHB2:
 873              		.loc 6 1770 24 view .LVU184
 874 0054 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 875              	.LVL63:
 876              	.L44:
 877              		.loc 6 1770 24 view .LVU185
 878              	.LBE509:
 879              	.LBE571:
 880              	.LBB572:
 881              	.LBB533:
 882              	.LBB532:
 883              	.LBB531:
 884              	.LBB530:
 885              	.LBB529:
 886              	.LBB528:
 887              	.LBB527:
 888              	.LBB526:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 889              		.loc 8 112 26 view .LVU186
 890 0058 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 891              	.LVL64:
 892              	.L40:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 893              		.loc 8 112 26 view .LVU187
 894              	.LBE526:
 895              	.LBE527:
 896              	.LBE528:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 897              		.loc 6 346 18 view .LVU188
 898 005c 0025     		movs	r5, #0
 899 005e E5E7     		b	.L34
 900              	.LVL65:
 901              	.L45:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 902              		.loc 6 346 18 view .LVU189
 903              	.LBE529:
 904              	.LBE530:
 905              	.LBE531:
 906              	.LBE532:
 907              	.LBE533:
 908              	.LBE572:
 909              	.LBB573:
 910              	.LBB569:
 911              	.LBB567:
 912              	.LBB565:
 913              	.LBB563:
ARM GAS  /tmp/ccRLs6kU.s 			page 151


 914              	.LBB561:
 915              	.LBB559:
 916              	.LBB557:
 917              	.LBB555:
 918              	.LBB554:
 919              	.LBB553:
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
 920              		.loc 12 1065 20 view .LVU190
 921 0060 1546     		mov	r5, r2
 922              	.LVL66:
 923              	.LBB545:
 924              	.LBI545:
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 925              		.loc 12 913 5 is_stmt 1 view .LVU191
 926              	.LBB546:
 927              	.LBI546:
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 928              		.loc 12 881 5 view .LVU192
 929              	.LBB547:
 930              	.LBB548:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 931              		.loc 12 892 7 is_stmt 0 view .LVU193
 932 0062 2246     		mov	r2, r4
 933 0064 0CB9     		cbnz	r4, .L47
 934              	.LVL67:
 935              	.L37:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 936              		.loc 12 892 7 view .LVU194
 937              	.LBE548:
 938              	.LBE547:
 939              	.LBE546:
 940              	.LBE545:
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 941              		.loc 12 1066 24 view .LVU195
 942 0066 2846     		mov	r0, r5
 943              	.LBB552:
 944              	.LBB551:
 945              	.LBB550:
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 946              		.loc 12 894 5 view .LVU196
 947 0068 E6E7     		b	.L36
 948              	.LVL68:
 949              	.L47:
 950              	.LBB549:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 951              		.loc 12 893 18 view .LVU197
 952 006a 0021     		movs	r1, #0
 953 006c FFF7FEFF 		bl	memset
 954              	.LVL69:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 955              		.loc 12 893 18 view .LVU198
 956 0070 F9E7     		b	.L37
 957              	.LVL70:
 958              	.L46:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 959              		.loc 12 893 18 view .LVU199
 960              	.LBE549:
ARM GAS  /tmp/ccRLs6kU.s 			page 152


 961              	.LBE550:
 962              	.LBE551:
 963              	.LBE552:
 964              	.LBE553:
 965              	.LBE554:
 966              	.LBE555:
 967              	.LBE557:
 968              	.LBE559:
 969              	.LBE561:
 970              	.LBE563:
 971              	.LBE565:
 972              	.LBE567:
 973              	.LBE569:
 974              	.LBE573:
 975              	.LBE575:
 976              	.LBE583:
 977              	.LBB584:
 978              	.LBI584:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 979              		.loc 6 678 7 is_stmt 1 view .LVU200
 980              	.LBB585:
 981              	.LBB586:
 982              	.LBI586:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 983              		.loc 6 276 7 view .LVU201
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 984              		.loc 6 276 7 is_stmt 0 view .LVU202
 985              	.LBE586:
 986              	.LBB587:
 987              	.LBI587:
 492:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 493:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 494:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 495:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 496:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 497:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 498:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *	       an object of type `_Up`.
 499:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 500:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 501:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 502:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 503:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 504:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 505:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 506:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 507:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 508:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		  _Args&&... __args)
 509:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 510:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 511:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 512:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 513:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 514:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 515:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 516:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 517:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 518:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
ARM GAS  /tmp/ccRLs6kU.s 			page 153


 519:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 520:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 521:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 522:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *
 523:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 524:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 525:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       template<typename _Up>
 526:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 527:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 528:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 529:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 530:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 531:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  __a.destroy(__p);
 532:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 533:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  std::destroy_at(__p);
 534:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 535:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 536:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 537:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 538:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 539:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 540:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size()
 541:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 542:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 543:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 544:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       {
 545:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus <= 201703L
 546:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return __a.max_size();
 547:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 548:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 549:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 550:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       }
 551:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 552:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       /**
 553:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 554:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 555:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****        *  @return @c __rhs
 556:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       */
 557:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 558:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 559:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __rhs; }
 560:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     };
 561:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 562:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 563:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 564:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 565:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 566:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { __one = __two; }
 567:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 568:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 569:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 570:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 571:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 572:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 573:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 574:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 575:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
ARM GAS  /tmp/ccRLs6kU.s 			page 154


 576:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 577:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 578:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 579:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 580:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 581:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocca::value)
 582:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__one = __two;
 583:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 584:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 585:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 586:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 587:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 588:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 589:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     constexpr _Alloc
 590:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 591:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 592:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 593:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 594:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 595:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 596:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 597:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 598:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 599:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { __one = std::move(__two); }
 600:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 601:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 602:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 603:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 604:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 605:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 606:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 607:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 608:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 609:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 610:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 611:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 612:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 613:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocma::value)
 614:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__one = std::move(__two);
 615:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 616:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 617:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 618:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 619:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 620:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201703L
 621:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 622:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 623:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 624:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       using std::swap;
 625:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       swap(__one, __two);
 626:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 627:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 628:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 629:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 630:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { }
 631:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 632:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 155


 633:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 634:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 635:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 636:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 637:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 638:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 639:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201703L
 640:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       if constexpr (__pocs::value)
 641:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	{
 642:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  using std::swap;
 643:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	  swap(__one, __two);
 644:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	}
 645:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 646:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 647:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 648:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 649:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 650:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 651:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 652:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	   typename = void>
 653:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl
 654:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : false_type
 655:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 656:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 657:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 658:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 659:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 660:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 661:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 		   std::declval<_Tp>()))>>
 662:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : true_type
 663:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 664:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 665:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 666:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 667:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 668:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 669:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_copy_insertable
 670:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 671:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 672:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 673:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 674:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 675:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 676:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 677:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : is_copy_constructible<_Tp>
 678:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 679:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 680:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 681:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 682:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 683:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 684:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_move_insertable
 685:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 686:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 687:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 688:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 689:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Tp>
ARM GAS  /tmp/ccRLs6kU.s 			page 156


 690:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 691:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : is_move_constructible<_Tp>
 692:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     { };
 693:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 694:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   // Trait to detect Allocator-like types.
 695:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename = void>
 696:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_allocator : false_type { };
 697:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 698:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 699:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     struct __is_allocator<_Alloc,
 700:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 701:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 702:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     : true_type { };
 703:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 704:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 705:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using _RequireAllocator
 706:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 707:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 708:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
 709:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     using _RequireNotAllocator
 710:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 711:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif // C++11
 712:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 713:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   /**
 714:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 715:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 716:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 717:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****    */
 718:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 719:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 720:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     void
 721:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 722:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	     _Allocator& __alloc)
 723:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     {
 724:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       for (; __first != __last; ++__first)
 725:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #if __cplusplus < 201103L
 726:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 727:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #else
 728:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 729:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 					      std::__addressof(*__first));
 730:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** #endif
 731:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     }
 732:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h **** 
 733:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 734:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     inline void
 735:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 988              		.loc 7 735 5 is_stmt 1 view .LVU203
 989              		.loc 7 735 5 is_stmt 0 view .LVU204
 990              	.LBE587:
 991              	.LBB588:
 992              	.LBI588:
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 993              		.loc 6 333 7 is_stmt 1 view .LVU205
 994              	.LBB589:
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 995              		.loc 6 335 15 is_stmt 0 view .LVU206
 996 0072 0198     		ldr	r0, [sp, #4]
ARM GAS  /tmp/ccRLs6kU.s 			page 157


 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 997              		.loc 6 336 17 view .LVU207
 998 0074 0399     		ldr	r1, [sp, #12]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 999              		.loc 6 336 35 view .LVU208
 1000 0076 091A     		subs	r1, r1, r0
 1001              	.LVL71:
 1002              	.LBB590:
 1003              	.LBI590:
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1004              		.loc 6 350 7 is_stmt 1 view .LVU209
 1005              	.LBB591:
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1006              		.loc 6 353 2 is_stmt 0 view .LVU210
 1007 0078 08B1     		cbz	r0, .L32
 1008              	.LVL72:
 1009              	.LBB592:
 1010              	.LBI592:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1011              		.loc 7 491 7 is_stmt 1 view .LVU211
 1012              	.LBB593:
 1013              	.LBB594:
 1014              	.LBI594:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1015              		.loc 8 126 7 view .LVU212
 1016              	.LBB595:
 1017              		.loc 8 139 19 is_stmt 0 view .LVU213
 1018 007a FFF7FEFF 		bl	_ZdlPvj
 1019              	.LVL73:
 1020              		.loc 8 139 19 view .LVU214
 1021              	.LBE595:
 1022              	.LBE594:
 1023              	.LBE593:
 1024              	.LBE592:
 1025              	.LBE591:
 1026              	.LBE590:
 1027              	.LBB596:
 1028              	.LBI596:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 1029              		.loc 6 128 14 is_stmt 1 view .LVU215
 1030              	.LBB597:
 1031              	.LBB598:
 1032              	.LBI598:
 1033              		.loc 9 182 7 view .LVU216
 1034              	.LBB599:
 1035              	.LBI599:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1036              		.loc 8 89 7 view .LVU217
 1037              	.L32:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1038              		.loc 8 89 7 is_stmt 0 view .LVU218
 1039              	.LBE599:
 1040              	.LBE598:
 1041              	.LBE597:
 1042              	.LBE596:
 1043              	.LBE589:
 1044              	.LBE588:
ARM GAS  /tmp/ccRLs6kU.s 			page 158


 1045              	.LBE585:
 1046              	.LBE584:
  24:Peripheral/Inc/serial_printf.hpp **** }
 1047              		.loc 10 24 1 view .LVU219
 1048 007e 05B0     		add	sp, sp, #20
 1049              	.LCFI11:
 1050              		.cfi_remember_state
 1051              		.cfi_def_cfa_offset 20
 1052              		@ sp needed
 1053 0080 F0BD     		pop	{r4, r5, r6, r7, pc}
 1054              	.LVL74:
 1055              	.L41:
 1056              	.LCFI12:
 1057              		.cfi_restore_state
 1058              	.LBB600:
 1059              	.LBI600:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1060              		.loc 6 678 7 is_stmt 1 view .LVU220
 1061              	.LBB601:
 1062              	.LBB602:
 1063              	.LBI602:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1064              		.loc 6 276 7 view .LVU221
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1065              		.loc 6 276 7 is_stmt 0 view .LVU222
 1066              	.LBE602:
 1067              	.LBB603:
 1068              	.LBI603:
 1069              		.loc 7 735 5 is_stmt 1 view .LVU223
 1070              		.loc 7 735 5 is_stmt 0 view .LVU224
 1071              	.LBE603:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1072              		.loc 6 683 7 view .LVU225
 1073 0082 01A8     		add	r0, sp, #4
 1074              	.LVL75:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1075              		.loc 6 683 7 view .LVU226
 1076 0084 FFF7FEFF 		bl	_ZNSt12_Vector_baseIcSaIcEED2Ev
 1077              	.LVL76:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1078              		.loc 6 683 7 view .LVU227
 1079 0088 FFF7FEFF 		bl	__cxa_end_cleanup
 1080              	.LVL77:
 1081              	.LEHE2:
 1082              	.L49:
 1083              		.align	2
 1084              	.L48:
 1085 008c 00000000 		.word	huart1
 1086 0090 00000000 		.word	.LC2
 1087              	.LBE601:
 1088              	.LBE600:
 1089              		.cfi_endproc
 1090              	.LFE1748:
 1091              		.global	__gxx_personality_v0
 1092              		.personality	__gxx_personality_v0
 1093              		.handlerdata
 1094              	.LLSDA1748:
ARM GAS  /tmp/ccRLs6kU.s 			page 159


 1095 0008 FF       		.byte	0xff
 1096 0009 FF       		.byte	0xff
 1097 000a 01       		.byte	0x1
 1098 000b 0D       		.uleb128 .LLSDACSE1748-.LLSDACSB1748
 1099              	.LLSDACSB1748:
 1100 000c 26       		.uleb128 .LEHB0-.LFB1748
 1101 000d 04       		.uleb128 .LEHE0-.LEHB0
 1102 000e 00       		.uleb128 0
 1103 000f 00       		.uleb128 0
 1104 0010 4C       		.uleb128 .LEHB1-.LFB1748
 1105 0011 04       		.uleb128 .LEHE1-.LEHB1
 1106 0012 8201     		.uleb128 .L41-.LFB1748
 1107 0014 00       		.uleb128 0
 1108 0015 54       		.uleb128 .LEHB2-.LFB1748
 1109 0016 38       		.uleb128 .LEHE2-.LEHB2
 1110 0017 00       		.uleb128 0
 1111 0018 00       		.uleb128 0
 1112              	.LLSDACSE1748:
 1113              		.section	.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,"a
 1114              		.fnend
 1116              		.section	.rodata._ZN9ReadWioE55setupEv.str1.4,"aMS",%progbits,1
 1117              		.align	2
 1118              	.LC3:
 1119 0000 52656164 		.ascii	"ReadWioE5 setup complete.\012\000"
 1119      57696F45 
 1119      35207365 
 1119      74757020 
 1119      636F6D70 
 1120              		.section	.text._ZN9ReadWioE55setupEv,"ax",%progbits
 1121              		.align	1
 1122              		.global	_ZN9ReadWioE55setupEv
 1123              		.syntax unified
 1124              		.thumb
 1125              		.thumb_func
 1126              		.fpu fpv4-sp-d16
 1128              	_ZN9ReadWioE55setupEv:
 1129              		.fnstart
 1130              	.LVL78:
 1131              	.LFB1504:
  42:App/Src/readWioE5.cpp ****     // 初期化コード
 1132              		.loc 1 42 1 is_stmt 1 view -0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 24
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
  42:App/Src/readWioE5.cpp ****     // 初期化コード
 1136              		.loc 1 42 1 is_stmt 0 view .LVU229
 1137 0000 00B5     		push	{lr}
 1138              		.save {lr}
 1139              	.LCFI13:
 1140              		.cfi_def_cfa_offset 4
 1141              		.cfi_offset 14, -4
 1142              		.pad #28
 1143 0002 87B0     		sub	sp, sp, #28
 1144              	.LCFI14:
 1145              		.cfi_def_cfa_offset 32
  44:App/Src/readWioE5.cpp **** }
 1146              		.loc 1 44 5 is_stmt 1 view .LVU230
ARM GAS  /tmp/ccRLs6kU.s 			page 160


 1147              	.LVL79:
 1148              	.LBB649:
 1149              	.LBI649:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 1150              		.loc 9 164 7 view .LVU231
 1151              	.LBB650:
 1152              	.LBI650:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1153              		.loc 8 79 7 view .LVU232
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1154              		.loc 8 79 7 is_stmt 0 view .LVU233
 1155              	.LBE650:
 1156              	.LBE649:
 1157              	.LBB651:
 1158              	.LBI651:
 533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 1159              		.loc 4 533 7 is_stmt 1 view .LVU234
 1160              	.LBB652:
 1161              	.LBB653:
 1162              	.LBI653:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1163              		.loc 4 198 7 view .LVU235
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1164              		.loc 4 198 7 is_stmt 0 view .LVU236
 1165              	.LBE653:
 1166              	.LBB654:
 1167              	.LBI654:
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 1168              		.loc 4 164 2 is_stmt 1 view .LVU237
 1169              	.LBB655:
 1170              	.LBB656:
 1171              	.LBB657:
 1172              	.LBI657:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1173              		.loc 9 167 7 view .LVU238
 1174              	.LBB658:
 1175              	.LBI658:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1176              		.loc 8 82 7 view .LVU239
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1177              		.loc 8 82 7 is_stmt 0 view .LVU240
 1178              	.LBE658:
 1179              	.LBE657:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1180              		.loc 4 165 35 view .LVU241
 1181 0004 02AB     		add	r3, sp, #8
 1182              	.LVL80:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1183              		.loc 4 165 35 view .LVU242
 1184 0006 0093     		str	r3, [sp]
 1185              	.LVL81:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1186              		.loc 4 165 35 view .LVU243
 1187              	.LBE656:
 1188              	.LBE655:
 1189              	.LBE654:
 1190              	.LBB659:
ARM GAS  /tmp/ccRLs6kU.s 			page 161


 1191              	.LBB660:
 1192              	.LBI660:
 365:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 1193              		.loc 5 365 7 is_stmt 1 view .LVU244
 1194              	.LBE660:
 1195              	.LBE659:
 1196              	.LBE652:
 1197              	.LBE651:
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 1198              		.loc 5 371 2 view .LVU245
 1199              	.LBB663:
 1200              	.LBB662:
 1201              	.LBB661:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 1202              		.loc 4 539 14 is_stmt 0 view .LVU246
 1203 0008 0D4A     		ldr	r2, .L55
 1204              	.LVL82:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 1205              		.loc 4 539 14 view .LVU247
 1206 000a 4FF00003 		mov	r3, #0
 1207 000e A2F11A01 		sub	r1, r2, #26
 1208 0012 6846     		mov	r0, sp
 1209              	.LVL83:
 1210              	.LEHB3:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 1211              		.loc 4 539 14 view .LVU248
 1212 0014 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 1213              	.LVL84:
 1214              	.LEHE3:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 1215              		.loc 4 539 14 view .LVU249
 1216              	.LBE661:
 1217              	.LBE662:
 1218              	.LBE663:
  44:App/Src/readWioE5.cpp **** }
 1219              		.loc 1 44 18 view .LVU250
 1220 0018 6846     		mov	r0, sp
 1221              	.LEHB4:
 1222 001a FFF7FEFF 		bl	_Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 1223              	.LVL85:
 1224              	.LEHE4:
 1225              	.LBB664:
 1226              	.LBI664:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 1227              		.loc 4 670 7 is_stmt 1 view .LVU251
 1228              	.LBB665:
 1229              	.LBB666:
 1230              	.LBI666:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1231              		.loc 4 237 7 view .LVU252
 1232              	.LBB667:
 1233              	.LBB668:
 1234              	.LBI668:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 1235              		.loc 4 229 7 view .LVU253
 1236              	.LBB669:
 1237              	.LBI669:
ARM GAS  /tmp/ccRLs6kU.s 			page 162


 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1238              		.loc 4 194 7 view .LVU254
 1239              	.LBB670:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1240              		.loc 4 195 28 is_stmt 0 view .LVU255
 1241 001e 0098     		ldr	r0, [sp]
 1242              	.LVL86:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1243              		.loc 4 195 28 view .LVU256
 1244              	.LBE670:
 1245              	.LBE669:
 1246              	.LBB671:
 1247              	.LBI671:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1248              		.loc 4 208 7 is_stmt 1 view .LVU257
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1249              		.loc 4 208 7 is_stmt 0 view .LVU258
 1250              	.LBE671:
 1251              	.LBE668:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 1252              		.loc 4 239 2 view .LVU259
 1253 0020 02AB     		add	r3, sp, #8
 1254 0022 9842     		cmp	r0, r3
 1255 0024 03D0     		beq	.L50
 1256              	.LVL87:
 1257              	.LBB672:
 1258              	.LBI672:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 1259              		.loc 4 244 7 is_stmt 1 view .LVU260
 1260              	.LBB673:
 1261              	.LBB674:
 1262              	.LBI674:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1263              		.loc 7 491 7 view .LVU261
 1264              	.LBB675:
 1265              	.LBI675:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1266              		.loc 8 126 7 view .LVU262
 1267              	.LBB676:
 1268              		.loc 8 139 19 is_stmt 0 view .LVU263
 1269 0026 0299     		ldr	r1, [sp, #8]
 1270 0028 0131     		adds	r1, r1, #1
 1271              	.LVL88:
 1272              		.loc 8 139 19 view .LVU264
 1273 002a FFF7FEFF 		bl	_ZdlPvj
 1274              	.LVL89:
 1275              		.loc 8 139 19 view .LVU265
 1276              	.LBE676:
 1277              	.LBE675:
 1278              	.LBE674:
 1279              	.LBE673:
 1280              	.LBE672:
 1281              	.LBE667:
 1282              	.LBE666:
 1283              	.LBB677:
 1284              	.LBI677:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
ARM GAS  /tmp/ccRLs6kU.s 			page 163


 1285              		.loc 4 158 14 is_stmt 1 view .LVU266
 1286              	.LBB678:
 1287              	.LBB679:
 1288              	.LBI679:
 1289              		.loc 9 182 7 view .LVU267
 1290              	.LBB680:
 1291              	.LBI680:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1292              		.loc 8 89 7 view .LVU268
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1293              		.loc 8 89 7 is_stmt 0 view .LVU269
 1294              	.LBE680:
 1295              	.LBE679:
 1296              	.LBE678:
 1297              	.LBE677:
 1298              	.LBE665:
 1299              	.LBE664:
 1300              	.LBB681:
 1301              	.LBI681:
 1302              		.loc 9 182 7 is_stmt 1 view .LVU270
 1303              	.LBB682:
 1304              	.LBI682:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1305              		.loc 8 89 7 view .LVU271
 1306              	.L50:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1307              		.loc 8 89 7 is_stmt 0 view .LVU272
 1308              	.LBE682:
 1309              	.LBE681:
  45:App/Src/readWioE5.cpp **** 
 1310              		.loc 1 45 1 view .LVU273
 1311 002e 07B0     		add	sp, sp, #28
 1312              	.LCFI15:
 1313              		.cfi_remember_state
 1314              		.cfi_def_cfa_offset 4
 1315              		@ sp needed
 1316 0030 5DF804FB 		ldr	pc, [sp], #4
 1317              	.L53:
 1318              	.LCFI16:
 1319              		.cfi_restore_state
 1320              	.LVL90:
 1321              	.LBB683:
 1322              	.LBI683:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 1323              		.loc 4 670 7 is_stmt 1 view .LVU274
 1324              	.LBB684:
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 1325              		.loc 4 671 19 is_stmt 0 view .LVU275
 1326 0034 6846     		mov	r0, sp
 1327 0036 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 1328              	.LVL91:
 1329              	.LBB685:
 1330              	.LBI685:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1331              		.loc 4 158 14 is_stmt 1 view .LVU276
 1332              	.LBB686:
 1333              	.LBB687:
ARM GAS  /tmp/ccRLs6kU.s 			page 164


 1334              	.LBI687:
 1335              		.loc 9 182 7 view .LVU277
 1336              	.LBB688:
 1337              	.LBI688:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1338              		.loc 8 89 7 view .LVU278
 1339              	.LEHB5:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1340              		.loc 8 89 7 is_stmt 0 view .LVU279
 1341 003a FFF7FEFF 		bl	__cxa_end_cleanup
 1342              	.LVL92:
 1343              	.LEHE5:
 1344              	.L56:
 1345 003e 00BF     		.align	2
 1346              	.L55:
 1347 0040 1A000000 		.word	.LC3+26
 1348              	.LBE688:
 1349              	.LBE687:
 1350              	.LBE686:
 1351              	.LBE685:
 1352              	.LBE684:
 1353              	.LBE683:
 1354              		.cfi_endproc
 1355              	.LFE1504:
 1356              		.personality	__gxx_personality_v0
 1357              		.handlerdata
 1358              	.LLSDA1504:
 1359 0008 FF       		.byte	0xff
 1360 0009 FF       		.byte	0xff
 1361 000a 01       		.byte	0x1
 1362 000b 0C       		.uleb128 .LLSDACSE1504-.LLSDACSB1504
 1363              	.LLSDACSB1504:
 1364 000c 14       		.uleb128 .LEHB3-.LFB1504
 1365 000d 04       		.uleb128 .LEHE3-.LEHB3
 1366 000e 00       		.uleb128 0
 1367 000f 00       		.uleb128 0
 1368 0010 1A       		.uleb128 .LEHB4-.LFB1504
 1369 0011 04       		.uleb128 .LEHE4-.LEHB4
 1370 0012 34       		.uleb128 .L53-.LFB1504
 1371 0013 00       		.uleb128 0
 1372 0014 3A       		.uleb128 .LEHB5-.LFB1504
 1373 0015 04       		.uleb128 .LEHE5-.LEHB5
 1374 0016 00       		.uleb128 0
 1375 0017 00       		.uleb128 0
 1376              	.LLSDACSE1504:
 1377              		.section	.text._ZN9ReadWioE55setupEv
 1378              		.fnend
 1380              		.section	.text._Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,
 1381              		.align	1
 1382              		.weak	_Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 1383              		.syntax unified
 1384              		.thumb
 1385              		.thumb_func
 1386              		.fpu fpv4-sp-d16
 1388              	_Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:
 1389              		.fnstart
 1390              	.LVL93:
ARM GAS  /tmp/ccRLs6kU.s 			page 165


 1391              	.LFB1749:
  15:Peripheral/Inc/serial_printf.hpp **** {
 1392              		.loc 10 15 6 is_stmt 1 view -0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 16
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
  15:Peripheral/Inc/serial_printf.hpp **** {
 1396              		.loc 10 15 6 is_stmt 0 view .LVU281
 1397 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1398              		.save {r4, r5, r6, r7, r8, lr}
 1399              	.LCFI17:
 1400              		.cfi_def_cfa_offset 24
 1401              		.cfi_offset 4, -24
 1402              		.cfi_offset 5, -20
 1403              		.cfi_offset 6, -16
 1404              		.cfi_offset 7, -12
 1405              		.cfi_offset 8, -8
 1406              		.cfi_offset 14, -4
 1407              		.pad #16
 1408 0004 84B0     		sub	sp, sp, #16
 1409              	.LCFI18:
 1410              		.cfi_def_cfa_offset 40
 1411 0006 0746     		mov	r7, r0
 1412 0008 8846     		mov	r8, r1
 1413              	.LVL94:
 1414              	.LBB771:
 1415              	.LBI771:
 1416              		.loc 4 2312 7 is_stmt 1 view .LVU282
 1417              	.LBB772:
 1418              	.LBI772:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1419              		.loc 4 194 7 view .LVU283
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1420              		.loc 4 194 7 is_stmt 0 view .LVU284
 1421              	.LBE772:
 1422              	.LBE771:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1423              		.loc 10 18 31 view .LVU285
 1424 000a 0B46     		mov	r3, r1
 1425 000c 0268     		ldr	r2, [r0]
 1426 000e 0021     		movs	r1, #0
 1427              	.LVL95:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1428              		.loc 10 18 31 view .LVU286
 1429 0010 0846     		mov	r0, r1
 1430              	.LVL96:
  18:Peripheral/Inc/serial_printf.hpp ****     // バッファを作成してフォーマットされた文字列を格納
 1431              		.loc 10 18 31 view .LVU287
 1432 0012 FFF7FEFF 		bl	snprintf
 1433              	.LVL97:
 1434              	.LBB773:
 1435              	.LBI773:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 1436              		.loc 9 164 7 is_stmt 1 view .LVU288
 1437              	.LBB774:
 1438              	.LBI774:
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
ARM GAS  /tmp/ccRLs6kU.s 			page 166


 1439              		.loc 8 79 7 view .LVU289
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1440              		.loc 8 79 7 is_stmt 0 view .LVU290
 1441              	.LBE774:
 1442              	.LBE773:
 1443              	.LBB775:
 1444              	.LBI775:
 510:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 1445              		.loc 6 510 7 is_stmt 1 view .LVU291
 1446              	.LBB776:
 1447              	.LBB777:
 1448              	.LBI777:
1767:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1449              		.loc 6 1767 7 view .LVU292
 1450              	.LBB778:
 1451              	.LBB779:
 1452              	.LBI779:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1453              		.loc 9 167 7 view .LVU293
 1454              	.LBB780:
 1455              	.LBI780:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1456              		.loc 8 82 7 view .LVU294
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1457              		.loc 8 82 7 is_stmt 0 view .LVU295
 1458              	.LBE780:
 1459              	.LBE779:
 1460              	.LBB781:
 1461              	.LBI781:
 1462              		.loc 9 182 7 is_stmt 1 view .LVU296
 1463              	.LBB782:
 1464              	.LBI782:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1465              		.loc 8 89 7 view .LVU297
 1466              	.LBE782:
 1467              	.LBE781:
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 1468              		.loc 6 1769 2 is_stmt 0 view .LVU298
 1469 0016 441C     		adds	r4, r0, #1
 1470 0018 1FD4     		bmi	.L68
 1471 001a 0646     		mov	r6, r0
 1472              	.LVL98:
1769:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  __throw_length_error(
 1473              		.loc 6 1769 2 view .LVU299
 1474              	.LBE778:
 1475              	.LBE777:
 1476              	.LBB784:
 1477              	.LBI784:
 303:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 1478              		.loc 6 303 7 is_stmt 1 view .LVU300
 1479              	.LBB785:
 1480              	.LBB786:
 1481              	.LBI786:
 136:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 1482              		.loc 6 136 2 view .LVU301
 1483              	.LBB787:
 1484              	.LBB788:
ARM GAS  /tmp/ccRLs6kU.s 			page 167


 1485              	.LBI788:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1486              		.loc 9 167 7 view .LVU302
 1487              	.LBB789:
 1488              	.LBI789:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1489              		.loc 8 82 7 view .LVU303
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1490              		.loc 8 82 7 is_stmt 0 view .LVU304
 1491              	.LBE789:
 1492              	.LBE788:
 1493              	.LBB790:
 1494              	.LBI790:
  97:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 1495              		.loc 6 97 2 is_stmt 1 view .LVU305
 1496              	.LBB791:
 1497              	.LBB792:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 1498              		.loc 6 98 47 is_stmt 0 view .LVU306
 1499 001c 0023     		movs	r3, #0
 1500 001e 0193     		str	r3, [sp, #4]
 1501 0020 0293     		str	r3, [sp, #8]
 1502 0022 0393     		str	r3, [sp, #12]
 1503              	.LVL99:
  98:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	{ }
 1504              		.loc 6 98 47 view .LVU307
 1505              	.LBE792:
 1506              	.LBE791:
 1507              	.LBE790:
 1508              	.LBE787:
 1509              	.LBE786:
 1510              	.LBB793:
 1511              	.LBI793:
 359:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1512              		.loc 6 359 7 is_stmt 1 view .LVU308
 1513              	.LBB794:
 1514              	.LBB795:
 1515              	.LBI795:
 343:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1516              		.loc 6 343 7 view .LVU309
 1517              	.LBB796:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1518              		.loc 6 346 18 is_stmt 0 view .LVU310
 1519 0024 F4B1     		cbz	r4, .L65
 1520              	.LVL100:
 1521              	.LBB797:
 1522              	.LBI797:
 459:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1523              		.loc 7 459 7 is_stmt 1 view .LVU311
 1524              	.LBB798:
 1525              	.LBI798:
 103:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1526              		.loc 8 103 7 view .LVU312
 1527              	.LBB799:
 111:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 1528              		.loc 8 111 2 is_stmt 0 view .LVU313
 1529 0026 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccRLs6kU.s 			page 168


 1530 0028 1ADB     		blt	.L69
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1531              		.loc 8 121 41 view .LVU314
 1532 002a 2046     		mov	r0, r4
 1533              	.LVL101:
 1534              	.LEHB6:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1535              		.loc 8 121 41 view .LVU315
 1536 002c FFF7FEFF 		bl	_Znwj
 1537              	.LVL102:
 1538              	.LEHE6:
 1539 0030 0546     		mov	r5, r0
 1540              	.LVL103:
 1541              	.L59:
 121:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       }
 1542              		.loc 8 121 41 view .LVU316
 1543              	.LBE799:
 1544              	.LBE798:
 1545              	.LBE797:
 1546              	.LBE796:
 1547              	.LBE795:
 361:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 1548              		.loc 6 361 25 view .LVU317
 1549 0032 0195     		str	r5, [sp, #4]
 362:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 1550              		.loc 6 362 26 view .LVU318
 1551 0034 0295     		str	r5, [sp, #8]
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1552              		.loc 6 363 59 view .LVU319
 1553 0036 2B19     		adds	r3, r5, r4
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1554              		.loc 6 363 34 view .LVU320
 1555 0038 0393     		str	r3, [sp, #12]
 1556              	.LVL104:
 363:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1557              		.loc 6 363 34 view .LVU321
 1558              	.LBE794:
 1559              	.LBE793:
 1560              	.LBE785:
 1561              	.LBE784:
 1562              	.LBB808:
 1563              	.LBI808:
1603:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1564              		.loc 6 1603 7 is_stmt 1 view .LVU322
 1565              	.LBB809:
1606:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 					   _M_get_Tp_allocator());
 1566              		.loc 6 1606 36 is_stmt 0 view .LVU323
 1567 003a 2846     		mov	r0, r5
 1568              	.LVL105:
 1569              	.LBB810:
 1570              	.LBI810:
 1571              		.loc 11 683 5 is_stmt 1 view .LVU324
 1572              	.LBB811:
 1573              	.LBI811:
 614:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****     {
 1574              		.loc 11 614 5 view .LVU325
 1575              	.LBB812:
ARM GAS  /tmp/ccRLs6kU.s 			page 169


 1576              	.LBB813:
 1577              	.LBI813:
 583:/usr/include/newlib/c++/10.3.1/bits/stl_uninitialized.h ****         {
 1578              		.loc 11 583 9 view .LVU326
 1579              	.LBB814:
 1580              	.LBB815:
 1581              	.LBI815:
 1582              		.loc 12 1089 5 view .LVU327
 1583              		.loc 12 1089 5 is_stmt 0 view .LVU328
 1584              	.LBE815:
 1585              	.LBE814:
 1586              	.LBE813:
 1587              	.LBE812:
 1588              	.LBE811:
 1589              	.LBE810:
 1590              	.LBE809:
 1591              	.LBE808:
 1592              	.LBE776:
 1593              	.LBE775:
 951:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 1594              		.loc 12 951 37 is_stmt 1 view .LVU329
 1595              	.LBB850:
 1596              	.LBB848:
 1597              	.LBB844:
 1598              	.LBB842:
 1599              	.LBB840:
 1600              	.LBB838:
 1601              	.LBB836:
 1602              	.LBB834:
 1603              	.LBB832:
 1604              	.LBB830:
 1605              	.LBB816:
 1606              	.LBB817:
 1607              	.LBI817:
1054:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	       std::random_access_iterator_tag)
 1608              		.loc 12 1054 5 view .LVU330
 1609              	.LBB818:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 1610              		.loc 12 1060 7 is_stmt 0 view .LVU331
 1611 003c A4B9     		cbnz	r4, .L70
 1612              	.LVL106:
 1613              	.L61:
1060:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	return __first;
 1614              		.loc 12 1060 7 view .LVU332
 1615              	.LBE818:
 1616              	.LBE817:
 1617              	.LBE816:
 1618              	.LBE830:
 1619              	.LBE832:
 1620              	.LBE834:
 1621              	.LBE836:
 1622              	.LBE838:
 1623              	.LBE840:
1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 1624              		.loc 6 1605 26 view .LVU333
 1625 003e 0290     		str	r0, [sp, #8]
 1626              	.LVL107:
ARM GAS  /tmp/ccRLs6kU.s 			page 170


1605:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
 1627              		.loc 6 1605 26 view .LVU334
 1628              	.LBE842:
 1629              	.LBE844:
 1630              	.LBE848:
 1631              	.LBE850:
 1632              	.LBB851:
 1633              	.LBI851:
 1634              		.loc 9 182 7 is_stmt 1 view .LVU335
 1635              	.LBB852:
 1636              	.LBI852:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1637              		.loc 8 89 7 view .LVU336
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1638              		.loc 8 89 7 is_stmt 0 view .LVU337
 1639              	.LBE852:
 1640              	.LBE851:
 1641              	.LBB853:
 1642              	.LBI853:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1643              		.loc 6 1043 7 is_stmt 1 view .LVU338
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1644              		.loc 6 1043 7 is_stmt 0 view .LVU339
 1645              	.LBE853:
 1646              	.LBB854:
 1647              	.LBI854:
 1648              		.loc 4 2312 7 is_stmt 1 view .LVU340
 1649              	.LBB855:
 1650              	.LBI855:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1651              		.loc 4 194 7 view .LVU341
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 1652              		.loc 4 194 7 is_stmt 0 view .LVU342
 1653              	.LBE855:
 1654              	.LBE854:
  21:Peripheral/Inc/serial_printf.hpp ****     // ヌル終端された文字列をUARTに送信
 1655              		.loc 10 21 18 view .LVU343
 1656 0040 4346     		mov	r3, r8
 1657 0042 3A68     		ldr	r2, [r7]
 1658 0044 2146     		mov	r1, r4
 1659 0046 0198     		ldr	r0, [sp, #4]
 1660 0048 FFF7FEFF 		bl	snprintf
 1661              	.LVL108:
 1662              	.LBB856:
 1663              	.LBI856:
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1664              		.loc 6 1043 7 is_stmt 1 view .LVU344
1043:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1665              		.loc 6 1043 7 is_stmt 0 view .LVU345
 1666              	.LBE856:
  23:Peripheral/Inc/serial_printf.hpp **** }
 1667              		.loc 10 23 22 view .LVU346
 1668 004c FF23     		movs	r3, #255
 1669 004e B2B2     		uxth	r2, r6
 1670 0050 0199     		ldr	r1, [sp, #4]
 1671 0052 1148     		ldr	r0, .L73
 1672              	.LEHB7:
ARM GAS  /tmp/ccRLs6kU.s 			page 171


 1673 0054 FFF7FEFF 		bl	HAL_UART_Transmit
 1674              	.LVL109:
 1675              	.LEHE7:
 1676 0058 0FE0     		b	.L71
 1677              	.LVL110:
 1678              	.L68:
 1679              	.LBB857:
 1680              	.LBB849:
 1681              	.LBB845:
 1682              	.LBB783:
 1683              		.loc 6 1770 24 view .LVU347
 1684 005a 1048     		ldr	r0, .L73+4
 1685              	.LVL111:
 1686              	.LEHB8:
 1687              		.loc 6 1770 24 view .LVU348
 1688 005c FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 1689              	.LVL112:
 1690              	.L69:
 1691              		.loc 6 1770 24 view .LVU349
 1692              	.LBE783:
 1693              	.LBE845:
 1694              	.LBB846:
 1695              	.LBB807:
 1696              	.LBB806:
 1697              	.LBB805:
 1698              	.LBB804:
 1699              	.LBB803:
 1700              	.LBB802:
 1701              	.LBB801:
 1702              	.LBB800:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1703              		.loc 8 112 26 view .LVU350
 1704 0060 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 1705              	.LVL113:
 1706              	.L65:
 112:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1707              		.loc 8 112 26 view .LVU351
 1708              	.LBE800:
 1709              	.LBE801:
 1710              	.LBE802:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1711              		.loc 6 346 18 view .LVU352
 1712 0064 0025     		movs	r5, #0
 1713 0066 E4E7     		b	.L59
 1714              	.LVL114:
 1715              	.L70:
 346:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1716              		.loc 6 346 18 view .LVU353
 1717              	.LBE803:
 1718              	.LBE804:
 1719              	.LBE805:
 1720              	.LBE806:
 1721              	.LBE807:
 1722              	.LBE846:
 1723              	.LBB847:
 1724              	.LBB843:
 1725              	.LBB841:
ARM GAS  /tmp/ccRLs6kU.s 			page 172


 1726              	.LBB839:
 1727              	.LBB837:
 1728              	.LBB835:
 1729              	.LBB833:
 1730              	.LBB831:
 1731              	.LBB829:
 1732              	.LBB828:
 1733              	.LBB827:
1065:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****       return __first + __n;
 1734              		.loc 12 1065 20 view .LVU354
 1735 0068 1D46     		mov	r5, r3
 1736              	.LVL115:
 1737              	.LBB819:
 1738              	.LBI819:
 913:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 1739              		.loc 12 913 5 is_stmt 1 view .LVU355
 1740              	.LBB820:
 1741              	.LBI820:
 881:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     {
 1742              		.loc 12 881 5 view .LVU356
 1743              	.LBB821:
 1744              	.LBB822:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 1745              		.loc 12 892 7 is_stmt 0 view .LVU357
 1746 006a 2246     		mov	r2, r4
 1747 006c 0CB9     		cbnz	r4, .L72
 1748              	.LVL116:
 1749              	.L62:
 892:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 1750              		.loc 12 892 7 view .LVU358
 1751              	.LBE822:
 1752              	.LBE821:
 1753              	.LBE820:
 1754              	.LBE819:
1066:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1755              		.loc 12 1066 24 view .LVU359
 1756 006e 2846     		mov	r0, r5
 1757              	.LBB826:
 1758              	.LBB825:
 1759              	.LBB824:
 894:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h **** 
 1760              		.loc 12 894 5 view .LVU360
 1761 0070 E5E7     		b	.L61
 1762              	.LVL117:
 1763              	.L72:
 1764              	.LBB823:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1765              		.loc 12 893 18 view .LVU361
 1766 0072 0021     		movs	r1, #0
 1767 0074 FFF7FEFF 		bl	memset
 1768              	.LVL118:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
 1769              		.loc 12 893 18 view .LVU362
 1770 0078 F9E7     		b	.L62
 1771              	.LVL119:
 1772              	.L71:
 893:/usr/include/newlib/c++/10.3.1/bits/stl_algobase.h ****     }
ARM GAS  /tmp/ccRLs6kU.s 			page 173


 1773              		.loc 12 893 18 view .LVU363
 1774              	.LBE823:
 1775              	.LBE824:
 1776              	.LBE825:
 1777              	.LBE826:
 1778              	.LBE827:
 1779              	.LBE828:
 1780              	.LBE829:
 1781              	.LBE831:
 1782              	.LBE833:
 1783              	.LBE835:
 1784              	.LBE837:
 1785              	.LBE839:
 1786              	.LBE841:
 1787              	.LBE843:
 1788              	.LBE847:
 1789              	.LBE849:
 1790              	.LBE857:
 1791              	.LBB858:
 1792              	.LBI858:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1793              		.loc 6 678 7 is_stmt 1 view .LVU364
 1794              	.LBB859:
 1795              	.LBB860:
 1796              	.LBI860:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1797              		.loc 6 276 7 view .LVU365
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1798              		.loc 6 276 7 is_stmt 0 view .LVU366
 1799              	.LBE860:
 1800              	.LBB861:
 1801              	.LBI861:
 1802              		.loc 7 735 5 is_stmt 1 view .LVU367
 1803              		.loc 7 735 5 is_stmt 0 view .LVU368
 1804              	.LBE861:
 1805              	.LBB862:
 1806              	.LBI862:
 333:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1807              		.loc 6 333 7 is_stmt 1 view .LVU369
 1808              	.LBB863:
 335:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 1809              		.loc 6 335 15 is_stmt 0 view .LVU370
 1810 007a 0198     		ldr	r0, [sp, #4]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1811              		.loc 6 336 17 view .LVU371
 1812 007c 0399     		ldr	r1, [sp, #12]
 336:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       }
 1813              		.loc 6 336 35 view .LVU372
 1814 007e 091A     		subs	r1, r1, r0
 1815              	.LVL120:
 1816              	.LBB864:
 1817              	.LBI864:
 350:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1818              		.loc 6 350 7 is_stmt 1 view .LVU373
 1819              	.LBB865:
 353:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1820              		.loc 6 353 2 is_stmt 0 view .LVU374
ARM GAS  /tmp/ccRLs6kU.s 			page 174


 1821 0080 08B1     		cbz	r0, .L57
 1822              	.LVL121:
 1823              	.LBB866:
 1824              	.LBI866:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1825              		.loc 7 491 7 is_stmt 1 view .LVU375
 1826              	.LBB867:
 1827              	.LBB868:
 1828              	.LBI868:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 1829              		.loc 8 126 7 view .LVU376
 1830              	.LBB869:
 1831              		.loc 8 139 19 is_stmt 0 view .LVU377
 1832 0082 FFF7FEFF 		bl	_ZdlPvj
 1833              	.LVL122:
 1834              		.loc 8 139 19 view .LVU378
 1835              	.LBE869:
 1836              	.LBE868:
 1837              	.LBE867:
 1838              	.LBE866:
 1839              	.LBE865:
 1840              	.LBE864:
 1841              	.LBB870:
 1842              	.LBI870:
 128:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 1843              		.loc 6 128 14 is_stmt 1 view .LVU379
 1844              	.LBB871:
 1845              	.LBB872:
 1846              	.LBI872:
 1847              		.loc 9 182 7 view .LVU380
 1848              	.LBB873:
 1849              	.LBI873:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1850              		.loc 8 89 7 view .LVU381
 1851              	.L57:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1852              		.loc 8 89 7 is_stmt 0 view .LVU382
 1853              	.LBE873:
 1854              	.LBE872:
 1855              	.LBE871:
 1856              	.LBE870:
 1857              	.LBE863:
 1858              	.LBE862:
 1859              	.LBE859:
 1860              	.LBE858:
 1861              		.loc 10 24 1 view .LVU383
 1862 0086 04B0     		add	sp, sp, #16
 1863              	.LCFI19:
 1864              		.cfi_remember_state
 1865              		.cfi_def_cfa_offset 24
 1866              		@ sp needed
 1867 0088 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1868              	.LVL123:
 1869              	.L66:
 1870              	.LCFI20:
 1871              		.cfi_restore_state
 1872              	.LBB874:
ARM GAS  /tmp/ccRLs6kU.s 			page 175


 1873              	.LBI874:
 678:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       {
 1874              		.loc 6 678 7 is_stmt 1 view .LVU384
 1875              	.LBB875:
 1876              	.LBB876:
 1877              	.LBI876:
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1878              		.loc 6 276 7 view .LVU385
 276:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 1879              		.loc 6 276 7 is_stmt 0 view .LVU386
 1880              	.LBE876:
 1881              	.LBB877:
 1882              	.LBI877:
 1883              		.loc 7 735 5 is_stmt 1 view .LVU387
 1884              		.loc 7 735 5 is_stmt 0 view .LVU388
 1885              	.LBE877:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1886              		.loc 6 683 7 view .LVU389
 1887 008c 01A8     		add	r0, sp, #4
 1888              	.LVL124:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1889              		.loc 6 683 7 view .LVU390
 1890 008e FFF7FEFF 		bl	_ZNSt12_Vector_baseIcSaIcEED2Ev
 1891              	.LVL125:
 683:/usr/include/newlib/c++/10.3.1/bits/stl_vector.h **** 
 1892              		.loc 6 683 7 view .LVU391
 1893 0092 FFF7FEFF 		bl	__cxa_end_cleanup
 1894              	.LVL126:
 1895              	.LEHE8:
 1896              	.L74:
 1897 0096 00BF     		.align	2
 1898              	.L73:
 1899 0098 00000000 		.word	huart1
 1900 009c 00000000 		.word	.LC2
 1901              	.LBE875:
 1902              	.LBE874:
 1903              		.cfi_endproc
 1904              	.LFE1749:
 1905              		.personality	__gxx_personality_v0
 1906              		.handlerdata
 1907              	.LLSDA1749:
 1908 0008 FF       		.byte	0xff
 1909 0009 FF       		.byte	0xff
 1910 000a 01       		.byte	0x1
 1911 000b 0D       		.uleb128 .LLSDACSE1749-.LLSDACSB1749
 1912              	.LLSDACSB1749:
 1913 000c 2C       		.uleb128 .LEHB6-.LFB1749
 1914 000d 04       		.uleb128 .LEHE6-.LEHB6
 1915 000e 00       		.uleb128 0
 1916 000f 00       		.uleb128 0
 1917 0010 54       		.uleb128 .LEHB7-.LFB1749
 1918 0011 04       		.uleb128 .LEHE7-.LEHB7
 1919 0012 8C01     		.uleb128 .L66-.LFB1749
 1920 0014 00       		.uleb128 0
 1921 0015 5C       		.uleb128 .LEHB8-.LFB1749
 1922 0016 3A       		.uleb128 .LEHE8-.LEHB8
 1923 0017 00       		.uleb128 0
ARM GAS  /tmp/ccRLs6kU.s 			page 176


 1924 0018 00       		.uleb128 0
 1925              	.LLSDACSE1749:
 1926              		.section	.text._Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_,
 1927              		.fnend
 1929              		.section	.rodata._ZN9ReadWioE54loopEv.str1.4,"aMS",%progbits,1
 1930              		.align	2
 1931              	.LC4:
 1932 0000 57696F45 		.ascii	"WioE5: %s\012\000"
 1932      353A2025 
 1932      730A00
 1933              		.section	.text._ZN9ReadWioE54loopEv,"ax",%progbits
 1934              		.align	1
 1935              		.global	_ZN9ReadWioE54loopEv
 1936              		.syntax unified
 1937              		.thumb
 1938              		.thumb_func
 1939              		.fpu fpv4-sp-d16
 1941              	_ZN9ReadWioE54loopEv:
 1942              		.fnstart
 1943              	.LVL127:
 1944              	.LFB1505:
  48:App/Src/readWioE5.cpp ****     if (rxReady)
 1945              		.loc 1 48 1 is_stmt 1 view -0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 24
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
  49:App/Src/readWioE5.cpp ****     {
 1949              		.loc 1 49 5 view .LVU393
  49:App/Src/readWioE5.cpp ****     {
 1950              		.loc 1 49 9 is_stmt 0 view .LVU394
 1951 0000 134B     		ldr	r3, .L85
 1952 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  49:App/Src/readWioE5.cpp ****     {
 1953              		.loc 1 49 5 view .LVU395
 1954 0004 03B9     		cbnz	r3, .L84
 1955 0006 7047     		bx	lr
 1956              	.L84:
  48:App/Src/readWioE5.cpp ****     if (rxReady)
 1957              		.loc 1 48 1 view .LVU396
 1958 0008 00B5     		push	{lr}
 1959              		.save {lr}
 1960              	.LCFI21:
 1961              		.cfi_def_cfa_offset 4
 1962              		.cfi_offset 14, -4
 1963              		.pad #28
 1964 000a 87B0     		sub	sp, sp, #28
 1965              	.LCFI22:
 1966              		.cfi_def_cfa_offset 32
  51:App/Src/readWioE5.cpp ****         rxReady = false;
 1967              		.loc 1 51 9 is_stmt 1 view .LVU397
 1968              	.LVL128:
 1969              	.LBB923:
 1970              	.LBI923:
 164:/usr/include/newlib/c++/10.3.1/bits/allocator.h **** 
 1971              		.loc 9 164 7 view .LVU398
 1972              	.LBB924:
 1973              	.LBI924:
ARM GAS  /tmp/ccRLs6kU.s 			page 177


  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1974              		.loc 8 79 7 view .LVU399
  79:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1975              		.loc 8 79 7 is_stmt 0 view .LVU400
 1976              	.LBE924:
 1977              	.LBE923:
 1978              	.LBB925:
 1979              	.LBI925:
 533:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       : _M_dataplus(_M_local_data(), __a)
 1980              		.loc 4 533 7 is_stmt 1 view .LVU401
 1981              	.LBB926:
 1982              	.LBB927:
 1983              	.LBI927:
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1984              		.loc 4 198 7 view .LVU402
 198:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 1985              		.loc 4 198 7 is_stmt 0 view .LVU403
 1986              	.LBE927:
 1987              	.LBB928:
 1988              	.LBI928:
 164:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	: allocator_type(__a), _M_p(__dat) { }
 1989              		.loc 4 164 2 is_stmt 1 view .LVU404
 1990              	.LBB929:
 1991              	.LBB930:
 1992              	.LBB931:
 1993              	.LBI931:
 167:/usr/include/newlib/c++/10.3.1/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 1994              		.loc 9 167 7 view .LVU405
 1995              	.LBB932:
 1996              	.LBI932:
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1997              		.loc 8 82 7 view .LVU406
  82:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 1998              		.loc 8 82 7 is_stmt 0 view .LVU407
 1999              	.LBE932:
 2000              	.LBE931:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2001              		.loc 4 165 35 view .LVU408
 2002 000c 02AB     		add	r3, sp, #8
 2003              	.LVL129:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2004              		.loc 4 165 35 view .LVU409
 2005 000e 0093     		str	r3, [sp]
 2006              	.LVL130:
 165:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2007              		.loc 4 165 35 view .LVU410
 2008              	.LBE930:
 2009              	.LBE929:
 2010              	.LBE928:
 2011              	.LBB933:
 2012              	.LBB934:
 2013              	.LBI934:
 365:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       {
 2014              		.loc 5 365 7 is_stmt 1 view .LVU411
 2015              	.LBE934:
 2016              	.LBE933:
 2017              	.LBE926:
ARM GAS  /tmp/ccRLs6kU.s 			page 178


 2018              	.LBE925:
 371:/usr/include/newlib/c++/10.3.1/bits/char_traits.h ****       }
 2019              		.loc 5 371 2 view .LVU412
 2020              	.LBB937:
 2021              	.LBB936:
 2022              	.LBB935:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2023              		.loc 4 539 14 is_stmt 0 view .LVU413
 2024 0010 104A     		ldr	r2, .L85+4
 2025              	.LVL131:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2026              		.loc 4 539 14 view .LVU414
 2027 0012 4FF00003 		mov	r3, #0
 2028 0016 A2F10A01 		sub	r1, r2, #10
 2029 001a 6846     		mov	r0, sp
 2030              	.LVL132:
 2031              	.LEHB9:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2032              		.loc 4 539 14 view .LVU415
 2033 001c FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iter
 2034              	.LVL133:
 2035              	.LEHE9:
 539:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       }
 2036              		.loc 4 539 14 view .LVU416
 2037              	.LBE935:
 2038              	.LBE936:
 2039              	.LBE937:
  51:App/Src/readWioE5.cpp ****         rxReady = false;
 2040              		.loc 1 51 22 view .LVU417
 2041 0020 0D49     		ldr	r1, .L85+8
 2042 0022 6846     		mov	r0, sp
 2043              	.LEHB10:
 2044 0024 FFF7FEFF 		bl	_Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
 2045              	.LVL134:
 2046              	.LEHE10:
 2047              	.LBB938:
 2048              	.LBI938:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2049              		.loc 4 670 7 is_stmt 1 view .LVU418
 2050              	.LBB939:
 2051              	.LBB940:
 2052              	.LBI940:
 237:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2053              		.loc 4 237 7 view .LVU419
 2054              	.LBB941:
 2055              	.LBB942:
 2056              	.LBI942:
 229:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_data() == _M_local_data(); }
 2057              		.loc 4 229 7 view .LVU420
 2058              	.LBB943:
 2059              	.LBI943:
 194:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { return _M_dataplus._M_p; }
 2060              		.loc 4 194 7 view .LVU421
 2061              	.LBB944:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2062              		.loc 4 195 28 is_stmt 0 view .LVU422
 2063 0028 0098     		ldr	r0, [sp]
ARM GAS  /tmp/ccRLs6kU.s 			page 179


 2064              	.LVL135:
 195:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2065              		.loc 4 195 28 view .LVU423
 2066              	.LBE944:
 2067              	.LBE943:
 2068              	.LBB945:
 2069              	.LBI945:
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2070              		.loc 4 208 7 is_stmt 1 view .LVU424
 208:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2071              		.loc 4 208 7 is_stmt 0 view .LVU425
 2072              	.LBE945:
 2073              	.LBE942:
 239:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 	  _M_destroy(_M_allocated_capacity);
 2074              		.loc 4 239 2 view .LVU426
 2075 002a 02AB     		add	r3, sp, #8
 2076 002c 9842     		cmp	r0, r3
 2077 002e 03D0     		beq	.L77
 2078              	.LVL136:
 2079              	.LBB946:
 2080              	.LBI946:
 244:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
 2081              		.loc 4 244 7 is_stmt 1 view .LVU427
 2082              	.LBB947:
 2083              	.LBB948:
 2084              	.LBI948:
 491:/usr/include/newlib/c++/10.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2085              		.loc 7 491 7 view .LVU428
 2086              	.LBB949:
 2087              	.LBI949:
 126:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h ****       {
 2088              		.loc 8 126 7 view .LVU429
 2089              	.LBB950:
 2090              		.loc 8 139 19 is_stmt 0 view .LVU430
 2091 0030 0299     		ldr	r1, [sp, #8]
 2092 0032 0131     		adds	r1, r1, #1
 2093              	.LVL137:
 2094              		.loc 8 139 19 view .LVU431
 2095 0034 FFF7FEFF 		bl	_ZdlPvj
 2096              	.LVL138:
 2097              	.L77:
 2098              		.loc 8 139 19 view .LVU432
 2099              	.LBE950:
 2100              	.LBE949:
 2101              	.LBE948:
 2102              	.LBE947:
 2103              	.LBE946:
 2104              	.LBE941:
 2105              	.LBE940:
 2106              	.LBB951:
 2107              	.LBI951:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2108              		.loc 4 158 14 is_stmt 1 view .LVU433
 2109              	.LBB952:
 2110              	.LBB953:
 2111              	.LBI953:
 2112              		.loc 9 182 7 view .LVU434
ARM GAS  /tmp/ccRLs6kU.s 			page 180


 2113              	.LBB954:
 2114              	.LBI954:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2115              		.loc 8 89 7 view .LVU435
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2116              		.loc 8 89 7 is_stmt 0 view .LVU436
 2117              	.LBE954:
 2118              	.LBE953:
 2119              	.LBE952:
 2120              	.LBE951:
 2121              	.LBE939:
 2122              	.LBE938:
 2123              	.LBB955:
 2124              	.LBI955:
 2125              		.loc 9 182 7 is_stmt 1 view .LVU437
 2126              	.LBB956:
 2127              	.LBI956:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2128              		.loc 8 89 7 view .LVU438
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2129              		.loc 8 89 7 is_stmt 0 view .LVU439
 2130              	.LBE956:
 2131              	.LBE955:
  52:App/Src/readWioE5.cpp ****     }
 2132              		.loc 1 52 9 is_stmt 1 view .LVU440
  52:App/Src/readWioE5.cpp ****     }
 2133              		.loc 1 52 17 is_stmt 0 view .LVU441
 2134 0038 054B     		ldr	r3, .L85
 2135 003a 0022     		movs	r2, #0
 2136 003c 1A70     		strb	r2, [r3]
  54:App/Src/readWioE5.cpp **** 
 2137              		.loc 1 54 1 view .LVU442
 2138 003e 07B0     		add	sp, sp, #28
 2139              	.LCFI23:
 2140              		.cfi_remember_state
 2141              		.cfi_def_cfa_offset 4
 2142              		@ sp needed
 2143 0040 5DF804FB 		ldr	pc, [sp], #4
 2144              	.L79:
 2145              	.LCFI24:
 2146              		.cfi_restore_state
 2147              	.LVL139:
 2148              	.LBB957:
 2149              	.LBI957:
 670:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       { _M_dispose(); }
 2150              		.loc 4 670 7 is_stmt 1 view .LVU443
 2151              	.LBB958:
 671:/usr/include/newlib/c++/10.3.1/bits/basic_string.h **** 
 2152              		.loc 4 671 19 is_stmt 0 view .LVU444
 2153 0044 6846     		mov	r0, sp
 2154 0046 FFF7FEFF 		bl	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
 2155              	.LVL140:
 2156              	.LBB959:
 2157              	.LBI959:
 158:/usr/include/newlib/c++/10.3.1/bits/basic_string.h ****       {
 2158              		.loc 4 158 14 is_stmt 1 view .LVU445
 2159              	.LBB960:
ARM GAS  /tmp/ccRLs6kU.s 			page 181


 2160              	.LBB961:
 2161              	.LBI961:
 2162              		.loc 9 182 7 view .LVU446
 2163              	.LBB962:
 2164              	.LBI962:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2165              		.loc 8 89 7 view .LVU447
 2166              	.LEHB11:
  89:/usr/include/newlib/c++/10.3.1/ext/new_allocator.h **** 
 2167              		.loc 8 89 7 is_stmt 0 view .LVU448
 2168 004a FFF7FEFF 		bl	__cxa_end_cleanup
 2169              	.LVL141:
 2170              	.LEHE11:
 2171              	.L86:
 2172 004e 00BF     		.align	2
 2173              	.L85:
 2174 0050 00000000 		.word	.LANCHOR3
 2175 0054 0A000000 		.word	.LC4+10
 2176 0058 00000000 		.word	.LANCHOR2
 2177              	.LBE962:
 2178              	.LBE961:
 2179              	.LBE960:
 2180              	.LBE959:
 2181              	.LBE958:
 2182              	.LBE957:
 2183              		.cfi_endproc
 2184              	.LFE1505:
 2185              		.personality	__gxx_personality_v0
 2186              		.handlerdata
 2187              	.LLSDA1505:
 2188 0008 FF       		.byte	0xff
 2189 0009 FF       		.byte	0xff
 2190 000a 01       		.byte	0x1
 2191 000b 0C       		.uleb128 .LLSDACSE1505-.LLSDACSB1505
 2192              	.LLSDACSB1505:
 2193 000c 1C       		.uleb128 .LEHB9-.LFB1505
 2194 000d 04       		.uleb128 .LEHE9-.LEHB9
 2195 000e 00       		.uleb128 0
 2196 000f 00       		.uleb128 0
 2197 0010 24       		.uleb128 .LEHB10-.LFB1505
 2198 0011 04       		.uleb128 .LEHE10-.LEHB10
 2199 0012 44       		.uleb128 .L79-.LFB1505
 2200 0013 00       		.uleb128 0
 2201 0014 4A       		.uleb128 .LEHB11-.LFB1505
 2202 0015 04       		.uleb128 .LEHE11-.LEHB11
 2203 0016 00       		.uleb128 0
 2204 0017 00       		.uleb128 0
 2205              	.LLSDACSE1505:
 2206              		.section	.text._ZN9ReadWioE54loopEv
 2207              		.fnend
 2209              		.global	rxReady
 2210              		.global	rxIndex
 2211              		.global	rxBuffer
 2212              		.global	rx_byte
 2213              		.section	.bss.rxBuffer,"aw",%nobits
 2214              		.align	2
 2215              		.set	.LANCHOR2,. + 0
ARM GAS  /tmp/ccRLs6kU.s 			page 182


 2218              	rxBuffer:
 2219 0000 00000000 		.space	128
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2219      00000000 
 2220              		.section	.bss.rxIndex,"aw",%nobits
 2221              		.align	1
 2222              		.set	.LANCHOR1,. + 0
 2225              	rxIndex:
 2226 0000 0000     		.space	2
 2227              		.section	.bss.rxReady,"aw",%nobits
 2228              		.set	.LANCHOR3,. + 0
 2231              	rxReady:
 2232 0000 00       		.space	1
 2233              		.section	.bss.rx_byte,"aw",%nobits
 2234              		.set	.LANCHOR0,. + 0
 2237              	rx_byte:
 2238 0000 00       		.space	1
 2239              		.text
 2240              	.Letext0:
 2241              		.file 13 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 2242              		.file 14 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 2243              		.file 15 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stddef.h"
 2244              		.file 16 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 2245              		.file 17 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 2246              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 2247              		.file 19 "/usr/include/newlib/c++/10.3.1/type_traits"
 2248              		.file 20 "/usr/include/newlib/c++/10.3.1/arm-none-eabi/thumb/v7e-m+fp/hard/bits/c++config.h"
 2249              		.file 21 "/usr/include/newlib/c++/10.3.1/bits/stl_pair.h"
 2250              		.file 22 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator_base_types.h"
 2251              		.file 23 "/usr/include/newlib/c++/10.3.1/debug/debug.h"
 2252              		.file 24 "/usr/include/newlib/c++/10.3.1/cwchar"
 2253              		.file 25 "/usr/include/newlib/c++/10.3.1/cstdint"
 2254              		.file 26 "/usr/include/newlib/c++/10.3.1/bits/exception_ptr.h"
 2255              		.file 27 "/usr/include/newlib/c++/10.3.1/clocale"
 2256              		.file 28 "/usr/include/newlib/c++/10.3.1/bits/stl_construct.h"
 2257              		.file 29 "/usr/include/newlib/c++/10.3.1/cstdlib"
 2258              		.file 30 "/usr/include/newlib/c++/10.3.1/cstdio"
 2259              		.file 31 "/usr/include/newlib/c++/10.3.1/initializer_list"
 2260              		.file 32 "/usr/include/newlib/c++/10.3.1/bits/stringfwd.h"
 2261              		.file 33 "/usr/include/newlib/c++/10.3.1/bits/vector.tcc"
 2262              		.file 34 "/usr/include/newlib/c++/10.3.1/cstring"
 2263              		.file 35 "/usr/include/newlib/c++/10.3.1/bits/ptr_traits.h"
 2264              		.file 36 "/usr/include/newlib/c++/10.3.1/bits/move.h"
 2265              		.file 37 "/usr/include/newlib/c++/10.3.1/bits/functexcept.h"
 2266              		.file 38 "/usr/include/newlib/c++/10.3.1/bits/predefined_ops.h"
 2267              		.file 39 "/usr/include/newlib/c++/10.3.1/ext/alloc_traits.h"
 2268              		.file 40 "/usr/include/newlib/c++/10.3.1/bits/stl_iterator.h"
 2269              		.file 41 "/usr/include/newlib/c++/10.3.1/ext/type_traits.h"
 2270              		.file 42 "/usr/include/newlib/sys/_types.h"
 2271              		.file 43 "/usr/include/newlib/sys/reent.h"
 2272              		.file 44 "/usr/include/newlib/sys/lock.h"
 2273              		.file 45 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdarg.h"
 2274              		.file 46 "/usr/include/newlib/wchar.h"
 2275              		.file 47 "/usr/include/newlib/locale.h"
 2276              		.file 48 "/usr/include/newlib/stdlib.h"
ARM GAS  /tmp/ccRLs6kU.s 			page 183


 2277              		.file 49 "/usr/include/newlib/stdio.h"
 2278              		.file 50 "Core/Inc/usart.h"
 2279              		.file 51 "App/Inc/readWioE5.hpp"
 2280              		.file 52 "/usr/include/newlib/string.h"
 2281              		.file 53 "/usr/include/newlib/c++/10.3.1/new"
 2282              		.file 54 "<built-in>"
ARM GAS  /tmp/ccRLs6kU.s 			page 184


DEFINED SYMBOLS
                            *ABS*:0000000000000000 readWioE5.cpp
     /tmp/ccRLs6kU.s:18     .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccRLs6kU.s:26     .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccRLs6kU.s:113    .text.HAL_UART_RxCpltCallback:0000000000000048 $d
.ARM.extab.text.HAL_UART_RxCpltCallback:0000000000000000 $d
.ARM.exidx.text.HAL_UART_RxCpltCallback:0000000000000000 $d
     /tmp/ccRLs6kU.s:124    .text._ZN9ReadWioE5C2Ev:0000000000000000 $t
     /tmp/ccRLs6kU.s:131    .text._ZN9ReadWioE5C2Ev:0000000000000000 _ZN9ReadWioE5C2Ev
     /tmp/ccRLs6kU.s:166    .text._ZN9ReadWioE5C2Ev:0000000000000014 $d
.ARM.exidx.text._ZN9ReadWioE5C2Ev:0000000000000000 $d
     /tmp/ccRLs6kU.s:131    .text._ZN9ReadWioE5C2Ev:0000000000000000 _ZN9ReadWioE5C1Ev
     /tmp/ccRLs6kU.s:175    .rodata._ZN9ReadWioE56sendATEPKc.str1.4:0000000000000000 $d
     /tmp/ccRLs6kU.s:179    .text._ZN9ReadWioE56sendATEPKc:0000000000000000 $t
     /tmp/ccRLs6kU.s:186    .text._ZN9ReadWioE56sendATEPKc:0000000000000000 _ZN9ReadWioE56sendATEPKc
     /tmp/ccRLs6kU.s:238    .text._ZN9ReadWioE56sendATEPKc:0000000000000028 $d
.ARM.exidx.text._ZN9ReadWioE56sendATEPKc:0000000000000000 $d
     /tmp/ccRLs6kU.s:245    .rodata._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.str1.4:0000000000000000 $d
     /tmp/ccRLs6kU.s:249    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 $t
     /tmp/ccRLs6kU.s:256    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag
     /tmp/ccRLs6kU.s:473    .text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000054 $d
.ARM.exidx.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag:0000000000000000 $d
     /tmp/ccRLs6kU.s:479    .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 $t
     /tmp/ccRLs6kU.s:486    .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED2Ev
.ARM.exidx.text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 $d
     /tmp/ccRLs6kU.s:486    .text._ZNSt12_Vector_baseIcSaIcEED2Ev:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED1Ev
     /tmp/ccRLs6kU.s:566    .rodata._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_.str1.4:0000000000000000 $d
     /tmp/ccRLs6kU.s:570    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $t
     /tmp/ccRLs6kU.s:577    .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 _Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
     /tmp/ccRLs6kU.s:1085   .text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:000000000000008c $d
.ARM.extab.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
.ARM.exidx.text._Z13serial_printfIJEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
     /tmp/ccRLs6kU.s:1117   .rodata._ZN9ReadWioE55setupEv.str1.4:0000000000000000 $d
     /tmp/ccRLs6kU.s:1118   .rodata._ZN9ReadWioE55setupEv.str1.4:0000000000000000 .LC3
     /tmp/ccRLs6kU.s:1121   .text._ZN9ReadWioE55setupEv:0000000000000000 $t
     /tmp/ccRLs6kU.s:1128   .text._ZN9ReadWioE55setupEv:0000000000000000 _ZN9ReadWioE55setupEv
     /tmp/ccRLs6kU.s:1347   .text._ZN9ReadWioE55setupEv:0000000000000040 $d
.ARM.extab.text._ZN9ReadWioE55setupEv:0000000000000000 $d
.ARM.exidx.text._ZN9ReadWioE55setupEv:0000000000000000 $d
     /tmp/ccRLs6kU.s:1381   .text._Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $t
     /tmp/ccRLs6kU.s:1388   .text._Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 _Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_
     /tmp/ccRLs6kU.s:1899   .text._Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000098 $d
.ARM.extab.text._Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
.ARM.exidx.text._Z13serial_printfIJPcEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEDpT_:0000000000000000 $d
     /tmp/ccRLs6kU.s:1930   .rodata._ZN9ReadWioE54loopEv.str1.4:0000000000000000 $d
     /tmp/ccRLs6kU.s:1931   .rodata._ZN9ReadWioE54loopEv.str1.4:0000000000000000 .LC4
     /tmp/ccRLs6kU.s:1934   .text._ZN9ReadWioE54loopEv:0000000000000000 $t
     /tmp/ccRLs6kU.s:1941   .text._ZN9ReadWioE54loopEv:0000000000000000 _ZN9ReadWioE54loopEv
     /tmp/ccRLs6kU.s:2174   .text._ZN9ReadWioE54loopEv:0000000000000050 $d
.ARM.extab.text._ZN9ReadWioE54loopEv:0000000000000000 $d
.ARM.exidx.text._ZN9ReadWioE54loopEv:0000000000000000 $d
     /tmp/ccRLs6kU.s:2231   .bss.rxReady:0000000000000000 rxReady
     /tmp/ccRLs6kU.s:2225   .bss.rxIndex:0000000000000000 rxIndex
     /tmp/ccRLs6kU.s:2218   .bss.rxBuffer:0000000000000000 rxBuffer
     /tmp/ccRLs6kU.s:2237   .bss.rx_byte:0000000000000000 rx_byte
     /tmp/ccRLs6kU.s:2214   .bss.rxBuffer:0000000000000000 $d
     /tmp/ccRLs6kU.s:2221   .bss.rxIndex:0000000000000000 $d
ARM GAS  /tmp/ccRLs6kU.s 			page 185


     /tmp/ccRLs6kU.s:2232   .bss.rxReady:0000000000000000 $d
     /tmp/ccRLs6kU.s:2238   .bss.rx_byte:0000000000000000 $d
                           .group:0000000000000000 _ZNSt12_Vector_baseIcSaIcEED5Ev

UNDEFINED SYMBOLS
HAL_UART_Receive_IT
huart2
__aeabi_unwind_cpp_pr1
__aeabi_unwind_cpp_pr0
snprintf
strlen
HAL_UART_Transmit
memcpy
_ZSt19__throw_logic_errorPKc
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj
_ZdlPvj
_Znwj
_ZSt20__throw_length_errorPKc
_ZSt17__throw_bad_allocv
memset
__cxa_end_cleanup
huart1
__gxx_personality_v0
_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv
